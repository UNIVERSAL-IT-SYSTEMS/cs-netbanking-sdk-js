{"version":3,"sources":["webpack:///webpack/bootstrap 7ef47416df51e2a9e5ba","webpack:///./lib/netbanking.ts","webpack:///external \"cs-core-sdk\"","webpack:///./lib/accounts/accounts.ts","webpack:///./lib/accounts/balance.ts","webpack:///./lib/accounts/services.ts","webpack:///./lib/accounts/reservations.ts","webpack:///./lib/accounts/repayments.ts","webpack:///./lib/accounts/statements.ts","webpack:///./lib/accounts/subAccounts.ts","webpack:///./lib/accounts/transactions.ts","webpack:///./lib/accounts/transfers.ts","webpack:///./lib/profile/profile.ts","webpack:///./lib/profile/lastLogin.ts","webpack:///./lib/cards/cards.ts","webpack:///./lib/cards/delivery.ts","webpack:///./lib/cards/transactions.ts","webpack:///./lib/cards/actions.ts","webpack:///./lib/cards/limits.ts","webpack:///./lib/cards/secure3D.ts","webpack:///./lib/cards/transfers.ts","webpack:///./lib/cards/statements.ts","webpack:///./lib/orders/orders.ts","webpack:///./lib/orders/bookingDate.ts","webpack:///./lib/orders/domestic.ts","webpack:///./lib/orders/limits.ts","webpack:///./lib/orders/mobile.ts"],"names":[],"mappings":"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","file":"cs-netbanking-sdk.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7ef47416df51e2a9e5ba\n **/","/// <reference path=\"../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {AccountsResource} from './accounts/accounts';\nimport {ProfileResource} from './profile/profile';\nimport {CardsResource} from './cards/cards';\nimport {OrdersResource} from './orders/orders';\n\nvar sharedClient : NetbankingClient = null;\n\n/*+\n * Returns the singleton NetbankingClient\n */\nexport function getClient() {\n    if (sharedClient === null) {\n        return new NetbankingClient(CSCoreSDK.config.copy(), CSCoreSDK._sharedContext);\n    }\n    return sharedClient;\n}\n\n/**\n * Netbanking client \n */\nexport class NetbankingClient extends CSCoreSDK.WebApiClient {\n    \n    /**\n     * Creates new instance of NetbankingClient\n     * \n     * @param config WebApiConfiguration object that configures this client\n     * @param context WebApiContext object that allows for data sharing between clients\n     */\n    constructor(config: CSCoreSDK.WebApiConfiguration, context: CSCoreSDK.WebApiContext) {\n        super(config, context, '/api/v3/netbanking/my');\n    }\n    \n   /**\n    * List all accounts and get information about them.\n    */\n    get accounts() {\n        return new AccountsResource(this.getPath() + '/accounts', this);\n    }\n    \n    /**\n    * Get information about the profile and past logins.\n    */\n    get profile() {\n        return new ProfileResource(this.getPath() + '/profile', this);\n    }\n    \n    /**\n    * Represents list of payment cards (either debet or credit) for current user. Every card was issued for current user or belongs to one of his accounts.\n    */\n    get cards() {\n        return new CardsResource(this.getPath() + '/cards', this);\n    }\n    \n    /**\n    * Get information about payments orders\n    */\n    get orders() {\n        return new OrdersResource(this.getPath() + '/orders', this);\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/netbanking.ts\n **/","module.exports = require(\"cs-core-sdk\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"cs-core-sdk\"\n ** module id = 1\n ** module chunks = 0\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Signed, AccountNumber, Amount, Parameters} from '../common';\nimport {AccountsBalanceResource} from './balance';\nimport {AccountsServicesResource} from './services';\nimport {AccountsReservationsResource} from './reservations';\nimport {AccountsRepaymentsResource} from './repayments';\nimport {AccountsStatementsResource} from './statements';\nimport {AccountsSubAccountsResource} from './subAccounts';\nimport {AccountsTransactionsResource} from './transactions';\nimport {AccountsTransfersResource} from './transfers';\n\n/**\n* List all accounts and get individual account instance resource \n*/\nexport class AccountsResource extends CSCoreSDK.Resource \nimplements CSCoreSDK.HasInstanceResource<AccountResource>, CSCoreSDK.PaginatedListEnabled<MainAccount> {\n    \n   /**\n    * List all accounts\n    */\n    list = (params?: AccountsParameters) : Promise<AccountList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'accounts', params, response => {\n            response.items.forEach(item => {\n                \n                // add convenience methods\n                resourcifyListing(<MainAccount>item, this.withId((<MainAccount>item).id), true, false);\n                \n                // transform ISO dates to native Date objects\n                transformResponse(<MainAccount>item);\n            });\n            return response;\n        });\n    }\n    \n    /**\n    * Get the detail of the account with a given id\n    */\n    withId = (id: string|number) : AccountResource => {\n        return new AccountResource(id, this.getPath(), this._client);\n    }\n}\n\n/**\n* Get detail of the individual account and additional information about it \n*/\nexport class AccountResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<MainAccount>, CSCoreSDK.UpdateEnabled<ChangeAccountSettingsRequest, ChangeAccountSettingsResponse> {\n    \n    /**\n    * Get account detail\n    */\n    get = (): Promise<MainAccount> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n            \n            // add convenience methods\n            resourcifyListing(<MainAccount>response, this, false, false);\n            \n            // transform ISO dates to native Date objects\n            transformResponse(<MainAccount>response);\n            \n            return response;\n        });\n    }\n    \n    /**\n    * Update account's alias \n    */  \n    update = (payload: ChangeAccountSettingsRequest): Promise<ChangeAccountSettingsResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            \n            // add convenience methods\n            resourcifyListing(<MainAccount>response, this, false, true);\n            \n            // transform ISO dates to native Date objects\n            transformResponse(<MainAccount>response);\n            \n            return response;\n        });\n    }\n    \n    /**\n    * Get information about the account's balance\n    */\n    get balance() {\n        return new AccountsBalanceResource(this.getPath() + '/balance', this._client);\n    }\n    \n    /**\n    * Get information about the account's services\n    */\n    get services() {\n        return new AccountsServicesResource(this.getPath() + '/services', this._client);\n    }\n    \n    /**\n    * Get information about the account's reservations\n    */\n    get reservations() {\n        return new AccountsReservationsResource(this.getPath() + '/reservations', this._client);\n    }\n    \n    /**\n    * Get information about the account's repayments\n    */\n    get repayments() {\n        return new AccountsRepaymentsResource(this.getPath() + '/repayments', this._client);\n    }\n    \n    /**\n    * Get information about the account's statements\n    */\n    get statements() {\n        return new AccountsStatementsResource(this.getPath() + '/statements', this._client);\n    }\n    \n    /**\n    * Get information about the account's subaccounts\n    */\n    get subAccounts() {\n        return new AccountsSubAccountsResource(this.getPath() + '/subaccounts', this._client);\n    }\n    \n    /**\n    * Get information about the account's transactions\n    */\n    get transactions() {\n        return new AccountsTransactionsResource(this.getPath() + '/transactions', this._client);\n    }\n    \n    /**\n    * Revolve a loan\n    */\n    get transfers() {\n        return new AccountsTransfersResource(this.getPath() + '/transfer', this._client);\n    }\n}\n\nfunction resourcifyListing(accountListing: MainAccount, account: AccountResource, isFromList: boolean, isFromUpdate: boolean) : void {\n    if(isFromList) {\n        accountListing.get = account.get;    \n    }\n    if(!isFromUpdate) {\n        accountListing.update = account.update;\n    }\n    \n    accountListing.update = account.update;\n    accountListing.services = account.services;\n    accountListing.transactions = account.transactions;\n    accountListing.reservations = account.reservations;\n    accountListing.transfers = account.transfers;\n    accountListing.statements = account.statements;\n    accountListing.repayments = account.repayments;\n}\n\nfunction transformResponse(accountListing) {\n    if(accountListing.saving) {\n        CSCoreSDK.EntityUtils.addDatesFromISO('nextProlongation', accountListing.saving);    \n    }\n    if(accountListing.loan) {\n        CSCoreSDK.EntityUtils.addDatesFromISO(['maturityDate', 'drawdownToDate', 'installmentDay', 'nextRateDate'], accountListing.loan);\n    }\n    if (accountListing.subaccounts) {\n        CSCoreSDK.EntityUtils.addDatesToItems('overdraftDueDate', accountListing, 'subaccounts');\n    }\n    CSCoreSDK.EntityUtils.addDatesFromISO('overdraftDueDate', accountListing);\n}\n\nexport interface AccountList extends CSCoreSDK.PaginatedListResponse<MainAccount> {}\n\nexport interface MainAccount extends Account {\n    \n    /**\n    * User defined account name. Max. 50 characters\n    */\n    alias?: string;\n    \n    /**\n    * Account description. Currently account owner name is returned.\n    */\n    description?: string;\n    \n    /**\n    * Disposable account balance\n    */\n    disposable?: Amount;\n    \n    /**\n    * Overdraft amount for account\n    */\n    overdraft?: OverdraftAmount;\n    \n    /**\n    * Due date of overdraft. Only for overdrafts where automatic prolongation is not set.\n    */\n    overdraftDueDate?: Date;\n     \n    /**\n    * Array of flags\n    */\n    flags?: [string];\n    \n    /**\n    * Account's subaccounts\n    */\n    subaccounts?: [SubAccount];\n    \n    /**\n    * Basic debit Interest rate, used for Loan and Mortgage account. Value in percentage, e.g. 11,5 will be displayed as 11,5 %.\n    */\n    debitInterestRate?: number;\n    \n    /**\n    * For loans (not mortgages) this is interest rate which apply when repayment is delayed. Value in percentage, e.g. 19,5 will be displayed as 19,5 %.\n    */\n    penaltyInterestRate?: number;\n    \n    /**\n    * Loan of the account\n    */\n    loan?: Loan;\n    \n    /**\n    * Savings of the account\n    */\n    saving?: Saving;\n    \n   /**\n    * \n    */\n    ownTransferReceivers?: TransferReceivers;\n    \n    /**\n     * Convenience method for getting detail of the account right from the list \n     */\n    get: () => Promise<MainAccount>;\n    \n    update: (payload: ChangeAccountSettingsRequest) => Promise<ChangeAccountSettingsResponse>;\n    \n    services: AccountsServicesResource;\n    \n    transactions: AccountsTransactionsResource;\n    \n    reservations: AccountsReservationsResource;\n    \n    transfers: AccountsTransfersResource;\n    \n    statements: AccountsStatementsResource;\n    \n    repayments: AccountsRepaymentsResource;\n}\n\nexport interface ChangeAccountSettingsResponse extends MainAccount, Signed {}\n\nexport interface OverdraftAmount extends Amount {\n    \n    /**\n    * Due date of overdraft. Only for overdrafts where automatic prolongation is not set.\n    */\n    dueDate?: Date;\n}\n\nexport interface SubAccount extends Account {\n    \n    /**\n    * In case of interest rate bands this is the interest rate which applies to value over limit.\n    */\n    \"cz-interestRateOverLimit\"?: string;\n    \n    /**\n    * Limit amount for basic credit interest rate used for some saving accounts.\n    */\n    \"cz-interestRateLimit\"?: Amount;\n}\n\nexport interface Account {\n   /**\n    * Unique product id\n    */\n    id: string;\n    \n    /**\n    * Account number of this account\n    */\n    accountno: AccountNumber;\n    \n    /**\n    * Product type. Possible values are CURRENT (for current accounts), SAVING (for saving accounts), LOAN (for loans)\n    */\n    type: string;\n    \n    /**\n    * Subtype product. Possible values are mapping based on type. For CURRENT (CURRENT_ACCOUNT, INVESTMENT_CURRENT_ACCOUNT, \n    * GIRO_ACCOUNT, GIRO_ACCOUNT_OLD, FOREIGN_ACCOUNT, INVESTMENT_FOREIGN_ACCOUNT), SAVING (DEPOSIT_ACCOUNT, SAVINT_ACCOUNT, \n    * SAVING_INTERNET, CHILDREN_PASSBOOK, SAVING_CS, BENEFIT_INVEST), LOAN (LOAN_ACCOUNT, MORTGAGE, REVOLVING_LOAN).\n    */\n    subtype: string;\n    \n    /**\n    * Product code.\n    */\n    product: string;\n    \n    /**\n    * Product description localized\n    */\n    productI18N: string;\n    \n    /**\n    * Actual account balance. For loans this field contains outstanding principal\n    */\n    balance: Amount;\n    \n    /**\n    * Basic credit Interest rate, used for Current and Saving account. Value in percentage, e.g. 0,5 will be displayed as 0,5 %\n    */\n    creditInterestRate: number;\n}\n\nexport interface Loan {\n    \n    /**\n    * For mortgages this is the date of interest rate validity.\n    */\n    interestRateToDate?: number;\n    \n    /**\n    * For loans this is contracted value of the loan.\n    */\n    loanAmount?: Amount;\n    \n    /**\n    * For mortgages this is its maturity date.\n    */\n    maturityDate?: Date;\n    \n    /**\n    * For loans this is remaining amount for utilization. Basically this is disposable balance for loans.\n    */\n    remainingLoanAmount: Amount;\n    \n    /**\n    * For loans and morgages this is last date when you can use money.\n    */\n    drawdownToDate?: Date;\n    \n    /**\n    * For mortgages this is actual drawdown amount.\n    */\n    drawdownAmount: Amount;\n    \n    /**\n    * For loans and mortgages this is value of the principal. Value which should be paid back to bank.\n    */\n    outstandingDebt?: Amount;\n    \n    /**\n    * Amount of money to onetime repay whole loan.\n    */\n    \"cz-lumpsumRepayment\"?: Amount;\n    \n    /**\n    * Frequency of the repayment. Possible values are MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, WEEKLY.\n    */\n    installmentFrequency?: string;\n    \n    /**\n    * Day of the month when repayment should be paid (f.e. 22)\n    */\n    installmentDay?: Date;\n    \n    /**\n    * Loans and mortgages repayment amount.\n    */\n    nextRateAmount?: Amount;\n    \n    /**\n    * Next date of the repayment (for loans).\n    */\n    nextRateDate?: Date;\n}\n\nexport interface Saving {\n    \n    /**\n    * In case of interest rate bands this is the interest rate which applies to value over limit.\n    */\n    interestRateOverLimit?: number;\n    \n    /**\n    * Limit amount for basic credit interest rate used for some saving accounts.\n    */\n    interestRateLimit?: Amount;\n    \n    /**\n    * Bonus interest rates which can be gained if certain conditions are met.\n    */\n    \"cz-bonusInterestRate\"?: number;\n    \n    /**\n    * Saving purpose code (for some savings accounts). Possible values are ELECTRONICS, WHITE_GOODS, HOLIDAYS, SPORT_EQUIPMENT, FURNITURE, CARS_AND_ACCESSORIES, HOBBIES_AND_GARDEN, GIFTS_AND_PARTIES, HEALTH, STUDIES, HOUSING, PERSONAL.\n    */\n    savingGoal?: number;\n    \n    /**\n    * For some savings accounts this is target amount of the saving.\n    */\n    targetAmount?: Amount;\n    \n    /**\n    * Minimum balance for some current and savings accounts.\n    */\n    minimumBalance?: Amount;\n    \n    /**\n    * The next prolongation date, when BE system will automatically credit regular deposit amount on saving account or calculate and transfer interest on term deposit.\n    */\n    nextProlongation: Date;\n    \n    /**\n    * Maximum amount of own transfer from current (master) to saving account (slave, this) used only for some saving accounts. Currently used only for Individualní spoření. Field contains maximum amount for current month (maximum for month minus already executed payments in current month).\n    */\n    extraSavingMaximum?: Amount;\n    \n    /**\n    * Maximum amount of own transfer from current (master) to saving account (slave, this) used only for some saving accounts. Currently used only for Individualni sporeni. Field contains maximum possible amount for all months (regardless already created payments).\n    */\n    \"cz-extraSavingMaximumMonthly\"?: Amount;\n}\n\nexport interface TransferReceivers {\n    \n    /**\n    * Identifier of the account which is allowed as a transfer receiver. If id is specified then you can find it among other accounts in GET /netbanking/my/accounts response.\n    */\n    id: number;\n    \n    /**\n    * Account number which is allowed as a transfer receiver.\n    */\n    accountno: AccountNumber;\n}\n\nexport interface ChangeAccountSettingsRequest {\n    \n    /**\n    * Account indentifier\n    */\n    id?: string;\n    \n    /**\n    * User defined account name. Max. 50 characters \n    */\n    alias?: string;\n}\n\nexport interface AccountsParameters extends Parameters {\n    \n    /**\n    * Example: CURRENT.\n    */\n    type?: string;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/accounts.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../common';\n\n/**\n* Get information about the account's balance\n*/\nexport class AccountsBalanceResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.GetEnabled<BalanceListing> {\n    \n    /**\n    * Fetches the balance and returns them in a promise\n    */\n    get = (): Promise<BalanceListing> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null);\n    }\n}\n\nexport interface BalanceListing {\n    \n    /**\n    * Account balance for Current, Saved amount for Saving, Principal Outstanding for Loan/Mortgage.\n    */\n    balance: Amount;\n    \n    /**\n    * Disposable balance for Current account.\n    */\n    disposable?: Amount;\n    \n    /**\n    * Overdraft amount for Current account.\n    */\n    overdraft?: Amount; \n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/balance.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\n\n/**\n* Get information about the account's services\n*/\nexport class AccountsServicesResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Service> {\n    \n    /**\n    * Fetches the services and returns them in a promise\n    */\n    list = (params?: ServicesParameters): Promise<ServiceList> => {\n        this._path = this.getPath().replace('/my', '/cz/my');\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'services', params, response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesToItems(['dateFrom', 'dateTo'], response);\n            \n            return response;\n        });\n    }\n}\n\nexport interface ServiceList extends CSCoreSDK.PaginatedListResponse<Service> {}\n\nexport interface Service {\n    \n    /**\n    * Service identifier.\n    */\n    id: string;\n    \n    /**\n    * Localized name of the service.\n    */\n    nameI18N: string;\n    \n    /**\n    * Information about service group. There is an icon defined for every group.\n    */\n    iconGroup: string;\n    \n    /**\n    * Service is active from date.\n    */\n    dateFrom?: Date;\n    \n    /**\n    * Service will be active till date.\n    */\n    dateTo?: Date;\n}\n\nexport interface ServicesParameters extends CSCoreSDK.Paginated {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/services.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../common';\n\n/**\n* Get information about the account's reservations\n*/\nexport class AccountsReservationsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Reservation> {\n    \n    /**\n    * Fetches the reservations and returns them in a promise\n    */\n    list = (params?: ReservationsParameters) : Promise<ReservationList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'reservations', params, response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesToItems(['creationDate', 'expirationDate'], response);\n            \n            return response;\n        });\n    }\n}\n\nexport interface ReservationList extends CSCoreSDK.PaginatedListResponse<Reservation> {}\n\nexport interface Reservation {\n    \n    /**\n    * Type of reservation. Possible values are CASH_WITHDRAWAL, PAYMENT, CARD_PAYMENT, OTHER\n    */\n    type: string;\n    \n    /**\n    * Reservation status. Possible values are RESERVED, CANCELLED, EXPIRED. Currently only reservations with status RESERVED are supported.\n    */\n    status: string;\n    \n    /**\n    * Transaction date and time.\n    */\n    creationDate: Date;\n    \n    /**\n    * Reservation expiration date.\n    */\n    expirationDate?: Date;\n    \n    /**\n    * Merchant Name / ATM.\n    */\n    merchantName?: string;\n    \n    /**\n    * Merchant address.\n    */\n    \"cz-merchantAddress\"?: string;\n    \n    /**\n    * Reservation description, additional info.\n    */\n    description: string;\n    \n    /**\n    * The amount of reservation in account's currency\n    */\n    amount: Amount;\n    \n    /**\n    * The amount of the reservation in transaction currency\n    */\n    amountSender?: Amount; \n}\n\nexport interface ReservationsParameters extends CSCoreSDK.Paginated {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/reservations.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../common';\n\n/**\n* Get information about the account's repayments\n*/\nexport class AccountsRepaymentsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<Repayment> {\n    \n    /**\n    * Fetches the repayments and returns them in a promise\n    */\n    list = (): Promise<RepaymentList> => {\n        this._path = this.getPath().replace('/my', '/cz/my');\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'repayments', null).then(response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesToItems('repaymentDate', response)\n\n            return response;\n        });\n    }\n}\n\nexport interface RepaymentList extends CSCoreSDK.PaginatedListResponse<Repayment> {}\n\nexport interface Repayment {\n    \n   /**\n    * Date of the repayment.\n    */\n    repaymentDate: Date;\n    \n   /**\n    * Repayment amount. What should be paid.\n    */\n    amount: Amount;\n    \n   /**\n    * Actual paid amount.\n    */\n    paidAmount?: Amount;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/repayments.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {StatementList, Statement, Parameters} from '../common';\n\n/**\n* Get information about the account's statements\n*/\nexport class AccountsStatementsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Statement> {\n    \n    /**\n    * Fetches the statements and returns them in a promise\n    */\n    list = (params?: Parameters) : Promise<StatementList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'statements', params, response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesToItems('statementDate', response);\n            \n            return response;\n        })\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/statements.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {StatementList, Statement, Parameters} from '../common';\n\n/**\n* Get individual SubAccount resource\n*/\nexport class AccountsSubAccountsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<SubAccountResource> {\n    \n    /**\n    * Returns individual SubAccount resource with a given id\n    */\n    withId = (id: string|number) : SubAccountResource => {\n        return new SubAccountResource(id, this.getPath(), this._client);\n    }\n}\n\n/**\n* Get information about the subaccount\n*/\nexport class SubAccountResource extends CSCoreSDK.InstanceResource {\n    \n    /**\n    * Get information about the subaccount's statements\n    */\n    get statements() {\n        return new SubAccountStatementsResource(this.getPath() + '/statements', this._client);\n    }\n}\n\n/**\n* List all subaccount's statements\n*/\nexport class SubAccountStatementsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Statement> {\n    \n    /**\n    * Returns all subaccount's statements in a promise\n    */\n    list = (params?: Parameters): Promise<StatementList> => {\n        this._path = this.getPath().replace('/my', '/cz/my');\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'statements', params, response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesToItems('statementDate', response);\n            \n            return response;\n        });\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/subAccounts.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Signed, TransactionList, Transaction, Parameters, AddNoteAndMarkTransactionsRequest, AddNoteAndMarkTransactionsResponse} from '../common';\n\n/**\n* Get individual AccountsTransactionsResource\n*/\nexport class AccountsTransactionsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<AccountsTransactionResource>,\nCSCoreSDK.ListEnabled<Transaction> {\n    \n    /**\n    * Returns list of transactions\n    */\n    list = (params?: Parameters): Promise<TransactionList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'transactions', params, response => {\n            \n            CSCoreSDK.EntityUtils.addDatesToItems(['bookingDate', 'valuationDate', 'transactionDate'], response);\n            \n            return response;\n        });\n    }\n    \n    /**\n    * Returns individual AccountsTransactionResource with a given id\n    */\n    withId = (id: string|number) : AccountsTransactionResource => {\n        return new AccountsTransactionResource(id, this.getPath(), this._client);\n    }\n    \n    // nebude fungovat\n    export = (params): Promise<{}> => {\n        return CSCoreSDK.ResourceUtils.CallCreateWithSuffix(this, 'export', params);\n    }\n}\n\n/**\n* Allows to add or change a client's personal transaction note and mark the transaction as favorite/important for one specific transaction on selected account.\n*/\nexport class AccountsTransactionResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.UpdateEnabled<AddNoteAndMarkTransactionsRequest, AddNoteAndMarkTransactionsResponse> {\n    \n    /**\n    * Adds, changes of marks transaction\n    */  \n    update = (payload: AddNoteAndMarkTransactionsRequest): Promise<AddNoteAndMarkTransactionsResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/transactions.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Signed, Amount} from '../common';\n\n/**\n* Revolve a loan\n*/\nexport class AccountsTransfersResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.UpdateEnabled<TransferRequest, TransferResponse> {\n    \n    /**\n    * Revolves the loan. Currently only REVOLVING_LOAN subtype is supported.\n    */  \n    update = (payload: TransferRequest): Promise<TransferResponse> => {\n        return CSCoreSDK.ResourceUtils.CallCreate(this, payload);\n    }\n}\n\nexport interface TransferResponse extends Signed {}\n\nexport interface TransferRequest {\n    \n   /**\n    * Type of the transfer. Currently only REVOLVING_LOAN_DISBURSEMENT is supported.\n    */\n    type: string;\n    \n    /**\n    * Amount which should be transfered.\n    */\n    amount: Amount;\n    \n    /**\n    * Payment transfer date.\n    */\n    transferDate: Date;\n    \n    /**\n    * Note for the recipient.\n    */\n    recipientNote?: string;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/transfers.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {LastLoginResource} from './lastLogin';\n\n/**\n* Get information about the profile and past logins.\n*/\nexport class ProfileResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.GetEnabled<Profile> {\n    \n    /** \n     * Returns information about the profile \n     */  \n    get = (): Promise<Profile> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(profile => {\n            if((<Profile>profile).lastlogin) {\n                CSCoreSDK.EntityUtils.addDatesFromISO('lastlogin', profile);   \n            }\n            return profile;\n        });\n    }\n    \n    /** \n     * Returns LastLoginResource for listing past logins\n     */\n    get lastLogin() {\n        return new LastLoginResource(this.getPath() + '/logininfo', this.getClient());\n    }\n}\n\nexport interface Profile {\n    \n    /**\n    * user's first name\n    */\n    firstName: string;\n    \n    /**\n    * user's last name\n    */\n    lastName: string;\n    \n    /**\n    * user's name used for salutation\n    */\n    salutation?: string;\n    \n    /**\n    * customer's id\n    */\n    customerId: string;\n    \n    /**\n    * number of institute\n    */\n    institudeId: number;\n    \n    /**\n    * Has the customer approved §107 telecommunication act. Possible values: ACCEPTED, NOT_ACCEPTED, UNKNOWN.\n    */\n    marketingInfoAcceptance: string;\n    \n    /**\n    * user's gender. Possible values: MALE, FEMALE, UNKNOWN.\n    */\n    gender: string;\n    \n    /**\n    * Date and time of the last login of customer. Common last login for all client applications - George, QC, etc.\n    */\n    lastlogin?: Date;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/profile/profile.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\n\n/** \n * List all past logins\n */\nexport class LastLoginResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<LastLoginInfo> {\n    \n    /** \n     * Returns promise with a list of past logins\n     */ \n    list = () : Promise<LastLoginList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'lastlogin').then(response => {\n            \n            CSCoreSDK.EntityUtils.addDatesToItems('lastlogin', response);\n            \n            return response;\n        });\n    }\n}\n\nexport interface LastLoginList extends CSCoreSDK.ListResponse<LastLoginInfo> {}\n\nexport interface LastLoginInfo {\n    \n    /**\n    * Channel of the last login.\n    */\n    channel: string;\n    \n    /**\n    * Date of the last login.\n    */\n    lastlogin: Date;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/profile/lastLogin.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount, AccountNumber, Signed, Parameters} from '../common';\nimport {CardDeliveryResource} from './delivery';\nimport {CardTransactionsResource} from './transactions';\nimport {CardActionsResource} from './actions';\nimport {CardLimitsResource} from './limits';\nimport {CardSecure3DResource} from './secure3D';\nimport {CardTransfersResource} from './transfers';\nimport {CardAccountsResource} from './statements';\n\n    \n/**\n* Represents list of payment cards (either debet or credit) for current user. Every card was issued for current user or belongs to one of his accounts.\n*/\nexport class CardsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<Card>, CSCoreSDK.HasInstanceResource<CardResource> {\n    \n    /**\n    * List all cards \n    */  \n    list = (params?: Parameters) : Promise<CardListing> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'cards', params, response => {\n            \n            response.items.forEach(item => {\n                transformResponse(item);\n                // add convenience get method to fetch detail of the card\n                resourcifyListing(<Card>item, this.withId((<Card>item).id), true, false);\n            })\n            return response;\n        });\n    }\n    \n    /**\n    * Get a resource for card with a given id \n    */  \n    withId = (id: string) : CardResource => {\n        return new CardResource(id, this.getPath(), this.getClient());\n    }\n}\n\nexport class CardResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<Card>, CSCoreSDK.UpdateEnabled<ChangeCardSettingsRequest, ChangeCardSettingsResponse> {\n    \n    /**\n    * Get detail of the card \n    */  \n    get = () : Promise<Card> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(card => {\n            resourcifyListing(<Card>card, this, false, false);\n            transformResponse(card);\n            return card;\n        });\n    }\n    \n    /**\n    * Update card's alias \n    */  \n    update = (payload: ChangeCardSettingsRequest): Promise<ChangeCardSettingsResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(card => {\n            resourcifyListing(<Card>card, this, false, true);\n            transformResponse(card);\n            return card;\n        })\n    }\n    \n    /**\n    * Get current delivery settings\n    */  \n    get delivery() {\n        return new CardDeliveryResource(this.getPath() + '/delivery', this._client);\n    }\n    \n    /**\n    * Allows to add or change a client's personal note and mark/star the card transaction as favorite/important for one specific transaction\n    */\n    get transactions() {\n        return new CardTransactionsResource(this.getPath() + '/transactions', this._client);\n    }\n    \n    /**\n    * Issue various actions on a single card. Currently supported actions are: \n    * reissue pin, lock card, unlock card, activate card, set automatic card replacement on, set automatic card replacement off, replacement card request\n    */\n    get actions() {\n        return new CardActionsResource(this.getPath() + '/states', this._client);\n    }\n    \n    /**\n    * Get information about different limits\n    */\n    get limits() {\n        return new CardLimitsResource(this.getPath() + '/card-limits', this._client);\n    }\n    \n    /**\n    * Get the 3D secure online shopping status\n    */\n    get secure3d() {\n        return new CardSecure3DResource(this.getPath() + '/secure-online-shopping', this._client);\n    }\n    \n    /**\n    * Resource for paying up credit card debt\n    */\n    get transfers() {\n        return new CardTransfersResource(this.getPath() + '/transfer', this._client);\n    }\n    \n    /**\n    * Account resource for listing statements\n    */\n    get accounts() {\n        return new CardAccountsResource(this.getPath() + '/mainaccount', this._client);\n    }\n}\n\nfunction resourcifyListing(itemListing: Card, itemResource: CardResource, isFromList: boolean, isFromUpdate: boolean) {\n    if(isFromList) {\n        itemListing.get = itemResource.get;    \n    }\n    if(!isFromUpdate) {\n        itemListing.update = itemResource.update;\n    }\n    itemListing.delivery = itemResource.delivery;\n    itemListing.transactions = itemResource.transactions;\n    itemListing.actions = itemResource.actions;\n    itemListing.limits = itemResource.limits;\n    itemListing.secure3d = itemResource.secure3d;\n    itemListing.transfers = itemResource.transfers;\n    itemListing.accounts = itemResource.accounts;\n}\n\nfunction transformResponse(response) {\n    CSCoreSDK.EntityUtils.addDatesFromISO(['expiryDate', 'validFromDate'], response);\n}\n\nexport interface CardListing extends CSCoreSDK.PaginatedListResponse<Card> {}\n\nexport interface Card {\n    \n    /**\n    * unique product id\n    */\n    id: string;\n    \n    /**\n    * Users product name. Max. 50 characters.\n    */\n    alias?: string;\n    \n    /**\n    * product owner\n    */\n    owner: string;\n    \n    /**\n    * card number\n    */\n    number: string;\n    \n    /**\n    * Card sequence number. The number distinguishing between separate cards (different plastic cards) with the same Primary Account Number (PAN)\n    */\n    sequenceNumber: string;\n    \n    /**\n    * Localized product name.\n    */\n    productI18N: string;\n    \n    /**\n    * Internal product code.\n    */\n    productCode?: string;\n    \n    /**\n    * Expiration date of particular plastic card\n    */\n    expiryDate?: Date;\n    \n    /**\n    * Date from which this particular plastic card is valid\n    */\n    validFromDate?: Date;\n    \n    /**\n    * Current state of card. Possible values: ACTIVE, INACTIVE (issued card not activated yet), TEMPORARY_BLOCKED.\n    */\n    state: string;\n    \n    /**\n    * Type of card: credit, debit/bankcard. Possible Values: BANK_CARD (used for debit card too), CREDIT\n    */\n    type: string;\n    \n    /**\n    * Credit card provider/issuer: Erste Bank or external bank. Possible Values: ERSTE_BANK, EXTERNAL\n    */\n    provider: string;\n    \n    /**\n    * Indicates reason for locking the card. Possible Values: THEFT, LOSS, FRAUD, OTHER\n    */\n    lockReason?: string;\n    \n    /**\n    * Card characteristics. Possible values: MAIN, AUTHORIZED\n    */\n    characteristics?: string;\n    \n    /**\n    * For credit card: Loan limit for card (shadow) account.\n    */\n    limit?: Amount;\n    \n    /**\n    * Disposable balance of current account linked to debit/bank card or Available balance of credit card (disposable balance of shadow account). Not available for all cards or states (locked, closed, unknown).\n    */\n    balance?: Amount;\n    \n    /**\n    * Total outstanding/owed amount for credit card (the last known value).\n    */\n    outstandingAmount?: Amount;\n    \n    /**\n    * Minimal installment repayment amount for credit card (at previous cycle end date).\n    */\n    minimalMonthlyAmount?: Amount;\n    \n    /**\n    * Installment repayment due date.\n    */\n    installmentDueDate?: Date;\n    \n    /**\n    * Information about the main account.\n    */\n    mainAccount?: MainAccount;\n    \n    /**\n    * Information about the main account's limits.\n    */\n    \"cz-overallCardAccountLimits\"?: CardAccountLimits;\n    \n    /**\n    * Indicates how a client receives their card and pin. Possible values: BRANCH, HOME, OTHER_BRANCH, ADDRESS_ABROAD.\n    */\n    cardDeliveryMode?: string;\n    \n    /**\n    * Array of optional features valid for given card.\n    */\n    features?: [string];\n    \n    /**\n    * Array of optional Flag values depends on Card type.\n    */\n    flags?: [string];\n    \n    /**\n     * Convenience method for getting detail of the card right from the list \n     */\n    get: () => Promise<Card>;\n    \n    /**\n    * Convenience method for updating card's settings\n    */\n    update: (payload: ChangeCardSettingsRequest) => Promise<ChangeCardSettingsResponse>;\n    \n    /**\n    * Convenience getter for getting card's delivery resource\n    */\n    delivery: CardDeliveryResource;\n    \n    /**\n    * Convenience getter for getting card's transactions resource\n    */\n    transactions: CardTransactionsResource;\n    \n    /**\n    * Convenience getter for getting card's actions resource\n    */\n    actions: CardActionsResource;\n    \n    /**\n    * Convenience getter for getting card's limits resource\n    */\n    limits: CardLimitsResource;\n    \n    /**\n    * Convenience getter for getting card's 3D Secure resource\n    */\n    secure3d: CardSecure3DResource;\n    \n    /**\n    * Convenience getter for getting card's transfers resource\n    */\n    transfers: CardTransfersResource;\n    \n    /**\n    * Convenience getter for getting card's accounts resource\n    */\n    accounts: CardAccountsResource;\n}\n\nexport interface CardAccountLimits {\n    \n    /**\n    * Daily ATM limit on credit line. Daily ATM limit for all credit cards issued to mainAccount.\n    */\n    limitATM?: Amount;\n    \n    /**\n    * Daily POS limit on credit line. Daily POS limit for all credit cards issued to mainAccount.\n    */\n    limitPOS?: Amount;\n}\n\nexport interface MainAccount {\n    \n    /**\n    * Internal ID as reference for account provided by BE\n    */\n    id?: string;\n    \n    /**\n    * Full name of the main account's holder.\n    */\n    holderName: string;\n    \n    /**\n    * Main account is credit card shadow account for credit card or linked main current account for bank/debit card.\n    */\n    accountno: AccountNumber;\n}\n\nexport interface ChangeCardSettingsResponse extends Card, Signed {\n    \n    /**\n    * Minimal installment repayment amount for credit card (at previous cycle end date).\n    */\n    minimalMonthlyAmount?: Amount;\n    \n    /**\n    * ID of the branch\n    */\n    branchId?: string;\n} \n\nexport interface ChangeCardSettingsRequest {\n    \n    /**\n    * ID of the card\n    */\n    id?: string;\n    \n    /**\n    * Alias of the card\n    */\n    alias?: string;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/cards.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Signed} from '../common';\n\n/**\n * Get current delivery settings\n */\nexport class CardDeliveryResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.GetEnabled<DeliveryListing>, CSCoreSDK.UpdateEnabled<ChangeDeliverySettingsRequest, ChangeDeliverySettingsResponse> {\n    \n    /**\n     * Returns current delivery settings  \n     */ \n    get = () : Promise<DeliveryListing> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null);\n    }\n    \n    /**\n     * Change current delivery settings  \n     */ \n    update = (payload: ChangeDeliverySettingsRequest): Promise<ChangeDeliverySettingsResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n    }\n} \n\nexport interface DeliveryListing {\n    \n    /**\n    * Type of the delivery which should be set for this card. Possible values are BRANCH, OTHER_BRANCH, HOME, ADDRESS_ABROAD.\n    */\n    cardDeliveryMode: string;\n    \n    /**\n    * Identification of the branch where card will be ready to takeover.\n    */\n    branchId: string;\n    \n    /**\n    * Address where card should be sent.\n    */\n    address: Address;\n}\n\nexport interface Address {\n    \n    /**\n    * Street of the address.\n    */\n    street: string;\n    \n    /**\n    * Number which is unique in street. Not all localities have streets.\n    */\n    streetNumber?: number;\n    \n    /**\n    * Number which is unique in locality/town/village.\n    */\n    buildingApartment?: string;\n    \n    /**\n    * Zip code of the address.\n    */\n    zipCode?: string;\n    \n    /**\n    * City\n    */\n    city: string;\n    \n    /**\n    * Address country.\n    */\n    country: string;\n    \n    /**\n    * Information about the confirmation\n    */\n    confirmations?: [Confirmation];\n}\n\nexport interface Confirmation {\n    \n    /**\n    * Email\n    */\n    email: string;\n    \n    /**\n    * Language\n    */\n    language: string;\n}\n\nexport interface ChangeDeliverySettingsResponse extends DeliveryListing, Signed {}\n\nexport interface ChangeDeliverySettingsRequest extends CSCoreSDK.PaginatedListResponse<Confirmation> {\n    \n    /**\n    * Indicates how a client receives their card and pin. Possible values: BRANCH, HOME, OTHER_BRANCH, ADDRESS_ABROAD.\n    */\n    cardDeliveryMode: string;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/delivery.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {TransactionList, AddNoteAndMarkTransactionsRequest, AddNoteAndMarkTransactionsResponse} from '../common';\n\n/**\n* Allows to add or change a client's personal note and mark/star the card transaction as favorite/important for one specific transaction\n*/\nexport class CardTransactionsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<CardTransactionResource> {\n    \n    /**\n     * Returns CardTransactionResource for a given id\n     */\n    withId = (id: string) : CardTransactionResource => {\n        return new CardTransactionResource(id, this.getPath(), this._client);\n    }\n    \n    /**\n     * Export transactions to PDF\n     */ \n    export = (params: CardTransactionsParameters) : Promise<> => {\n        // zkontrolovat, pravděpodobně nebude fungovat\n        return CSCoreSDK.ResourceUtils.CallCreateWithSuffix(this, 'export', params);\n    }\n}\n\n/**\n * Add or change a client's personal note and mark/star the card transaction as favorite/important\n */ \nexport class CardTransactionResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.UpdateEnabled<AddNoteAndMarkTransactionsRequest, AddNoteAndMarkTransactionsResponse> {\n    \n    /**\n    * Adds, changes of marks transaction\n    */ \n    update = (payload: AddNoteAndMarkTransactionsRequest): Promise<AddNoteAndMarkTransactionsResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n    }\n}\n\nexport interface CardTransactionsParameters {\n    \n    // prověřit\n    /**\n     * Date from which transactions should be exported. Example: 1999-09-27T00%3A00%3A00%2B02%3A00.\n     */ \n    dateFrom: string;\n    \n    // prověřit\n    /**\n     * Date to which transactions should be exported Example: 2000-09-27T00%3A00%3A00%2B02%3A00.\n     */\n    dateTo: string;\n    \n    /**\n     * Array of fields which should appear in export. Possible fields are: bookingDate, partner, amount, currency, variableSymbol, constantSymbol, specificSymbol, transactionType, note, paymentReference, senderReference, cardNumber, investmentInstrumentName, marked, valuationDate, referenceId, \n     * location Example: bookingDate,partner,amount,currency.\n     */\n    fields: string;\n    \n    /**\n     * Indication whether account name should be visible in export. Default is false. Example: true.\n     */\n    showAccountName?: boolean;\n    \n    /**\n     * Indication whether account number should be visible in export. Default is false. Example: true.\n     */\n    showAccountNumber?: boolean;\n    \n    /**\n     * Indication whether timespan of the export should be visible. Default is false. Example: true.\n     */\n    showTimestamp?: boolean;\n    \n    /**\n     * Indication whether balance of the account should be visible in export. Default is false. Example: true.\n     */\n    showBalance?: boolean;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/transactions.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Signed} from '../common';\nimport {Confirmation} from './delivery';\n\n/**\n * Issue various actions on a single card. \n */\nexport class CardActionsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.UpdateEnabled<CardsActionsRequest, CardsActionsResponse> {\n    \n    /**\n     * Issues various actions on a single card  \n     */ \n    update = (payload: CardsActionsRequest): Promise<CardsActionsResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n    } \n}\n\nexport interface CardsActionsResponse extends Signed {}\n\nexport interface CardsActionsRequest {\n    \n   /**\n    * Action which should be issued. Possible values are \"REISSUE_PIN\", \"LOCK_CARD\", \"UNLOCK_CARD\", \"REPLACE_CARD\", \"ACTIVATE_CARD\", \"SET_AUTOMATIC_REPLACEMENT_ON\", \"SET_AUTOMATIC_REPLACEMENT_OFF\".\n    */\n    action: string;\n    \n    /**\n    * Reason why card should be locked. Possible values are \"THEFT\" and \"LOSS\". Relevant only for action \"LOCK_CARD\".\n    */\n    lockReason?: string;\n    \n    /**\n    * Information about the confirmation\n    */\n    confirmations?: [Confirmation];\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/actions.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount, Signed} from '../common';\nimport {Confirmation} from './delivery';\n\n/**\n* Get information about different limits\n*/\nexport class CardLimitsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<CardsLimit>, CSCoreSDK.UpdateEnabled<ChangeCardLimitsRequest, ChangeCardLimitsResponse> {\n    \n    /**\n     * List all limits  \n     */ \n    list = () : Promise<CardsLimitList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'limits');\n    }\n    \n    /**\n     * Update individual limits  \n     */ \n    update = (payload: ChangeCardLimitsRequest): Promise<ChangeCardLimitsResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n    }\n}\n\nexport interface CardsLimitList extends CSCoreSDK.PaginatedListResponse<CardsLimit> {}\n\nexport interface CardsLimit {\n    \n    /**\n    * Limit type defines ATM, POS, internet/eCommerce, total limits. Possible Values: ATM, POS, INTERNET\n    */\n    limitType: string;\n    \n    /**\n    * Bank limit's period in days defined for limit type (default daily - 1D). Possible Values: 1D, 2D, 3D, 5D, 7D, 10D, 15D, 30D\n    */\n    limitPeriod: string;\n    \n    /**\n    * Current limit amount valid for limit's type and period\n    */\n    limit?: Amount;\n    \n    /**\n    * Temporary limit amount valid for limit's type and period\n    */\n    temporaryLimit?: Amount;\n    \n    /**\n    * Temporary limit expiration date for limit's type and period. Field is mandatory if temporatyLimits are changed by PUT call. It is possible to set temporaryLimitExpiration up to 120 hours to the future.\n    */\n    temporaryLimitExpiration?: Date;\n    \n    /**\n    * Maximum limit amount for card defined by bank valid for limit's type and period.\n    */\n    bankLimit?: Amount;\n}\n\nexport interface ChangeCardLimitsResponse extends Signed {\n    \n    limits?: [CardsLimit];\n    /**\n    * Information about the confirmation\n    */\n    confirmations?: [Confirmation];\n}\n\nexport interface ChangeCardLimitsRequest {\n    \n    limits?: [CardsLimit]\n    /**\n    * Information about the confirmation\n    */\n    confirmations?: [Confirmation];\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/limits.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\n\n/**\n * Get the 3D secure online shopping status\n */\nexport class CardSecure3DResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.GetEnabled<SecureSettings> {\n    \n    /**\n     * Returns 3D secure online shopping status\n     */ \n    get = () : Promise<SecureSettings> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null);\n    }\n}\n\nexport interface SecureSettings {\n    \n    /**\n    * 3D secure functionality status. Possible Values: OK, NOT_ACTIVATED\n    */\n    status?: string;\n    \n    /**\n    * Personal Assurance Message (PAM) that user chose when activate 3D secure\n    */\n    pam?: string;\n    \n    /**\n    * Phone (used for OTP authentification) number Id coming from Contacts\n    */\n    phoneNumber?: string;\n    \n    /**\n    * 3D Secure language\n    */\n    language?: string;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/secure3D.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {AccountNumber, Amount, Signed} from '../common';\n\n/**\n * Resource for paying up credit card debt  \n */ \nexport class CardTransfersResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.UpdateEnabled<PayUpCreditCardRequest, PayUpCreditCardResponse> {\n    \n    /**\n     * Pays up the credit card debt and returns sign info  \n     */ \n    update = (payload: PayUpCreditCardRequest): Promise<PayUpCreditCardResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n    }\n}\n\nexport interface PayUpCreditCardRequest {\n    \n    /**\n    * Type of the transfer. Currently only DEBT_REPAYMENT is supported.\n    */\n    type: string;\n    \n    /**\n    * Information about the sender\n    */\n    sender: Sender;\n    \n    /**\n    * Amount which should be transfered.\n    */\n    amount: Amount;   \n}\n\nexport interface Sender {\n    \n    /**\n    * Identification of the source account for the transfer.\n    */\n    id?: string;\n    \n    /**\n    * Account number of the source account for the transfer.\n    */\n    accountno: AccountNumber;\n}\n\nexport interface PayUpCreditCardResponse extends Signed {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/transfers.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {StatementList, Statement, Parameters} from '../common';\n\n/**\n * Account resource for listing statements\n */\nexport class CardAccountsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<CardAccountResource> {\n    \n    /**\n     * Returns CardAccountResource for an account with a given id\n     */ \n    withId = (id: string): CardAccountResource => {\n        return new CardAccountResource(id, this.getPath(), this._client);\n    }\n} \n\n/**\n * Indidiual account resource with a given id\n */\nexport class CardAccountResource extends CSCoreSDK.InstanceResource {\n    \n    /**\n     * Get statements of the account\n     */ \n    get statements() {\n        return new CardStatementsResource(this.getPath() + '/statements', this._client); \n    }\n}\n\n/**\n * Get statements for an account\n */ \nexport class CardStatementsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Statement> {\n    \n    /**\n     * List all statements\n     */ \n    list = (params?: Parameters) : Promise<StatementList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'statements', params, response => {\n            \n            CSCoreSDK.EntityUtils.addDatesToItems('statementDate', response)\n            \n            return response;\n        });\n    }\n    \n    /**\n     * Download PDF with statements\n     */ \n    download = (params: DownloadStatementsParameters) => {\n        // zkontrolovat, zřejmě nebude fungovat\n        return CSCoreSDK.ResourceUtils.CallCreateWithSuffix(this, 'signed/download', params);\n    }\n}\n\nexport interface DownloadStatementsParameters {\n    \n    /**\n     * Format of statements file. Example: PDF_A4.\n     */ \n    format: string;\n    \n    /**\n     * Statement identifier. Example: 201302520130621161819.\n     */ \n    statementId: string;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/statements.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount, Signed, AccountNumber, Parameters} from '../common';\nimport {PaymentsBookingDateResource} from './bookingDate';\nimport {PaymentsDomesticResource} from './domestic';\nimport {PaymentsLimitsResource} from './limits';\nimport {PaymentsMobileResource} from './mobile';\n\n/**\n* Get information about payments orders\n*/\nexport class OrdersResource extends CSCoreSDK.Resource {\n    \n    /**\n    * Returns PaymentsResource for listing, deleting and accessing other information about payments\n    */  \n    get payments() {\n        return new PaymentsResource(this.getPath() + '/payments', this._client);\n    }\n}\n\n/**\n* List payments, get individual payment and other resources\n*/\nexport class PaymentsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<PaymentResource>, CSCoreSDK.PaginatedListEnabled<Payment> {\n    \n    /**\n    * List all payments\n    */  \n    list = (params?: Parameters): Promise<PaymentList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'order', params, response => {\n            \n            response.items.forEach(item => {\n                CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], item);\n                resourcifyListing(<Payment>item, this.withId((<Payment>item).id));\n            })\n            return response;\n        })\n    }\n    \n    /**\n    * Get individual payment with a given id\n    */\n    withId = (id: string|number): PaymentResource => {\n        return new PaymentResource(id, this.getPath(), this._client); \n    }\n    \n    /**\n    * Get currently available booking date\n    */\n    get bookingDate() {\n        return new PaymentsBookingDateResource(this.getPath() + '/bookingdate', this._client);\n    }\n    \n    /**\n    * Create domestic payment order\n    */\n    get domestic() {\n        return new PaymentsDomesticResource(this.getPath() + '/domestic', this._client);\n    }\n    \n    /**\n    * Get remaining amounts for payment orders\n    */\n    get limits() {\n        return new PaymentsLimitsResource(this.getPath() + '/limits', this._client);\n    }\n    \n    /**\n    * Recharging the credit available on prepaid cards provided by Vodafone, T-Mobile or O2.\n    */\n    get mobile() {\n        return new PaymentsMobileResource(this.getPath() + '/mobile', this._client);\n    }\n}\n\n/**\n* Individual Payment order resource\n*/\nexport class PaymentResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<Payment>, CSCoreSDK.DeleteEnabled<void> {\n    \n    /**\n    * Get detail of the payment\n    */  \n    get = (): Promise<Payment> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(payment => {\n            \n            CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], payment);\n            return payment;\n        });\n    }\n    \n    /**\n    * Remove payment\n    */\n    delete = (): void => {\n        return CSCoreSDK.ResourceUtils.CallDelete(this, null);\n    }\n    \n} \n\nfunction resourcifyListing(paymentListing: Payment, paymentResource: PaymentResource) {\n    paymentListing.get = paymentResource.get;\n    paymentListing.delete = PaymentResource.delete;\n}\n\nexport interface PaymentList extends CSCoreSDK.PaginatedListResponse<Payment> {}\n\nexport interface Payment extends Signed {\n    \n    /**\n    * Internal identifier of payment order. Note that after signing of the order the id could change.\n    */\n    id: string;\n    \n    /**\n    * Transaction reference ID provided by BE when payment order was executed.\n    */\n    referenceId?: string;\n    \n    /**\n    * Payment order category determines whether payment is domestic, SEPA, international or inside the bank (domestic, but could be different processing) or between accounts of the same user (domestic, but with better fee policy). Possible values: DOMESTIC, OWN_TRANSFER, SEPA, INTERNATIONAL.\n    */\n    orderCategory: string;\n    \n    /**\n    * Payment order type (outgoing payment, outgoing direct debit, incoming direct debit) determines further transaction processing in BE. Values: PAYMENT_OUT, DIRECT_DEBIT_IN\n    */\n    orderType: string;\n    \n    /**\n    * sender name\n    */\n    senderName?: string;\n    \n    /**\n    * sender account number\n    */\n    sender: AccountNumber;\n    \n    /**\n    * receiver name\n    */\n    receiverName?: string;\n    \n    /**\n    * Receiver IBAN in case of international payments.\n    */\n    receiver: AccountNumber;\n    \n    /**\n    * payment amount\n    */\n    amount: Amount;\n    \n    /**\n    * Information about the symbols\n    */\n    symbols?: Symbols;\n    \n    /**\n    * Message for payee set during payment order creation. It is used to identify transaction on receiver side. Array of texts 4x35.\n    */\n    additionalInfo?: Info;\n    \n    /**\n    * Message for me set during payment order creation.\n    */\n    senderReference?: string;\n    \n    /**\n    * Datetime when payment order was created/updated (the last time) by user (read-only field is automatically setup/changed by BE system based on POST/PUT request).\n    */\n    executionDate?: Date;\n    \n    /**\n    * Modification date indicates the last update of payment order done by user or BE system (read-only field provided by BE).\n    */\n    modificationDate?: Date;\n    \n    /**\n    * payment transfer date\n    */\n    transferDate?: Date;\n    \n    /**\n    * Datetime till when payment order will be repeated on BE in the case of insufficient funds on account.\n    */\n    expirationDate?: Date;\n    \n    /**\n    * Date and time which should be used for default ordering of the payment orders for display.\n    */    \n    \"cz-orderingDate\": Date;\n    \n    /**\n    * Status of the payment order (details above), State of payment order presented to user on FE). Possible values: OPEN, SPOOLED, CANCELLED, CLOSED and DELETED\n    */\n    state: string;\n    \n    /**\n    * State detail of payment order provided based on BE technical states.\n    */\n    stateDetail: string;\n    \n    /**\n    * Indicator whether state (stateDetail value) of payment order is OK from user point of view. For mapping between stateDetail and stateOk indicator values see table below.\n    */\n    stateOk: string;\n    \n    /**\n    * description of payment order, transaction type\n    */\n    \"cz-description\"?: string;\n    \n    /**\n    * ID of the application via which this payment order was entered/modified the last time. Possible values: GEORGE, ATM_PAYMENT, ATM_OTHER, GSM, BRANCH_FE, POST_OFFICE, INTERNET_BANKING, TELEPHONE_BANKER, COLLECTION_BOX, VIDEO_BANKER and UNKNOWN.\n    */\n    applicationId?: string;\n    \n    /**\n    * ID of the channel via which this payment order was entered/modified the last time. Possible values: NET_BANKING, ATM, MOBILE_BANKING, ATM, BRANCH, POST_OFFICE, CALL_CENTRE, VIDEO_BANKING and UNKNOWN\n    */\n    channelId?: string;\n    \n    /**\n    * Receiver's address\n    */\n    receiverAddress?: string;\n    \n    /**\n    * Array of optional Flag values depends on Payment order category, type.\n    */\n    flags?: [string];\n    \n    /**\n    * Convenience method for retrieving payment's detail\n    */\n    get: () => Promise<Payment>;\n    \n    /**\n    * Convenience method for removing payment\n    */\n    delete: () => void;\n}\n\nexport interface Symbols {\n    \n    /**\n    * variable symbol\n    */\n    variableSymbol?: string;\n    \n    /**\n    * constant symbol\n    */\n    constantSymbol?: string;\n    \n    /**\n    * specific symbol\n    */\n    specificSymbol?: string;\n}\n\nexport interface Info {\n    \n    /**\n    * Message for payee set during payment order creation. It is used to identify transaction on receiver side. Array of texts 4x35.\n    */\n    text4x35?: [string];\n}\n\nexport interface RemovePaymentOrderResponse extends Signed {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/orders/orders.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {AccountNumber} from '../common';\n\n/**\n* Get currently available booking date\n*/\nexport class PaymentsBookingDateResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.UpdateEnabled<PaymentBookingDateRequest, PaymentBookingDateResponse> {\n    \n    /**\n    * Returns current available booking date based on the provided account and optional payment order category parameters\n    */  \n    update = (payload: PaymentBookingDateRequest): Promise<PaymentBookingDateResponse> => {\n        var accountId = payload.accountId;\n        delete payload.accountId;\n        \n        this._path = this.getPath() + `?accountId=${accountId}`;\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(bookingDate => {\n            \n            CSCoreSDK.EntityUtils.addDatesFromISO('bookingDate', bookingDate);\n            return bookingDate;\n        })\n    }\n}\n\nexport interface PaymentBookingDateRequest {\n    \n    accountId: string;\n    /**\n    * Receiver's account number\n    */\n    receiver?: AccountNumber;\n    \n    /**\n    * Payment order priority selected by user, ENUM values: URGENT (for express payments), STANDARD.\n    */\n    priority?: string;\n}\n\nexport interface PaymentBookingDateResponse {\n    \n    /**\n    * booking date value for provided account ID and payment order.\n    */\n    bookingDate: Date;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/orders/bookingDate.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount, Signed, AccountNumber} from '../common';\nimport {Info, Symbols, Payment} from './orders';\n\n/**\n* Create domestic payment order\n*/\nexport class PaymentsDomesticResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.CreateEnabled<DomesticPaymentUpdateRequest, DomesticPaymentUpdateResponse> {\n    \n    /**\n    * Creates domestic payment order and returns it in promise\n    */\n    create = (payload: DomesticPaymentUpdateRequest): Promise<DomesticPaymentUpdateResponse> => {\n        return CSCoreSDK.ResourceUtils.CallCreate(this, payload).then(response => {\n            \n            CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], response);\n            return response;\n        });\n    }\n    \n    /**\n    * Returns PaymentDomesticResource resource for updating domestic payment\n    */\n    withId = (id: string): PaymentDomesticResource => {\n        return new PaymentDomesticResource(id, this.getPath(), this.getClient());\n    }\n    \n}\n\n/**\n* Update domestic payment\n*/\nexport class PaymentDomesticResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.UpdateEnabled<DomesticPaymentUpdateRequest, DomesticPaymentUpdateResponse> {\n    \n    /**\n    * Updates domestic payment and returns it in promise\n    */\n    update = (payload: DomesticPaymentUpdateRequest): Promise<DomesticPaymentUpdateResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            \n            CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], response);\n            return response;\n        });\n    }\n}\n\nexport interface DomesticPaymentUpdateRequest extends Signed {\n    \n    /**\n    * Internal identifier of payment order. Note that after signing of the order the id could change.\n    */\n    id?: string;\n    \n    /**\n    * Name of the sender\n    */\n    senderName: string;\n    \n    /**\n    * Account number of the sender.\n    */\n    sender: DomesticPaymentAccount;\n    \n    /**\n    * Name of the payee\n    */\n    receiverName: string;\n    \n    /**\n    * Account number of payee\n    */\n    receiver: DomesticPaymentAccount;\n    \n    /**\n    * Payment order amount.\n    */\n    amount: Amount;\n    \n    /**\n    * Optional date (in the future) when this payment has to be done\n    */\n    transferDate?: Date;\n    \n    /**\n    * Message for payee set during payment order creation. It is used to identify transaction on receiver side. Array of texts 4x35\n    */\n    additionalInfo?: Info;\n    \n    /**\n    * Message for me set during payment order creation.\n    */\n    senderReference?: string;\n    \n    /**\n    * Information about the symbols\n    */\n    symbols?: Symbols;\n    \n    /**\n    * Array of optional Flag values depends on Payment order category, type.\n    */\n    flags?: [string];\n}\n\nexport interface DomesticPaymentUpdateResponse extends Payment {}\n\nexport interface DomesticPaymentAccount {\n    \n    /**\n    * Account number with possible prefix. Format is \"XXXXXX-NNNNNNNNNN\" if prefix is not null or \"000000\". If prefix is not provided then format is \"NNNNNNNNNN\" without leading zeros.\n    */\n    number?: string;\n    \n    /**\n    * Bank Code\n    */\n    bankCode?: string;\n    \n    /**\n    * Code of the Country - 2 characters; mandatoryfor international orders.\n    */\n    countryCode?: string;\n    \n    /**\n    * IBAN\n    */\n    \"cz-iban\"?: string;\n    \n    /**\n    * BIC\n    */\n    \"cz-bic\"?: string;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/orders/domestic.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../common';\n\n/**\n* Get remaining amounts for payment orders\n*/\nexport class PaymentsLimitsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<PaymentsLimit> {\n    \n    /**\n    * List all limits for payment orders\n    */  \n    list = (): Promise<PaymentsLimitList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'remainingLimits', null);\n    }\n}\n\nexport interface PaymentsLimitList extends CSCoreSDK.PaginatedListResponse<PaymentsLimit> {}\n\nexport interface PaymentsLimit {\n    \n    /**\n    * Authorization method type for which is limit defined. ENUM: tac, tan, sms, gridCard, eok, displayCard, mToken. Other local authorization type has to be defined.\n    */\n    authorizationType: string;\n    \n    /**\n    * ID of the channel for which is limit defined. ENUM: netBanking, mobileBanking, homeBanking, thirdParty, and unknown - remaining limit amount valid for all channels, not particulary defined.\n    */\n    channelId: string;\n    \n    /**\n    * ID of the application for which is limit defined. ENUM: George, InternetBanking and unknown - remaining limit amount valid for all applications, not particulary defined.\n    */\n    applicationId: string;\n    \n    /**\n    * Remaining Daily amount which can be transferred using particular authorization method and channel (_embedded AMOUNT type).\n    */\n    remainingAmount: Amount;   \n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/orders/limits.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount, Signed} from '../common';\n\n/**\n* Recharging the credit available on prepaid cards provided by Vodafone, T-Mobile or O2.\n*/\nexport class PaymentsMobileResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.CreateEnabled<MobilePaymentsRequest, MobilePaymentsResponse> {\n    \n    create = (payload: MobilePaymentsRequest): Promise<MobilePaymentsResponse> => {\n        return CSCoreSDK.ResourceUtils.CallCreate(this, payload);\n    }\n}\n\nexport interface MobilePaymentsRequest {\n    \n    /**\n    * Type of mobile payment depending on provider of mobile services. Possible values: TOP_UP (for all operators) and INVOICE, VODAFONE_PAYMENT, MOBILE_DEPOSIT (for Vodafone).\n    */\n    paymentType: string;\n    \n    /**\n    * Phone number.\n    */\n    phoneNumber: string;\n    \n    /**\n    * Sender name\n    */\n    sender: MobilePaymentSender;\n    \n    /**\n    * Payment amount.\n    */\n    amount: Amount;\n    \n    /**\n    * Invoice number used as identifier of mobile payment on mobile service provider side (only for paymentType: INVOICE).\n    */\n    invoiceNumber?: string;\n    \n    /**\n    * Phone number used for sending of confirmation of mobile payment execution. Not available for paymentType: INVOICE.\n    */\n    confirmationPhoneNumber: string;   \n}\n\nexport interface MobilePaymentsResponse extends MobilePaymentsRequest, Signed {}\n\nexport interface MobilePaymentSender {\n    \n    /**\n    * Account number with possible prefix. Format is \"XXXXXX-NNNNNNNNNN\" if prefix is not null or \"000000\". If prefix is not provided then format is \"NNNNNNNNNN\" without leading zeros.\n    */\n    number: string;\n    \n    /**\n    * Bank Code\n    */\n    bankCode: string;\n    \n    /**\n    * Code of the Country - 2 characters; mandatoryfor international orders.\n    */\n    countryCode?: string;\n    \n    /**\n    * IBAN\n    */\n    iban: string;\n    \n    /**\n    * BIC\n    */\n    bic: string;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/orders/mobile.ts\n **/"],"sourceRoot":""}