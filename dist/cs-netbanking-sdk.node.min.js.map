{"version":3,"sources":["webpack:///cs-netbanking-sdk.node.min.js","webpack:///webpack/bootstrap 843825123e754a5ecb61","webpack:///./lib/netbanking.ts","webpack:///external \"cs-core-sdk\"","webpack:///./lib/accounts/accounts.ts","webpack:///./lib/accounts/balance.ts","webpack:///./lib/accounts/services.ts","webpack:///./lib/accounts/reservations.ts","webpack:///./lib/accounts/repayments.ts","webpack:///./lib/accounts/statements.ts","webpack:///./lib/accounts/subAccounts.ts","webpack:///./lib/accounts/transactions.ts","webpack:///./lib/accounts/transfer.ts","webpack:///./lib/accounts/standing-orders.ts","webpack:///./lib/accounts/direct-debits.ts","webpack:///./lib/profile/profile.ts","webpack:///./lib/profile/lastLogins.ts","webpack:///./lib/cards/cards.ts","webpack:///./lib/cards/delivery.ts","webpack:///./lib/cards/transactions.ts","webpack:///./lib/cards/actions.ts","webpack:///./lib/cards/limits.ts","webpack:///./lib/cards/secure3D.ts","webpack:///./lib/cards/transfer.ts","webpack:///./lib/cards/statements.ts","webpack:///./lib/orders/orders.ts","webpack:///./lib/orders/bookingDate.ts","webpack:///./lib/orders/domestic.ts","webpack:///./lib/orders/limits.ts","webpack:///./lib/orders/mobile.ts","webpack:///./lib/securities/securities.ts","webpack:///./lib/securities/transactions.ts","webpack:///./lib/settings/settings.ts","webpack:///./lib/contacts/contacts.ts","webpack:///./lib/plugins/plugins.ts","webpack:///./lib/contracts/contracts.ts","webpack:///./lib/contracts/buildings/buildings.ts","webpack:///./lib/contracts/buildings/services.ts","webpack:///./lib/contracts/transactions.ts","webpack:///./lib/contracts/pensions/pensions.ts","webpack:///./lib/contracts/insurances/insurances.ts","webpack:///./lib/contracts/insurances/funds.ts","webpack:///./lib/contracts/insurances/beneficiaries.ts","webpack:///./lib/contracts/insurances/insurees.ts","webpack:///./lib/contracts/insurances/payments.ts","webpack:///./lib/contracts/insurances/services.ts","webpack:///./lib/contracts/insurances/events.ts","webpack:///./lib/contracts/insurances/tax-benefits.ts","webpack:///./lib/contracts/insurances/strategies.ts","webpack:///./lib/contracts/insurances/transfer.ts","webpack:///./lib/contracts/loyalty/loyalty.ts","webpack:///./lib/services/services.ts","webpack:///./lib/messages/messages.ts","webpack:///./lib/messages/mandatory.ts","webpack:///./lib/messages/attachments.ts","webpack:///./lib/templates/templates.ts","webpack:///./lib/phone-numbers/phone-numbers.ts","webpack:///./lib/budgets/budgets.ts","webpack:///./lib/goals/goals.ts","webpack:///./lib/promotions/promotions.ts","webpack:///./lib/authorization-limits/authorization-limits.ts","webpack:///./lib/authorization-token/authorization-token.ts","webpack:///./lib/bundles/bundles.ts"],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","getClient","sharedClient","NetbankingClient","CSCoreSDK","config","copy","sharedContext","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","accounts_1","profile_1","cards_1","orders_1","securities_1","settings_1","contacts_1","plugins_1","contracts_1","services_1","messages_1","templates_1","phone_numbers_1","budgets_1","goals_1","promotions_1","authorization_limits_1","authorization_token_1","bundles_1","_super","context","_this","get","AccountsResource","getPath","enumerable","configurable","ProfileResource","CardsResource","OrdersResource","SecuritiesResource","SettingsResource","ContactsResource","PluginsResource","ContractsResource","ServicesResource","MessagesResource","TemplatesResource","PhoneNumbersResource","BudgetsResource","GoalsResource","PromotionsResource","AuthorizationLimitsResource","AuthorizationTokenResource","BundlesResource","WebApiClient","require","resourcifyListing","accountListing","account","isFromList","update","services","transactions","reservations","transfer","statements","repayments","standingOrders","directDebits","transformResponse","saving","EntityUtils","addDatesFromISO","loan","subaccounts","addDatesToItems","balance_1","reservations_1","repayments_1","statements_1","subAccounts_1","transactions_1","transfer_1","standing_orders_1","direct_debits_1","apply","arguments","list","params","transformArrayParamsToString","ResourceUtils","CallPaginatedListWithSuffix","response","items","forEach","item","withId","AccountResource","_client","Resource","CallGet","then","payload","CallUpdate","AccountBalanceResource","AccountServicesResource","AccountReservationsResource","AccountRepaymentsResource","AccountStatementsResource","SubAccountsResource","AccountTransactionsResource","AccountTransferResource","AccountStandingOrdersResource","AccountDirectDebitsResource","InstanceResource","basePath","client","_path","replace","CallListWithSuffix","download","CallDownload","SubAccountResource","SubAccountStatementsResource","AccountTransactionResource","export","transformDatesToISO","path","callApi","transformDatesToSimpleISO","SigningUtils","createSigningObject","addDatesToStandingOrder","break","scheduledExecutionDates","isArray","datesArr","map","x","Date","parseISODate","resourcifyStandingOrder","orderListing","orderReference","delete","number","AccountStandingOrderResource","CallCreate","CallDelete","AccountDirectDebitResource","lastLogins_1","profile","lastlogin","LastLoginsResource","itemListing","itemResource","delivery","actions","limits","secure3d","accounts","delivery_1","actions_1","limits_1","secure3D_1","CardResource","card","CardDeliveryResource","CardTransactionsResource","CardActionsResource","CardLimitsResource","CardSecure3DResource","CardTransferResource","CardAccountsResource","CardTransactionResource","CardAccountResource","CardStatementsResource","paymentListing","paymentResource","bookingDate_1","domestic_1","mobile_1","PaymentsResource","PaymentResource","PaymentBookingDateResource","PaymentsDomesticResource","PaymentLimitsResource","PaymentMobileResource","payment","JSON","parse","stringify","accountId","CallApiWithSuffix","bookingDate","PaymentDomesticResource","_id","transformDatesInSubSecAccounts","subSecAccounts","acc","resourcifySecurity","security","securityReference","sec","SecurityResource","SecurityTransactionsResource","SecurityTransactionResource","ContactResource","PluginResource","buildings_1","pensions_1","insurances_1","loyalty_1","BuildingsContractsResource","PensionsContractsResource","InsurancesContractsResource","LoyaltyContractsResource","resourcifyBuildingsContracts","contract","contractReference","transformDates","BuildingsContractResource","BuildingsContractsServicesResource","ContractsTransactionsResource","ContractsTransactionResource","productAccount","beneficiaries","resourcifyPension","pension","pensionReference","PensionsContractResource","life","resourcifyInsurance","insurance","insuranceReference","funds","insurees","payments","events","taxBenefits","strategies","funds_1","beneficiaries_1","insurees_1","payments_1","events_1","tax_benefits_1","strategies_1","InsurancesContractResource","InsurancesContractFundsResource","InsurancesContractBeneficiariesResource","InsurancesContractInsureesResource","InsurancesContractPaymentsResource","InsurancesContractServicesResource","InsurancesContractEventsResource","InsurancesContractTaxBenefitsResource","InsurancesContractStrategiesResource","InsurancesContractTransferResource","activateRiskSports","CallUpdateWithSuffix","deactivateRiskSports","indemnities","indemnity","resourcifyMessages","message","messageReference","mandatory_1","attachments_1","MessageResource","MessagesMandatoryResource","MessageAttachmentsResource","MessageAttachmentResource","resourcifyTemplates","template","templateReference","TemplateResource","resourcifyPhoneNumbers","phoneNumber","phoneNumberReference","PhoneNumberResource","deadline","goals","goal","toString","getTime","resourcifyLimits","limit","limitReference","AuthorizationLimitResource"],"mappings":"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","file":"cs-netbanking-sdk.node.min.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/// <reference types=\"es6-promise\" />\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar accounts_1 = __webpack_require__(2);\n\tvar profile_1 = __webpack_require__(13);\n\tvar cards_1 = __webpack_require__(15);\n\tvar orders_1 = __webpack_require__(23);\n\tvar securities_1 = __webpack_require__(28);\n\tvar settings_1 = __webpack_require__(30);\n\tvar contacts_1 = __webpack_require__(31);\n\tvar plugins_1 = __webpack_require__(32);\n\tvar contracts_1 = __webpack_require__(33);\n\tvar services_1 = __webpack_require__(49);\n\tvar messages_1 = __webpack_require__(50);\n\tvar templates_1 = __webpack_require__(53);\n\tvar phone_numbers_1 = __webpack_require__(54);\n\tvar budgets_1 = __webpack_require__(55);\n\tvar goals_1 = __webpack_require__(56);\n\tvar promotions_1 = __webpack_require__(57);\n\tvar authorization_limits_1 = __webpack_require__(58);\n\tvar authorization_token_1 = __webpack_require__(59);\n\tvar bundles_1 = __webpack_require__(60);\n\tvar sharedClient = null;\n\t/**\n\t * Returns the singleton NetbankingClient\n\t * @returns {NetbankingClient}\n\t */\n\tfunction getClient() {\n\t    if (sharedClient === null) {\n\t        return new NetbankingClient(CSCoreSDK.config.copy(), CSCoreSDK.sharedContext);\n\t    }\n\t    return sharedClient;\n\t}\n\texports.getClient = getClient;\n\t/**\n\t * Netbanking client\n\t * @extends {CSCoreSDK.WebApiClient}\n\t */\n\tvar NetbankingClient = (function (_super) {\n\t    __extends(NetbankingClient, _super);\n\t    /**\n\t     * Creates new instance of NetbankingClient\n\t     *\n\t     * @param {WebApiConfiguration} config object that configures this client\n\t     * @param {WebApiContext} context object that allows for data sharing between clients\n\t     */\n\t    function NetbankingClient(config, context) {\n\t        var _this = _super.call(this, config, '/api/v3/netbanking/my') || this;\n\t        _this.sharedContext = context;\n\t        return _this;\n\t    }\n\t    Object.defineProperty(NetbankingClient.prototype, \"accounts\", {\n\t        /**\n\t         * List all accounts and get other information like balance, services, statements etc.\n\t         * @returns {AccountsResource}\n\t         */\n\t        get: function () {\n\t            return new accounts_1.AccountsResource(this.getPath() + '/accounts', this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"profile\", {\n\t        /**\n\t         * Get information about the current user's profile and past logins.\n\t         * @returns {ProfileResource}\n\t         */\n\t        get: function () {\n\t            return new profile_1.ProfileResource(this.getPath() + '/profile', this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"cards\", {\n\t        /**\n\t         * List all cards and other information like delivery, transactions, limits etc.\n\t         * @returns {CardsResource}\n\t         */\n\t        get: function () {\n\t            return new cards_1.CardsResource(this.getPath() + '/cards', this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"orders\", {\n\t        /**\n\t         * List, update and get payments, booking date or create and update domestic payments.\n\t         * @returns {OrdersResource}\n\t         */\n\t        get: function () {\n\t            return new orders_1.OrdersResource(this.getPath() + '/orders', this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"securities\", {\n\t        /**\n\t         * @returns {SecuritiesResource}\n\t         */\n\t        get: function () {\n\t            return new securities_1.SecuritiesResource(this.getPath() + '/securities', this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"settings\", {\n\t        /**\n\t         * @returns {SettingsResource}\n\t         */\n\t        get: function () {\n\t            return new settings_1.SettingsResource(this.getPath() + \"/settings\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"contacts\", {\n\t        /**\n\t         * @returns {ContactsResource}\n\t         */\n\t        get: function () {\n\t            return new contacts_1.ContactsResource(this.getPath() + \"/contacts\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"plugins\", {\n\t        /**\n\t         * @returns {PluginsResource}\n\t         */\n\t        get: function () {\n\t            return new plugins_1.PluginsResource(this.getPath() + \"/plugins\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"contracts\", {\n\t        /**\n\t         * @returns {ContractsResource}\n\t         */\n\t        get: function () {\n\t            return new contracts_1.ContractsResource(this.getPath() + \"/contracts\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"services\", {\n\t        /**\n\t         * @returns {ServicesResource}\n\t         */\n\t        get: function () {\n\t            return new services_1.ServicesResource(this.getPath() + \"/services\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"messages\", {\n\t        /**\n\t         * @returns {MessagesResource}\n\t         */\n\t        get: function () {\n\t            return new messages_1.MessagesResource(this.getPath() + \"/messages\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"templates\", {\n\t        /**\n\t         * @returns {TemplatesResource}\n\t         */\n\t        get: function () {\n\t            return new templates_1.TemplatesResource(this.getPath() + \"/templates\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"phoneNumbers\", {\n\t        /**\n\t         * @returns {PhoneNumbersResource}\n\t         */\n\t        get: function () {\n\t            return new phone_numbers_1.PhoneNumbersResource(this.getPath() + \"/phone-numbers\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"budgets\", {\n\t        /**\n\t         * @returns {BudgetsResource}\n\t         */\n\t        get: function () {\n\t            return new budgets_1.BudgetsResource(this.getPath() + \"/budgets\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"goals\", {\n\t        /**\n\t         * @returns {GoalsResource}\n\t         */\n\t        get: function () {\n\t            return new goals_1.GoalsResource(this.getPath() + \"/goals\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"promotions\", {\n\t        /**\n\t         * @returns {PromotionsResource}\n\t         */\n\t        get: function () {\n\t            return new promotions_1.PromotionsResource(this.getPath() + \"/promotions\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"authorizationLimits\", {\n\t        /**\n\t         * @returns {AuthorizationLimitsResource}\n\t         */\n\t        get: function () {\n\t            return new authorization_limits_1.AuthorizationLimitsResource(this.getPath() + \"/authorizationLimits\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"authorizationToken\", {\n\t        /**\n\t         * @returns {AuthorizationTokenResource}\n\t         */\n\t        get: function () {\n\t            return new authorization_token_1.AuthorizationTokenResource(this.getPath() + \"/auth/token/invalidate\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(NetbankingClient.prototype, \"bundles\", {\n\t        /**\n\t         * @returns {BundlesResource}\n\t         */\n\t        get: function () {\n\t            return new bundles_1.BundlesResource(this.getPath() + \"/bundles\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return NetbankingClient;\n\t}(CSCoreSDK.WebApiClient));\n\texports.NetbankingClient = NetbankingClient;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"cs-core-sdk\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar balance_1 = __webpack_require__(3);\n\tvar services_1 = __webpack_require__(4);\n\tvar reservations_1 = __webpack_require__(5);\n\tvar repayments_1 = __webpack_require__(6);\n\tvar statements_1 = __webpack_require__(7);\n\tvar subAccounts_1 = __webpack_require__(8);\n\tvar transactions_1 = __webpack_require__(9);\n\tvar transfer_1 = __webpack_require__(10);\n\tvar standing_orders_1 = __webpack_require__(11);\n\tvar direct_debits_1 = __webpack_require__(12);\n\t/**\n\t * @class AccountsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.HasInstanceResource<AccountResource>}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<MainAccount>}\n\t */\n\tvar AccountsResource = (function (_super) {\n\t    __extends(AccountsResource, _super);\n\t    function AccountsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * List all accounts\n\t         * @param {AccountParameters=} params\n\t         * @returns {Promise<AccountList>}\n\t         */\n\t        _this.list = function (params) {\n\t            // transform \"sort\" and \"order\" parameters to comma separated list from array\n\t            CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'accounts', params, function (response) {\n\t                response.items.forEach(function (item) {\n\t                    // add convenient methods\n\t                    resourcifyListing(item, _this.withId(item.id), true);\n\t                    // transform ISO dates to native Date objects\n\t                    transformResponse(item);\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Get the detail of the account with a given id\n\t         * @param {string|number} id\n\t         * @returns {AccountResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new AccountResource(id, _this.getPath(), _this._client);\n\t        };\n\t        return _this;\n\t    }\n\t    return AccountsResource;\n\t}(CSCoreSDK.Resource));\n\texports.AccountsResource = AccountsResource;\n\t/**\n\t * Get detail of the individual account and additional information about it\n\t * @class AccountResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<MainAccount>}\n\t * @implements {CSCoreSDK.UpdateEnabled<ChangeAccountSettingsRequest, ChangeAccountSettingsResponse>}\n\t */\n\tvar AccountResource = (function (_super) {\n\t    __extends(AccountResource, _super);\n\t    function AccountResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Get account detail\n\t         * @returns {Promise<MainAccount>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (response) {\n\t                // add convenienxce methods\n\t                resourcifyListing(response, _this, false);\n\t                // transform ISO dates to native Date objects\n\t                transformResponse(response);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Update account's settings.\n\t         * @param {ChangeAccountSettingsRequest} payload\n\t         * @returns {Promise<ChangeAccountSettingsResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                // add convenience methods\n\t                resourcifyListing(response, _this, false);\n\t                // transform ISO dates to native Date objects\n\t                transformResponse(response);\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    Object.defineProperty(AccountResource.prototype, \"balance\", {\n\t        /**\n\t         * Get information about the account's balance\n\t         * @returns {AccountBalanceResource}\n\t         */\n\t        get: function () {\n\t            return new balance_1.AccountBalanceResource(this.getPath() + '/balance', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(AccountResource.prototype, \"services\", {\n\t        /**\n\t         * Get information about the account's services\n\t         * @returns {AccountServicesResource}\n\t         */\n\t        get: function () {\n\t            return new services_1.AccountServicesResource(this.getPath() + '/services', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(AccountResource.prototype, \"reservations\", {\n\t        /**\n\t         * Get information about the account's reservations\n\t         * @returns {AccountReservationsResource}\n\t         */\n\t        get: function () {\n\t            return new reservations_1.AccountReservationsResource(this.getPath() + '/reservations', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(AccountResource.prototype, \"repayments\", {\n\t        /**\n\t         * Get information about the account's repayments\n\t         * @returns {AccountRepaymentsResource}\n\t         */\n\t        get: function () {\n\t            return new repayments_1.AccountRepaymentsResource(this.getPath() + '/repayments', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(AccountResource.prototype, \"statements\", {\n\t        /**\n\t         * Get information about the account's statements\n\t         * @returns {AccountStatementsResource}\n\t         */\n\t        get: function () {\n\t            return new statements_1.AccountStatementsResource(this.getPath() + '/statements', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(AccountResource.prototype, \"subAccounts\", {\n\t        /**\n\t         * Get information about the account's subaccounts\n\t         * @returns {SubAccountsResource}\n\t         */\n\t        get: function () {\n\t            return new subAccounts_1.SubAccountsResource(this.getPath() + '/subaccounts', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(AccountResource.prototype, \"transactions\", {\n\t        /**\n\t         * Get information about the account's transactions\n\t         * @returns {AccountTransactionsResource}\n\t         */\n\t        get: function () {\n\t            return new transactions_1.AccountTransactionsResource(this.getPath() + '/transactions', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(AccountResource.prototype, \"transfer\", {\n\t        /**\n\t         * Revolve a loan\n\t         * @returns {AccountTransferResource}\n\t         */\n\t        get: function () {\n\t            return new transfer_1.AccountTransferResource(this.getPath() + '/transfer', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(AccountResource.prototype, \"standingOrders\", {\n\t        /**\n\t         * @returns {AccountStandingOrdersResource}\n\t         */\n\t        get: function () {\n\t            return new standing_orders_1.AccountStandingOrdersResource(this.getPath() + '/standingorders', this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(AccountResource.prototype, \"directDebits\", {\n\t        /**\n\t         * @returns {AccountDirectDebitsResource}\n\t         */\n\t        get: function () {\n\t            return new direct_debits_1.AccountDirectDebitsResource(this.getPath() + '/directdebits', this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return AccountResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.AccountResource = AccountResource;\n\tfunction resourcifyListing(accountListing, account, isFromList) {\n\t    if (isFromList) {\n\t        accountListing.get = account.get;\n\t    }\n\t    accountListing.update = account.update;\n\t    accountListing.services = account.services;\n\t    accountListing.transactions = account.transactions;\n\t    accountListing.reservations = account.reservations;\n\t    accountListing.transfer = account.transfer;\n\t    accountListing.statements = account.statements;\n\t    accountListing.repayments = account.repayments;\n\t    accountListing.standingOrders = account.standingOrders;\n\t    accountListing.directDebits = account.directDebits;\n\t}\n\tfunction transformResponse(accountListing) {\n\t    if (accountListing.saving) {\n\t        CSCoreSDK.EntityUtils.addDatesFromISO('nextProlongation', accountListing.saving);\n\t    }\n\t    if (accountListing.loan) {\n\t        CSCoreSDK.EntityUtils.addDatesFromISO(['maturityDate', 'drawdownToDate', 'installmentDay', 'nextRateDate'], accountListing.loan);\n\t    }\n\t    if (accountListing.subaccounts) {\n\t        CSCoreSDK.EntityUtils.addDatesToItems('overdraftDueDate', accountListing, 'subaccounts');\n\t    }\n\t    CSCoreSDK.EntityUtils.addDatesFromISO('overdraftDueDate', accountListing);\n\t}\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Get information about the account's balance\n\t * @class AccountBalanceResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.GetEnabled<AccountBalance>}\n\t */\n\tvar AccountBalanceResource = (function (_super) {\n\t    __extends(AccountBalanceResource, _super);\n\t    function AccountBalanceResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Fetches the balance and returns them in a promise\n\t         * @returns {Promise<AccountBalance>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null);\n\t        };\n\t        return _this;\n\t    }\n\t    return AccountBalanceResource;\n\t}(CSCoreSDK.Resource));\n\texports.AccountBalanceResource = AccountBalanceResource;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Get information about the account's services\n\t * @class AccountServicesResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Service>}\n\t */\n\tvar AccountServicesResource = (function (_super) {\n\t    __extends(AccountServicesResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function AccountServicesResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Fetches the services and returns them in a promise\n\t         * @param {ServiceParameters=} params\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'services', params, function (response) {\n\t                // transform ISO dates to native Date objects\n\t                CSCoreSDK.EntityUtils.addDatesToItems(['dateFrom', 'dateTo'], response);\n\t                return response;\n\t            });\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return AccountServicesResource;\n\t}(CSCoreSDK.Resource));\n\texports.AccountServicesResource = AccountServicesResource;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Get information about the account's reservations\n\t * @class AccountReservationsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Reservation>}\n\t */\n\tvar AccountReservationsResource = (function (_super) {\n\t    __extends(AccountReservationsResource, _super);\n\t    function AccountReservationsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Fetches the reservations and returns them in a promise\n\t         * @param {ReservationParameters=} params\n\t         * @returns {Promise<ReservationList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'reservations', params, function (response) {\n\t                // transform ISO dates to native Date objects\n\t                CSCoreSDK.EntityUtils.addDatesToItems(['creationDate', 'expirationDate'], response);\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return AccountReservationsResource;\n\t}(CSCoreSDK.Resource));\n\texports.AccountReservationsResource = AccountReservationsResource;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Get information about the account's repayments\n\t * @class AccountRepaymentsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<Repayment>}\n\t */\n\tvar AccountRepaymentsResource = (function (_super) {\n\t    __extends(AccountRepaymentsResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function AccountRepaymentsResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Fetches the repayments and returns them in a promise\n\t         * @returns {Promise<RepaymentList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'repayments', null).then(function (response) {\n\t                // transform ISO dates to native Date objects\n\t                CSCoreSDK.EntityUtils.addDatesToItems('repaymentDate', response);\n\t                return response;\n\t            });\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return AccountRepaymentsResource;\n\t}(CSCoreSDK.Resource));\n\texports.AccountRepaymentsResource = AccountRepaymentsResource;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Get information about the account's statements\n\t * @class AccountStatementsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Statement>}\n\t */\n\tvar AccountStatementsResource = (function (_super) {\n\t    __extends(AccountStatementsResource, _super);\n\t    function AccountStatementsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Fetches the statements and returns them in a promise\n\t         * @param {NetbankingParameters=} params\n\t         * @returns {Promise<StatementList>}\n\t         */\n\t        _this.list = function (params) {\n\t            // transform \"sort\" and \"order\" parameters to comma separated list from array\n\t            CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'statements', params, function (response) {\n\t                // transform ISO dates to native Date objects\n\t                CSCoreSDK.EntityUtils.addDatesToItems('statementDate', response);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Downloads statements file\n\t         * @param {DownloadStatementParameters} params\n\t         * @returns {Promise<Uint8Array>}\n\t         */\n\t        _this.download = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallDownload(_this, 'signed/download', 'POST', params);\n\t        };\n\t        return _this;\n\t    }\n\t    return AccountStatementsResource;\n\t}(CSCoreSDK.Resource));\n\texports.AccountStatementsResource = AccountStatementsResource;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Get individual SubAccount resource\n\t * @class SubAccountsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.HasInstanceResource<SubAccountResource>}\n\t */\n\tvar SubAccountsResource = (function (_super) {\n\t    __extends(SubAccountsResource, _super);\n\t    function SubAccountsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns individual SubAccount resource with a given id\n\t         * @param {string|number} id\n\t         * @returns {SubAccountResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new SubAccountResource(id, _this.getPath(), _this._client);\n\t        };\n\t        return _this;\n\t    }\n\t    return SubAccountsResource;\n\t}(CSCoreSDK.Resource));\n\texports.SubAccountsResource = SubAccountsResource;\n\t/**\n\t * Get information about the subaccount\n\t * @class SubAccountResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t */\n\tvar SubAccountResource = (function (_super) {\n\t    __extends(SubAccountResource, _super);\n\t    function SubAccountResource() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    Object.defineProperty(SubAccountResource.prototype, \"statements\", {\n\t        /**\n\t         * Get information about the subaccount's statements\n\t         * @returns {SubAccountStatementsResource}\n\t         */\n\t        get: function () {\n\t            return new SubAccountStatementsResource(this.getPath() + '/statements', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return SubAccountResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.SubAccountResource = SubAccountResource;\n\t/**\n\t * List all subaccount's statements\n\t * @class SubAccountStatementsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Statement>}\n\t */\n\tvar SubAccountStatementsResource = (function (_super) {\n\t    __extends(SubAccountStatementsResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function SubAccountStatementsResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns all subaccount's statements in a promise\n\t         * @param {NetbankingParameters=} params\n\t         * @returns {Promise<StatementList>}\n\t         */\n\t        _this.list = function (params) {\n\t            // transform \"sort\" and \"order\" parameters to comma separated list from array\n\t            CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'statements', params, function (response) {\n\t                // transform ISO dates to native Date objects\n\t                CSCoreSDK.EntityUtils.addDatesToItems('statementDate', response);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Downloads statements file\n\t         * @param {DownloadStatementParameters} params\n\t         * @returns {Promise<Uint8Array>}\n\t         */\n\t        _this.download = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallDownload(_this, 'download', 'POST', params);\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return SubAccountStatementsResource;\n\t}(CSCoreSDK.Resource));\n\texports.SubAccountStatementsResource = SubAccountStatementsResource;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Get individual AccountsTransactionsResource\n\t * @class AccountTransactionsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.HasInstanceResource<AccountTransactionResource>}\n\t */\n\tvar AccountTransactionsResource = (function (_super) {\n\t    __extends(AccountTransactionsResource, _super);\n\t    function AccountTransactionsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns individual AccountsTransactionResource with a given id\n\t         * @param {AccountTransactionResource} id\n\t         * @returns {AccountTransactionResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new AccountTransactionResource(id, _this.getPath(), _this._client);\n\t        };\n\t        /**\n\t         * Exports transaction history into signed pdf\n\t         * @param {ExportTransactionsParameters} params\n\t         * @returns {Promise<Uint8Array>}\n\t         */\n\t        _this.export = function (params) {\n\t            // transform \"fields\" parameter to comma separated list from array\n\t            CSCoreSDK.EntityUtils.transformArrayParamsToString(params, 'fields');\n\t            // transform Date objects to ISO strings\n\t            CSCoreSDK.EntityUtils.transformDatesToISO(['dateFrom', 'dateTo'], params);\n\t            // insert 'cz' resource into the resource's path once because the api requires it in some resources\n\t            var path = _this.getPath().replace('/my', '/cz/my');\n\t            return _this._client.callApi(path + \"/export\", 'POST', params, null, null, 'arraybuffer');\n\t        };\n\t        return _this;\n\t    }\n\t    return AccountTransactionsResource;\n\t}(CSCoreSDK.Resource));\n\texports.AccountTransactionsResource = AccountTransactionsResource;\n\t/**\n\t * Allows to add or change a client's personal transaction note and mark the transaction as favorite/important for one specific transaction on selected account.\n\t * @class AccountTransactionResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.UpdateEnabled<AddNoteAndMarkTransactionRequest, AddNoteAndMarkTransactionResponse>}\n\t */\n\tvar AccountTransactionResource = (function (_super) {\n\t    __extends(AccountTransactionResource, _super);\n\t    function AccountTransactionResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Adds, changes of marks transaction\n\t         * @param {AddNoteAndMarkTransactionRequest} payload\n\t         * @returns {Promise<AddNoteAndMarkTransactionResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload);\n\t        };\n\t        return _this;\n\t    }\n\t    return AccountTransactionResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.AccountTransactionResource = AccountTransactionResource;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Revolve a loan\n\t * @class AccountTransferResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.UpdateEnabled<TransferRequest, TransferResponse>}\n\t */\n\tvar AccountTransferResource = (function (_super) {\n\t    __extends(AccountTransferResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function AccountTransferResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Revolves the loan. Currently only REVOLVING_LOAN subtype is supported.\n\t         * @param {TransferRequest} payload\n\t         * @returns {Promise<TransferResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            // transform Date objects to ISO strings\n\t            CSCoreSDK.EntityUtils.transformDatesToSimpleISO('transferDate', payload);\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                // Remove signInfo from response and add SigningObject with key signing\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return AccountTransferResource;\n\t}(CSCoreSDK.Resource));\n\texports.AccountTransferResource = AccountTransferResource;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class AccountStandingOrdersResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<StandingOrder>}\n\t * @implements {CSCoreSDK.HasInstanceResource<AccountStandingOrderResource>}\n\t * @implements {CSCoreSDK.CreateEnabled<CreateStandingOrderRequest, StandingOrderResponse>}\n\t */\n\tvar AccountStandingOrdersResource = (function (_super) {\n\t    __extends(AccountStandingOrdersResource, _super);\n\t    function AccountStandingOrdersResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns list of actual standing/sweep orders for accounts of the current user.\n\t         * @param {NetbankingParameters} params\n\t         * @returns {Promise<StandingOrderList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'standingOrders', params, function (response) {\n\t                response.items.forEach(function (item) {\n\t                    addDatesToStandingOrder(item);\n\t                    resourcifyStandingOrder(item, _this.withId(item.number));\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Get the resource of standing order with a given id\n\t         * @param {string} id\n\t         * @returns {AccountStandingOrderResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new AccountStandingOrderResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        /**\n\t         * Resource for creating standing/sweep order. Once order has been signed new payments are generated and executed according its settings.\n\t         * @param {CreateStandingOrderRequest} payload\n\t         * @returns {Promise<StandingOrderResponse>}\n\t         */\n\t        _this.create = function (payload) {\n\t            CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['nextExecutionDate', 'lastExecutionDate', 'startDate'], payload);\n\t            return CSCoreSDK.ResourceUtils.CallCreate(_this, payload).then(function (response) {\n\t                addDatesToStandingOrder(response);\n\t                resourcifyStandingOrder(response, _this.withId(response.number));\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return AccountStandingOrdersResource;\n\t}(CSCoreSDK.Resource));\n\texports.AccountStandingOrdersResource = AccountStandingOrdersResource;\n\t/**\n\t * @class AccountStandingOrderResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<StandingOrder>}\n\t * @implements {CSCoreSDK.DeleteEnabled<StandingOrderResponse>}\n\t */\n\tvar AccountStandingOrderResource = (function (_super) {\n\t    __extends(AccountStandingOrderResource, _super);\n\t    function AccountStandingOrderResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns detail of actual standing/sweep orders identified by its number.\n\t         * @returns {Promise<StandingOrder>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (response) {\n\t                addDatesToStandingOrder(response);\n\t                resourcifyStandingOrder(response, _this);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * This call removes existing standing/sweep order. No more payments for the order are executed after the change has been signed.\n\t         * @returns {Promise<StandingOrderResponse>}\n\t         */\n\t        _this.delete = function () {\n\t            return CSCoreSDK.ResourceUtils.CallDelete(_this, null).then(function (response) {\n\t                addDatesToStandingOrder(response);\n\t                resourcifyStandingOrder(response, _this);\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return AccountStandingOrderResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.AccountStandingOrderResource = AccountStandingOrderResource;\n\tfunction addDatesToStandingOrder(item) {\n\t    CSCoreSDK.EntityUtils.addDatesFromISO(['startDate', 'realExecutionDate', 'nextExecutionDate', 'lastExecutionDate'], item);\n\t    if (item.break) {\n\t        CSCoreSDK.EntityUtils.addDatesFromISO(['validFromDate', 'validToDate'], item.break);\n\t    }\n\t    if (item.scheduledExecutionDates && Array.isArray(item.scheduledExecutionDates)) {\n\t        var datesArr = item.scheduledExecutionDates.map(function (x) { return new Date(CSCoreSDK.EntityUtils.parseISODate(x)); });\n\t        item.scheduledExecutionDates = datesArr;\n\t    }\n\t}\n\tfunction resourcifyStandingOrder(orderListing, orderReference) {\n\t    orderListing.get = orderReference.get;\n\t    orderListing.delete = orderReference.delete;\n\t}\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class AccountDirectDebitsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<DirectDebit>}\n\t * @implements {CSCoreSDK.HasInstanceResource<AccountDirectDebitResource>}\n\t * @implements {CSCoreSDK.CreateEnabled<DirectDebit, SignableDirectDebit>}\n\t */\n\tvar AccountDirectDebitsResource = (function (_super) {\n\t    __extends(AccountDirectDebitsResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function AccountDirectDebitsResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Resource Direct Debit List represents collection of all direct debit approvals entered by user for the specified user\n\t         * @param {NetbankingParameters} params\n\t         * @returns {Promise<DirectDebitList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'directDebits', params, function (response) {\n\t                CSCoreSDK.EntityUtils.addDatesToItems(['startDate', 'endDate', 'versionValidityDate'], response);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Get the resource of direct debit with a given id\n\t         * @param {string} id\n\t         * @returns {AccountDirectDebitResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new AccountDirectDebitResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        /**\n\t         * Resource for creating (or allowing) direct debit on certain account. Once signed it can be used by receiver party.\n\t         * @param {DirectDebit} payload\n\t         * @returns {Promise<SignableDirectDebit>}\n\t         */\n\t        _this.create = function (payload) {\n\t            CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['startDate', 'endDate'], payload);\n\t            return CSCoreSDK.ResourceUtils.CallCreate(_this, payload).then(function (response) {\n\t                CSCoreSDK.EntityUtils.addDatesFromISO(['startDate', 'endDate', 'versionValidityDate'], response);\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return AccountDirectDebitsResource;\n\t}(CSCoreSDK.Resource));\n\texports.AccountDirectDebitsResource = AccountDirectDebitsResource;\n\t/**\n\t * @class AccountDirectDebitResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<DirectDebit>}\n\t * @implements {CSCoreSDK.DeleteEnabled<SignableDirectDebit>}\n\t */\n\tvar AccountDirectDebitResource = (function (_super) {\n\t    __extends(AccountDirectDebitResource, _super);\n\t    function AccountDirectDebitResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Get the single direct debits detail.\n\t         * @returns {Promise<DirectDebit>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (response) {\n\t                CSCoreSDK.EntityUtils.addDatesFromISO(['startDate', 'endDate', 'versionValidityDate'], response);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Resource for deleting direct debit (permission) on certain account. Once signed no more transfers can be made by receiver party.\n\t         * @returns {Promise<SignableDirectDebit>}\n\t         */\n\t        _this.delete = function () {\n\t            return CSCoreSDK.ResourceUtils.CallDelete(_this, null).then(function (response) {\n\t                CSCoreSDK.EntityUtils.addDatesFromISO(['startDate', 'endDate', 'versionValidityDate'], response);\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return AccountDirectDebitResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.AccountDirectDebitResource = AccountDirectDebitResource;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar lastLogins_1 = __webpack_require__(14);\n\t/**\n\t * Get information about the profile and past logins.\n\t * @class ProfileResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.GetEnabled<Profile>}\n\t */\n\tvar ProfileResource = (function (_super) {\n\t    __extends(ProfileResource, _super);\n\t    function ProfileResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns information about the profile\n\t         * @returns {Promise<Profile>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (profile) {\n\t                if (profile.lastlogin) {\n\t                    // transform ISO dates to native Date objects\n\t                    CSCoreSDK.EntityUtils.addDatesFromISO('lastlogin', profile);\n\t                }\n\t                return profile;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    Object.defineProperty(ProfileResource.prototype, \"lastLogins\", {\n\t        /**\n\t         * Returns LastLoginsResource for listing past logins\n\t         * @returns {LastLoginsResource}\n\t         */\n\t        get: function () {\n\t            return new lastLogins_1.LastLoginsResource(this.getPath() + '/logininfo', this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return ProfileResource;\n\t}(CSCoreSDK.Resource));\n\texports.ProfileResource = ProfileResource;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * List all past logins\n\t * @class LastLoginsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<LastLoginInfo>}\n\t */\n\tvar LastLoginsResource = (function (_super) {\n\t    __extends(LastLoginsResource, _super);\n\t    function LastLoginsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns promise with a list of past logins\n\t         * @returns {Promise<LastLoginList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'lastlogin').then(function (response) {\n\t                // transform ISO dates to native Date objects\n\t                CSCoreSDK.EntityUtils.addDatesToItems('lastlogin', response);\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return LastLoginsResource;\n\t}(CSCoreSDK.Resource));\n\texports.LastLoginsResource = LastLoginsResource;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar delivery_1 = __webpack_require__(16);\n\tvar transactions_1 = __webpack_require__(17);\n\tvar actions_1 = __webpack_require__(18);\n\tvar limits_1 = __webpack_require__(19);\n\tvar secure3D_1 = __webpack_require__(20);\n\tvar transfer_1 = __webpack_require__(21);\n\tvar statements_1 = __webpack_require__(22);\n\t/**\n\t * Represents list of payment cards (either debet or credit) for current user. Every card was issued for current user or belongs to one of his accounts.\n\t * @class CardsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Card>}\n\t * @implements {CSCoreSDK.HasInstanceResource<CardResource>}\n\t */\n\tvar CardsResource = (function (_super) {\n\t    __extends(CardsResource, _super);\n\t    function CardsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * List all cards\n\t         * @param {Promise<CardList>=} params\n\t         * @returns {Promise<CardList>}\n\t         */\n\t        _this.list = function (params) {\n\t            // transform \"sort\" and \"order\" parameters to comma separated list from array\n\t            CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'cards', params, function (response) {\n\t                response.items.forEach(function (item) {\n\t                    // add convenient methods to items in the list\n\t                    resourcifyListing(item, _this.withId(item.id), true);\n\t                    // transform ISO dates to native Date objects\n\t                    transformResponse(item);\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Get a resource for card with a given id\n\t         * @param {string} id\n\t         * @returns {CardResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new CardResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        return _this;\n\t    }\n\t    return CardsResource;\n\t}(CSCoreSDK.Resource));\n\texports.CardsResource = CardsResource;\n\t/**\n\t * @class CardResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<Card>}\n\t * @implements {CSCoreSDK.UpdateEnabled<ChangeCardSettingsRequest, ChangeCardSettingsResponse>}\n\t */\n\tvar CardResource = (function (_super) {\n\t    __extends(CardResource, _super);\n\t    function CardResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Get detail of the card\n\t         * @returns {Promise<Card>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (card) {\n\t                // add convenient methods to items in the list\n\t                resourcifyListing(card, _this, false);\n\t                // transform ISO dates to native Date objects\n\t                transformResponse(card);\n\t                return card;\n\t            });\n\t        };\n\t        /**\n\t         * Update card's alias\n\t         * @param {ChangeCardSettingsRequest} payload\n\t         * @returns {Promise<ChangeCardSettingsResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (card) {\n\t                // add convenient methods to items in the list\n\t                resourcifyListing(card, _this, false);\n\t                // transform ISO dates to native Date objects\n\t                transformResponse(card);\n\t                return card;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    Object.defineProperty(CardResource.prototype, \"delivery\", {\n\t        /**\n\t         * Get current delivery settings\n\t         * @returns {CardDeliveryResource}\n\t         */\n\t        get: function () {\n\t            return new delivery_1.CardDeliveryResource(this.getPath() + '/delivery', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(CardResource.prototype, \"transactions\", {\n\t        /**\n\t         * Allows to add or change a client's personal note and mark/star the card transaction as favorite/important for one specific transaction\n\t         * @returns {CardTransactionsResource}\n\t         */\n\t        get: function () {\n\t            return new transactions_1.CardTransactionsResource(this.getPath() + '/transactions', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(CardResource.prototype, \"actions\", {\n\t        /**\n\t         * Issue various actions on a single card. Currently supported actions are:\n\t         * reissue pin, lock card, unlock card, activate card, set automatic card replacement on, set automatic card replacement off, replacement card request\n\t         * @returns {CardActionsResource}\n\t         */\n\t        get: function () {\n\t            return new actions_1.CardActionsResource(this.getPath() + '/states', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(CardResource.prototype, \"limits\", {\n\t        /**\n\t         * Get information about different limits\n\t         * @returns {CardLimitsResource}\n\t         */\n\t        get: function () {\n\t            return new limits_1.CardLimitsResource(this.getPath() + '/card-limits', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(CardResource.prototype, \"secure3d\", {\n\t        /**\n\t         * Get the 3D secure online shopping status\n\t         * @returns {CardSecure3DResource}\n\t         */\n\t        get: function () {\n\t            return new secure3D_1.CardSecure3DResource(this.getPath() + '/secure-online-shopping', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(CardResource.prototype, \"transfer\", {\n\t        /**\n\t         * Resource for paying up credit card debt\n\t         * @returns {CardTransferResource}\n\t         */\n\t        get: function () {\n\t            return new transfer_1.CardTransferResource(this.getPath() + '/transfer', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(CardResource.prototype, \"accounts\", {\n\t        /**\n\t         * Account resource for listing statements\n\t         * @returns {CardAccountsResource}\n\t         */\n\t        get: function () {\n\t            return new statements_1.CardAccountsResource(this.getPath() + '/mainaccount', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return CardResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.CardResource = CardResource;\n\tfunction resourcifyListing(itemListing, itemResource, isFromList) {\n\t    if (isFromList) {\n\t        itemListing.get = itemResource.get;\n\t    }\n\t    itemListing.update = itemResource.update;\n\t    itemListing.delivery = itemResource.delivery;\n\t    itemListing.transactions = itemResource.transactions;\n\t    itemListing.actions = itemResource.actions;\n\t    itemListing.limits = itemResource.limits;\n\t    itemListing.secure3d = itemResource.secure3d;\n\t    itemListing.transfer = itemResource.transfer;\n\t    itemListing.accounts = itemResource.accounts;\n\t}\n\tfunction transformResponse(item) {\n\t    CSCoreSDK.EntityUtils.addDatesFromISO(['expiryDate', 'validFromDate'], item);\n\t}\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Get current delivery settings\n\t * @class CardDeliveryResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.GetEnabled<DeliveryListing>}\n\t * @implements {CSCoreSDK.UpdateEnabled<ChangeDeliverySettingsRequest, ChangeDeliverySettingsResponse>}\n\t */\n\tvar CardDeliveryResource = (function (_super) {\n\t    __extends(CardDeliveryResource, _super);\n\t    function CardDeliveryResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns current delivery settings\n\t         * @returns {Promise<DeliveryListing>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null);\n\t        };\n\t        /**\n\t         * Change current delivery settings\n\t         * @param {ChangeDeliverySettingsRequest} payload\n\t         * @returns {Promise<ChangeDeliverySettingsResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload);\n\t        };\n\t        return _this;\n\t    }\n\t    return CardDeliveryResource;\n\t}(CSCoreSDK.Resource));\n\texports.CardDeliveryResource = CardDeliveryResource;\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Allows to add or change a client's personal note and mark/star the card transaction as favorite/important for one specific transaction\n\t * @class CardTransactionsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.HasInstanceResource<CardTransactionResource>}\n\t */\n\tvar CardTransactionsResource = (function (_super) {\n\t    __extends(CardTransactionsResource, _super);\n\t    function CardTransactionsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns CardTransactionResource for a given id\n\t         * @param {string} id\n\t         * @returns {CardTransactionResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new CardTransactionResource(id, _this.getPath(), _this._client);\n\t        };\n\t        /**\n\t         * Export transactions to PDF\n\t         * @param {ExportTransactionsParameters} params\n\t         * @returns {Promise<Uint8Array>}\n\t         */\n\t        _this.export = function (params) {\n\t            // transform \"fields\" parameter to comma separated list from array\n\t            CSCoreSDK.EntityUtils.transformArrayParamsToString(params, 'fields');\n\t            // transform Date objects to ISO strings\n\t            CSCoreSDK.EntityUtils.transformDatesToISO(['dateFrom', 'dateTo'], params);\n\t            // insert 'cz' resource into the resource's path once because the api requires it in some resources\n\t            var path = _this.getPath().replace('/my', '/cz/my');\n\t            return _this._client.callApi(path + \"/export\", 'POST', params, null, null, 'arraybuffer');\n\t        };\n\t        return _this;\n\t    }\n\t    return CardTransactionsResource;\n\t}(CSCoreSDK.Resource));\n\texports.CardTransactionsResource = CardTransactionsResource;\n\t/**\n\t * Add or change a client's personal note and mark/star the card transaction as favorite/important\n\t * @class CardTransactionResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.UpdateEnabled<AddNoteAndMarkTransactionRequest, AddNoteAndMarkCardTransactionResponse>}\n\t */\n\tvar CardTransactionResource = (function (_super) {\n\t    __extends(CardTransactionResource, _super);\n\t    function CardTransactionResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Adds, changes of marks transaction\n\t         * @param {AddNoteAndMarkTransactionRequest} payload\n\t         * @returns {Promise<AddNoteAndMarkCardTransactionResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload);\n\t        };\n\t        return _this;\n\t    }\n\t    return CardTransactionResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.CardTransactionResource = CardTransactionResource;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Issue various actions on a single card.\n\t * @class CardActionsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.UpdateEnabled<CardActionRequest, CardActionResponse>}\n\t */\n\tvar CardActionsResource = (function (_super) {\n\t    __extends(CardActionsResource, _super);\n\t    function CardActionsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Issues various actions on a single card\n\t         * @param {CardActionRequest} payload\n\t         * @returns {Promise<CardActionResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                // Remove signInfo from response and add SigningObject with key signing\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return CardActionsResource;\n\t}(CSCoreSDK.Resource));\n\texports.CardActionsResource = CardActionsResource;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Get information about different limits\n\t * @class CardLimitsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<CardLimit>}\n\t * @implements {CSCoreSDK.UpdateEnabled<ChangeCardLimitsRequest, ChangeCardLimitsResponse>}\n\t */\n\tvar CardLimitsResource = (function (_super) {\n\t    __extends(CardLimitsResource, _super);\n\t    function CardLimitsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * List all limits\n\t         * @returns {Promise<CardLimitsList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'limits').then(function (response) {\n\t                // transform ISO dates to native Date objects\n\t                CSCoreSDK.EntityUtils.addDatesToItems('temporaryLimitExpiration', response);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Update individual limits\n\t         * @param {ChangeCardLimitsRequest} payload\n\t         * @returns {Promise<ChangeCardLimitsResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                // transform ISO dates to native Date objects\n\t                CSCoreSDK.EntityUtils.addDatesToItems('temporaryLimitExpiration', response, 'limits');\n\t                // Remove signInfo from response and add SigningObject with key signing\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return CardLimitsResource;\n\t}(CSCoreSDK.Resource));\n\texports.CardLimitsResource = CardLimitsResource;\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Get the 3D secure online shopping status\n\t * @class CardSecure3DResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.GetEnabled<SecureSettings>}\n\t */\n\tvar CardSecure3DResource = (function (_super) {\n\t    __extends(CardSecure3DResource, _super);\n\t    function CardSecure3DResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns 3D secure online shopping status\n\t         * @returns {Promise<SecureSettings>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null);\n\t        };\n\t        return _this;\n\t    }\n\t    return CardSecure3DResource;\n\t}(CSCoreSDK.Resource));\n\texports.CardSecure3DResource = CardSecure3DResource;\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Resource for paying up credit card debt\n\t * @class CardTransferResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.UpdateEnabled<PayUpCreditCardRequest, PayUpCreditCardResponse>}\n\t */\n\tvar CardTransferResource = (function (_super) {\n\t    __extends(CardTransferResource, _super);\n\t    function CardTransferResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Pays up the credit card debt and returns sign info\n\t         * @param {PayUpCreditCardRequest} payload\n\t         * @returns {Promise<PayUpCreditCardResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                // Remove signInfo from response and add SigningObject with key signing\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return CardTransferResource;\n\t}(CSCoreSDK.Resource));\n\texports.CardTransferResource = CardTransferResource;\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Account resource for listing statements\n\t * @class CardAccountsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.HasInstanceResource<CardAccountResource>}\n\t */\n\tvar CardAccountsResource = (function (_super) {\n\t    __extends(CardAccountsResource, _super);\n\t    function CardAccountsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns CardAccountResource for an account with a given id\n\t         * @param {string} id\n\t         * @returns {CardAccountResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new CardAccountResource(id, _this.getPath(), _this._client);\n\t        };\n\t        return _this;\n\t    }\n\t    return CardAccountsResource;\n\t}(CSCoreSDK.Resource));\n\texports.CardAccountsResource = CardAccountsResource;\n\t/**\n\t * Indidiual account resource with a given id\n\t * @class CardAccountResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t */\n\tvar CardAccountResource = (function (_super) {\n\t    __extends(CardAccountResource, _super);\n\t    function CardAccountResource() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    Object.defineProperty(CardAccountResource.prototype, \"statements\", {\n\t        /**\n\t         * Get statements of the account\n\t         * @returns {CardStatementsResource}\n\t         */\n\t        get: function () {\n\t            return new CardStatementsResource(this.getPath() + '/statements', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return CardAccountResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.CardAccountResource = CardAccountResource;\n\t/**\n\t * Get statements for an account\n\t * @class CardStatementsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Statement>}\n\t */\n\tvar CardStatementsResource = (function (_super) {\n\t    __extends(CardStatementsResource, _super);\n\t    function CardStatementsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * List all statements\n\t         * @param {NetbankingParameters=} params\n\t         * @returns {Promise<StatementList>}\n\t         */\n\t        _this.list = function (params) {\n\t            // transform \"sort\" and \"order\" parameters to comma separated list from array\n\t            CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'statements', params, function (response) {\n\t                // transform ISO dates to native Date objects\n\t                CSCoreSDK.EntityUtils.addDatesToItems('statementDate', response);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Download PDF with statements\n\t         * @param {DownloadStatementParameters} params\n\t         * @returns {Promise<Uint8Array>}\n\t         */\n\t        _this.download = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallDownload(_this, 'signed/download', 'POST', params);\n\t        };\n\t        return _this;\n\t    }\n\t    return CardStatementsResource;\n\t}(CSCoreSDK.Resource));\n\texports.CardStatementsResource = CardStatementsResource;\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar bookingDate_1 = __webpack_require__(24);\n\tvar domestic_1 = __webpack_require__(25);\n\tvar limits_1 = __webpack_require__(26);\n\tvar mobile_1 = __webpack_require__(27);\n\t/**\n\t * Get information about payments orders\n\t * @class OrdersResource\n\t * @extends {CSCoreSDK.Resource}\n\t */\n\tvar OrdersResource = (function (_super) {\n\t    __extends(OrdersResource, _super);\n\t    function OrdersResource() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    Object.defineProperty(OrdersResource.prototype, \"payments\", {\n\t        /**\n\t         * Returns PaymentsResource for listing, deleting and accessing other information about payments\n\t         * @returns {PaymentsResource}\n\t         */\n\t        get: function () {\n\t            return new PaymentsResource(this.getPath() + '/payments', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return OrdersResource;\n\t}(CSCoreSDK.Resource));\n\texports.OrdersResource = OrdersResource;\n\t/**\n\t * List payments, get individual payment and other resources\n\t * @class PaymentsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.HasInstanceResource<PaymentResource>}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Payment>}\n\t */\n\tvar PaymentsResource = (function (_super) {\n\t    __extends(PaymentsResource, _super);\n\t    function PaymentsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * List all payments\n\t         * @param {NetbankingParameters=} params\n\t         * @returns {Promise<PaymentList>}\n\t         */\n\t        _this.list = function (params) {\n\t            // transform \"sort\" and \"order\" parameters to comma separated list from array\n\t            CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'order', params, function (response) {\n\t                response.items.forEach(function (item) {\n\t                    // transform ISO dates to native Date objects\n\t                    CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], item);\n\t                    // Remove signInfo from response and add SigningObject with key signing\n\t                    CSCoreSDK.SigningUtils.createSigningObject(item, _this.getClient(), _this.getClient().getPath() + \"/orders/payments/\" + item.id);\n\t                    // add convenient get and delete methods for fetching order's detail and removing order\n\t                    resourcifyListing(item, _this.withId(item.id));\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Get individual payment with a given id\n\t         * @param {string|number} id\n\t         * @returns {PaymentResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new PaymentResource(id, _this.getPath(), _this._client);\n\t        };\n\t        return _this;\n\t    }\n\t    Object.defineProperty(PaymentsResource.prototype, \"bookingDate\", {\n\t        /**\n\t         * Get currently available booking date\n\t         * @returns {PaymentBookingDateResource}\n\t         */\n\t        get: function () {\n\t            return new bookingDate_1.PaymentBookingDateResource(this.getPath() + '/bookingdate', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(PaymentsResource.prototype, \"domestic\", {\n\t        /**\n\t         * Create domestic payment order\n\t         * @returns {PaymentsDomesticResource}\n\t         */\n\t        get: function () {\n\t            return new domestic_1.PaymentsDomesticResource(this.getPath() + '/domestic', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(PaymentsResource.prototype, \"limits\", {\n\t        /**\n\t         * Get remaining amounts for payment orders\n\t         * @returns {PaymentLimitsResource}\n\t         */\n\t        get: function () {\n\t            return new limits_1.PaymentLimitsResource(this.getPath() + '/limits', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(PaymentsResource.prototype, \"mobile\", {\n\t        /**\n\t         * Recharging the credit available on prepaid cards provided by Vodafone, T-Mobile or O2.\n\t         * @returns {PaymentMobileResource}\n\t         */\n\t        get: function () {\n\t            return new mobile_1.PaymentMobileResource(this.getPath() + '/mobile', this._client);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return PaymentsResource;\n\t}(CSCoreSDK.Resource));\n\texports.PaymentsResource = PaymentsResource;\n\t/**\n\t * Individual Payment order resource\n\t * @class PaymentResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<Payment>}\n\t * @implements {CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse>}\n\t */\n\tvar PaymentResource = (function (_super) {\n\t    __extends(PaymentResource, _super);\n\t    function PaymentResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Get detail of the payment\n\t         * @returns {Promise<Payment>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (payment) {\n\t                // transform ISO dates to native Date objects\n\t                CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], payment);\n\t                // Remove signInfo from response and add SigningObject with key signing\n\t                CSCoreSDK.SigningUtils.createSigningObject(payment, _this.getClient(), _this.getClient().getPath() + \"/orders/payments/\" + payment.id);\n\t                return payment;\n\t            });\n\t        };\n\t        /**\n\t         * Delete payment\n\t         * @returns {Promise<NetbankingEmptyResponse>}\n\t         */\n\t        _this.delete = function () {\n\t            return CSCoreSDK.ResourceUtils.CallDelete(_this, null);\n\t        };\n\t        return _this;\n\t    }\n\t    return PaymentResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.PaymentResource = PaymentResource;\n\tfunction resourcifyListing(paymentListing, paymentResource) {\n\t    paymentListing.get = paymentResource.get;\n\t    paymentListing.delete = paymentResource.delete;\n\t}\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Get currently available booking date\n\t * @class PaymentBookingDateResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.UpdateEnabled<PaymentBookingDateRequest, PaymentBookingDateResponse>}\n\t */\n\tvar PaymentBookingDateResource = (function (_super) {\n\t    __extends(PaymentBookingDateResource, _super);\n\t    function PaymentBookingDateResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns current available booking date based on the provided account and optional payment order category parameters\n\t         * @param {PaymentBookingDateRequest} payload\n\t         * @returns {Promise<PaymentBookingDateResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            // make copy of payload\n\t            payload = JSON.parse(JSON.stringify(payload));\n\t            // get account's ID from passed object\n\t            var params = {\n\t                accountId: payload.accountId\n\t            };\n\t            delete payload.accountId;\n\t            return CSCoreSDK.ResourceUtils.CallApiWithSuffix(_this, null, \"PUT\", params, payload).then(function (bookingDate) {\n\t                // transform ISO dates to native Date objects\n\t                CSCoreSDK.EntityUtils.addDatesFromISO('bookingDate', bookingDate);\n\t                return bookingDate;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return PaymentBookingDateResource;\n\t}(CSCoreSDK.Resource));\n\texports.PaymentBookingDateResource = PaymentBookingDateResource;\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Create domestic payment order\n\t * @class PaymentsDomesticResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.CreateEnabled<DomesticPaymentCreateRequest, DomesticPaymentResponse>}\n\t */\n\tvar PaymentsDomesticResource = (function (_super) {\n\t    __extends(PaymentsDomesticResource, _super);\n\t    function PaymentsDomesticResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Creates domestic payment order and returns it in promise\n\t         * @param {DomesticPaymentCreateRequest} payload\n\t         * @returns {Promise<DomesticPaymentResponse>}\n\t         */\n\t        _this.create = function (payload) {\n\t            // transform Date object to ISO strings\n\t            CSCoreSDK.EntityUtils.transformDatesToISO('transferDate', payload);\n\t            return CSCoreSDK.ResourceUtils.CallCreate(_this, payload).then(function (response) {\n\t                // transform ISO dates to native Date objects\n\t                CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], response);\n\t                // Remove signInfo from response and add SigningObject with key signing\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getClient().getPath() + \"/orders/payments/\" + response.id);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Returns PaymentDomesticResource resource for updating domestic payment\n\t         * @param {string} id\n\t         * @returns {PaymentDomesticResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new PaymentDomesticResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        return _this;\n\t    }\n\t    return PaymentsDomesticResource;\n\t}(CSCoreSDK.Resource));\n\texports.PaymentsDomesticResource = PaymentsDomesticResource;\n\t/**\n\t * Update domestic payment\n\t * @class PaymentDomesticResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.UpdateEnabled<DomesticPaymentUpdateRequest, DomesticPaymentResponse>}\n\t */\n\tvar PaymentDomesticResource = (function (_super) {\n\t    __extends(PaymentDomesticResource, _super);\n\t    function PaymentDomesticResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Updates domestic payment and returns it in promise\n\t         * @param {DomesticPaymentUpdateRequest} payload\n\t         * @returns {Promise<DomesticPaymentResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            // add ID to payload from resource id property\n\t            payload.id = _this._id;\n\t            // transform Date object to ISO strings\n\t            CSCoreSDK.EntityUtils.transformDatesToISO('transferDate', payload);\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                // transform ISO dates to native Date objects\n\t                CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], response);\n\t                // Remove signInfo from response and add SigningObject with key signing\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getClient().getPath() + \"/orders/payments/\" + response.id);\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return PaymentDomesticResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.PaymentDomesticResource = PaymentDomesticResource;\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Get remaining amounts for payment orders\n\t * @class PaymentLimitsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<PaymentLimit>}\n\t */\n\tvar PaymentLimitsResource = (function (_super) {\n\t    __extends(PaymentLimitsResource, _super);\n\t    function PaymentLimitsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * List all limits for payment orders\n\t         * @returns {Promise<PaymentLimitsList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'remainingLimits', null);\n\t        };\n\t        return _this;\n\t    }\n\t    return PaymentLimitsResource;\n\t}(CSCoreSDK.Resource));\n\texports.PaymentLimitsResource = PaymentLimitsResource;\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * Recharging the credit available on prepaid cards provided by Vodafone, T-Mobile or O2.\n\t * @class PaymentMobileResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.CreateEnabled<MobilePaymentsRequest, MobilePaymentsResponse>}\n\t */\n\tvar PaymentMobileResource = (function (_super) {\n\t    __extends(PaymentMobileResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function PaymentMobileResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Recharge the credit on prepaid card\n\t         * @param {MobilePaymentsRequest} payload\n\t         * @returns {Promise<MobilePaymentsResponse>}\n\t         */\n\t        _this.create = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallCreate(_this, payload).then(function (response) {\n\t                // Remove signInfo from response and add SigningObject with key signing\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return PaymentMobileResource;\n\t}(CSCoreSDK.Resource));\n\texports.PaymentMobileResource = PaymentMobileResource;\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar transactions_1 = __webpack_require__(29);\n\t/**\n\t * @class SecuritiesResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Security>}\n\t * @implements {CSCoreSDK.HasInstanceResource<SecurityResource>}\n\t */\n\tvar SecuritiesResource = (function (_super) {\n\t    __extends(SecuritiesResource, _super);\n\t    function SecuritiesResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns list of securities accounts for current user. Securities account represents virtual account which holds securities titles and its shares (funds, bonds, etc.).\n\t         * @param {SecuritiesParams=} params\n\t         * @returns {Promise<SecurityList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'securitiesAccounts', params, function (response) {\n\t                transformDatesInSubSecAccounts(response);\n\t                response.items.forEach(function (sec) {\n\t                    resourcifySecurity(sec, _this.withId(sec.id));\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Get resource of security with a given id\n\t         * @param {string} id\n\t         * @returns {SecuritiesResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new SecurityResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        return _this;\n\t    }\n\t    return SecuritiesResource;\n\t}(CSCoreSDK.Resource));\n\texports.SecuritiesResource = SecuritiesResource;\n\t/**\n\t * @class SecurityResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<Security>}\n\t * @implements {CSCoreSDK.UpdateEnabled<SecurityRequest, SecurityResponse>}\n\t */\n\tvar SecurityResource = (function (_super) {\n\t    __extends(SecurityResource, _super);\n\t    function SecurityResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Get a single securities account with all its details. Securities account represents virtual account which holds securities titles and its shares (funds, bonds, etc.).\n\t         * @returns {Promise<Security>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (response) {\n\t                transformDatesInSubSecAccounts(response);\n\t                resourcifySecurity(response, _this);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Allows to change a limited set of securities account-settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process.\n\t         * @param {SecurityRequest} payload\n\t         * @returns {Promise<SecurityResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                transformDatesInSubSecAccounts(response);\n\t                resourcifySecurity(response, _this);\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    Object.defineProperty(SecurityResource.prototype, \"transactions\", {\n\t        /**\n\t         * Returns security transactions resource\n\t         * @returns {SecurityTransactionsResource}\n\t         */\n\t        get: function () {\n\t            return new transactions_1.SecurityTransactionsResource(this.getPath() + \"/transactions\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return SecurityResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.SecurityResource = SecurityResource;\n\tfunction transformDatesInSubSecAccounts(response) {\n\t    if (response.subSecAccounts && Array.isArray(response.subSecAccounts)) {\n\t        response.subSecAccounts.forEach(function (acc) {\n\t            CSCoreSDK.EntityUtils.addDatesFromISO('lastPriceDate', acc);\n\t        });\n\t    }\n\t}\n\tfunction resourcifySecurity(security, securityReference) {\n\t    security.transactions = securityReference.transactions;\n\t    security.get = securityReference.get;\n\t    security.update = securityReference.update;\n\t}\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class SecurityTransactionsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.HasInstanceResource<SecurityTransactionResource>}\n\t */\n\tvar SecurityTransactionsResource = (function (_super) {\n\t    __extends(SecurityTransactionsResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function SecurityTransactionsResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Get resource of security transaction with a given id\n\t         * @param {string} id\n\t         * @returns {SecurityTransactionResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new SecurityTransactionResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        /**\n\t         * Export transaction history into signed pdf.\n\t         * @param {ExportTransactionsParameters} params\n\t         * @return {Promise<Uint8Array>}\n\t         */\n\t        _this.export = function (params) {\n\t            // transform \"fields\" parameter to comma separated list from array\n\t            CSCoreSDK.EntityUtils.transformArrayParamsToString(params, 'fields');\n\t            // transform Date objects to ISO strings\n\t            CSCoreSDK.EntityUtils.transformDatesToISO(['dateFrom', 'dateTo'], params);\n\t            return _this._client.callApi(_this.getPath() + \"/export\", 'POST', params, null, null, 'arraybuffer');\n\t        };\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return SecurityTransactionsResource;\n\t}(CSCoreSDK.Resource));\n\texports.SecurityTransactionsResource = SecurityTransactionsResource;\n\t/**\n\t * @class SecurityTransactionResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.UpdateEnabled<SecurityTransactionRequest, SecurityTransactionResponse>}\n\t */\n\tvar SecurityTransactionResource = (function (_super) {\n\t    __extends(SecurityTransactionResource, _super);\n\t    function SecurityTransactionResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Allows to add or change a client's personal note and mark/star the transaction as favorite/important for one specific transaction on selected product.\n\t         * @param {SecurityTransactionRequest} payload\n\t         * @returns {Promise<SecurityTransactionResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            payload.id = _this._id;\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return SecurityTransactionResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.SecurityTransactionResource = SecurityTransactionResource;\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class SettingsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.GetEnabled<Settings>}\n\t * @implements {CSCoreSDK.UpdateEnabled<Settings, SignableSettings>}\n\t */\n\tvar SettingsResource = (function (_super) {\n\t    __extends(SettingsResource, _super);\n\t    function SettingsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns basic user settings.\n\t         * @returns {Promise<Settings>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null);\n\t        };\n\t        /**\n\t         * Change user settings. Currently only language can be changed by this endpoint.\n\t         * @param {Settings} payload\n\t         * @returns {Promise<SignableSettings>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return SettingsResource;\n\t}(CSCoreSDK.Resource));\n\texports.SettingsResource = SettingsResource;\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class ContactsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<Contact>}\n\t * @implements {CSCoreSDK.HasInstanceResource<ContactResource>}\n\t */\n\tvar ContactsResource = (function (_super) {\n\t    __extends(ContactsResource, _super);\n\t    function ContactsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Resource represents list of contact information for current user. It can contain addresses, phones and email addresses.\n\t         * @returns {Promise<ContactList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'contacts');\n\t        };\n\t        /**\n\t         * Get the resource of contact with a given id\n\t         * @param {string} id\n\t         * @returns {ContactResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new ContactResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        return _this;\n\t    }\n\t    return ContactsResource;\n\t}(CSCoreSDK.Resource));\n\texports.ContactsResource = ContactsResource;\n\t/**\n\t * @class ContactResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<Contact>}\n\t */\n\tvar ContactResource = (function (_super) {\n\t    __extends(ContactResource, _super);\n\t    function ContactResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Resource represents one specific contact information identified by its id. It can be address, phone or email address.\n\t         * @returns {Promise<Contact>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null);\n\t        };\n\t        return _this;\n\t    }\n\t    return ContactResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.ContactResource = ContactResource;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class PluginsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Plugin>}\n\t * @implements {CSCoreSDK.HasInstanceResource<PluginResource>}\n\t */\n\tvar PluginsResource = (function (_super) {\n\t    __extends(PluginsResource, _super);\n\t    function PluginsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns list of available plugins for current user. Plugin is application functionality which can be enabled/disabled by user.\n\t         * @param {PluginsParameters} params\n\t         * @returns {Promise<PluginList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'plugins', params, function (response) {\n\t                CSCoreSDK.EntityUtils.addDatesToItems(['validUntil', 'dateOfActivation'], response);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Returns resource of plugin with a given id\n\t         * @param {string} id\n\t         * @returns {PluginResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new PluginResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        return _this;\n\t    }\n\t    return PluginsResource;\n\t}(CSCoreSDK.Resource));\n\texports.PluginsResource = PluginsResource;\n\t/**\n\t * @class PluginResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.UpdateEnabled<UpdatePluginRequest, SignablePlugin>}\n\t */\n\tvar PluginResource = (function (_super) {\n\t    __extends(PluginResource, _super);\n\t    function PluginResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Activation and deactivation of the specific plugin. You can also change settlement account for given plugin and current user.\n\t         * @param {UpdatePluginRequest} payload\n\t         * @returns {Promise<SignablePlugin>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                CSCoreSDK.EntityUtils.addDatesFromISO(['validUntil', 'dateOfActivation'], response);\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return PluginResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.PluginResource = PluginResource;\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar buildings_1 = __webpack_require__(34);\n\tvar pensions_1 = __webpack_require__(37);\n\tvar insurances_1 = __webpack_require__(38);\n\tvar loyalty_1 = __webpack_require__(48);\n\t/**\n\t * @class ContractsResource\n\t * @extends {CSCoreSDK.Resource}\n\t */\n\tvar ContractsResource = (function (_super) {\n\t    __extends(ContractsResource, _super);\n\t    function ContractsResource() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    Object.defineProperty(ContractsResource.prototype, \"buildings\", {\n\t        /**\n\t         * Get buildings contracts resource\n\t         * @returns {BuildingsContractsResource}\n\t         */\n\t        get: function () {\n\t            return new buildings_1.BuildingsContractsResource(this.getPath() + \"/buildings\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ContractsResource.prototype, \"pensions\", {\n\t        /**\n\t         * Get pensions contracts resource\n\t         * @returns {PensionsContractsResource}\n\t         */\n\t        get: function () {\n\t            return new pensions_1.PensionsContractsResource(this.getPath() + \"/pensions\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ContractsResource.prototype, \"insurances\", {\n\t        /**\n\t         * Get insurances contracts resource\n\t         * @returns {InsurancesContractsResource}\n\t         */\n\t        get: function () {\n\t            return new insurances_1.InsurancesContractsResource(this.getPath() + \"/insurances\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(ContractsResource.prototype, \"loyalty\", {\n\t        /**\n\t         * Get loyalty contracts resource\n\t         * @returns {LoyaltyContractsResource}\n\t         */\n\t        get: function () {\n\t            return new loyalty_1.LoyaltyContractsResource(this.getPath() + \"/loyalty\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return ContractsResource;\n\t}(CSCoreSDK.Resource));\n\texports.ContractsResource = ContractsResource;\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar services_1 = __webpack_require__(35);\n\tvar transactions_1 = __webpack_require__(36);\n\t/**\n\t * @class BuildingsContractsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.HasInstanceResource<BuildingsContractResource>}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<BuildingsContract>}\n\t */\n\tvar BuildingsContractsResource = (function (_super) {\n\t    __extends(BuildingsContractsResource, _super);\n\t    function BuildingsContractsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Resource represents list of building savings for current user. It contains building savings and loans from building savings as well.\n\t         * @param {BuildingsContractsParameters=} params\n\t         * @returns {Promise<BuildingsContractList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'buildings', params, function (response) {\n\t                response.items.forEach(function (item) {\n\t                    resourcifyBuildingsContracts(item, _this.withId(item.id));\n\t                    transformDates(item);\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Get the resource of buildings contract with a given id\n\t         * @param {string} id\n\t         * @returns {BuildingsContractResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new BuildingsContractResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        return _this;\n\t    }\n\t    return BuildingsContractsResource;\n\t}(CSCoreSDK.Resource));\n\texports.BuildingsContractsResource = BuildingsContractsResource;\n\t/**\n\t * @class BuildingsContractResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<BuildingsContract>}\n\t * @implements {CSCoreSDK.UpdateEnabled<UpdateBuildingsContractRequest, UpdateBuildingsContractResponse>}\n\t */\n\tvar BuildingsContractResource = (function (_super) {\n\t    __extends(BuildingsContractResource, _super);\n\t    function BuildingsContractResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Resource represents one building saving product identified by it's identifier. It can be building saving or loan from building saving.\n\t         * @returns {Promise<BuildingsContract>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (response) {\n\t                resourcifyBuildingsContracts(response, _this);\n\t                transformDates(response);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Allows to change a limited set of building savings contract-settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process.\n\t         * @param {UpdateBuildingsContractRequest} payload\n\t         * @returns {Promise<UpdateBuildingsContractResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            payload.id = _this._id;\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                resourcifyBuildingsContracts(response, _this);\n\t                transformDates(response);\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    Object.defineProperty(BuildingsContractResource.prototype, \"services\", {\n\t        /**\n\t         * Get buildings contracts services resource\n\t         * @returns {BuildingsContractsServicesResource}\n\t         */\n\t        get: function () {\n\t            return new services_1.BuildingsContractsServicesResource(this.getPath() + \"/services\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(BuildingsContractResource.prototype, \"transactions\", {\n\t        /**\n\t         * Get buildings contracts transactions resource\n\t         * @returns {ContractsTransactionsResource}\n\t         */\n\t        get: function () {\n\t            return new transactions_1.ContractsTransactionsResource(this.getPath().replace('/my', '/cz/my') + \"/transactions\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return BuildingsContractResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.BuildingsContractResource = BuildingsContractResource;\n\tfunction resourcifyBuildingsContracts(contract, contractReference) {\n\t    contract.get = contractReference.get;\n\t    contract.update = contractReference.update;\n\t    contract.services = contractReference.services;\n\t    contract.transactions = contractReference.transactions;\n\t}\n\tfunction transformDates(contract) {\n\t    if (contract.saving) {\n\t        CSCoreSDK.EntityUtils.addDatesFromISO('expiryDate', contract.saving);\n\t    }\n\t    if (contract.loan) {\n\t        CSCoreSDK.EntityUtils.addDatesFromISO(['interestRateFromDate', 'interestRateToDate'], contract.saving);\n\t    }\n\t}\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class BuildingsContractsServicesResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Service>}\n\t */\n\tvar BuildingsContractsServicesResource = (function (_super) {\n\t    __extends(BuildingsContractsServicesResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function BuildingsContractsServicesResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns list of services which are connected or arranged for building saving product instance.\n\t         * @param {ServiceParameters=} params\n\t         * @returns {Promise<ServiceList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'services', params, function (response) {\n\t                CSCoreSDK.EntityUtils.addDatesToItems(['dateFrom', 'dateTo'], response);\n\t                return response;\n\t            });\n\t        };\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return BuildingsContractsServicesResource;\n\t}(CSCoreSDK.Resource));\n\texports.BuildingsContractsServicesResource = BuildingsContractsServicesResource;\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class ContractsTransactionsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.HasInstanceResource<ContractsTransactionResource>}\n\t */\n\tvar ContractsTransactionsResource = (function (_super) {\n\t    __extends(ContractsTransactionsResource, _super);\n\t    function ContractsTransactionsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Get contract transaction resource with a given id\n\t         * @param {string} id\n\t         * @returns {ContractsTransactionResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new ContractsTransactionResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        /**\n\t         * Export transaction history into signed pdf.\n\t         * @param {ExportTransactionsParameters} params\n\t         * @returns {Promise<Uint8Array>}\n\t         */\n\t        _this.export = function (params) {\n\t            // transform \"fields\" parameter to comma separated list from array\n\t            CSCoreSDK.EntityUtils.transformArrayParamsToString(params, 'fields');\n\t            // transform Date objects to ISO strings\n\t            CSCoreSDK.EntityUtils.transformDatesToISO(['dateFrom', 'dateTo'], params);\n\t            return _this._client.callApi(_this.getPath() + \"/export\", 'POST', params, null, null, 'arraybuffer');\n\t        };\n\t        return _this;\n\t    }\n\t    return ContractsTransactionsResource;\n\t}(CSCoreSDK.Resource));\n\texports.ContractsTransactionsResource = ContractsTransactionsResource;\n\t/**\n\t * @class ContractsTransactionResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.UpdateEnabled<SecurityTransactionRequest, SecurityTransactionResponse>}\n\t */\n\tvar ContractsTransactionResource = (function (_super) {\n\t    __extends(ContractsTransactionResource, _super);\n\t    function ContractsTransactionResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Allows to add or change a client's personal note and mark/star the transaction as favorite/important for one specific transaction on selected product.\n\t         * @param {SecurityTransactionRequest} payload\n\t         * @returns {Promise<SecurityTransactionResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            payload.id = _this._id;\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return ContractsTransactionResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.ContractsTransactionResource = ContractsTransactionResource;\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar transactions_1 = __webpack_require__(36);\n\t/**\n\t * @class PensionsContractsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Pension>}\n\t * @implements {CSCoreSDK.HasInstanceResource<PensionsContractResource>}\n\t */\n\tvar PensionsContractsResource = (function (_super) {\n\t    __extends(PensionsContractsResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function PensionsContractsResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns list of pension products which belongs to current user. This includes Pension Savings, Supplementary Pension Insurance and Supplementary Pension Savings.\n\t         * @param {PensionParameters=} params\n\t         * @returns {Promise<PensionList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'pensions', params, function (response) {\n\t                response.items.forEach(function (item) {\n\t                    transformDates(item);\n\t                    resourcifyPension(item, _this.withId(item.id));\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Get the resource of pension contract with a given id\n\t         * @param {string} id\n\t         * @returns {PensionsContractResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new PensionsContractResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return PensionsContractsResource;\n\t}(CSCoreSDK.Resource));\n\texports.PensionsContractsResource = PensionsContractsResource;\n\t/**\n\t * @class PensionsContractResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<Pension>}\n\t * @implements {CSCoreSDK.UpdateEnabled<UpdatePensionRequest, UpdatePensionResponse>}\n\t */\n\tvar PensionsContractResource = (function (_super) {\n\t    __extends(PensionsContractResource, _super);\n\t    function PensionsContractResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns detail of pension product which belongs to current user. This can be Pension Saving, Supplementary Pension Insurance and Supplementary Pension Saving.\n\t         * @returns {Promise<Pension>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (response) {\n\t                transformDates(response);\n\t                resourcifyPension(response, _this);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Allows to change a limited set of pension contract-settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process.\n\t         * @param {UpdatePensionRequest} payload\n\t         * @returns {Promise<UpdatePensionResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            payload.id = _this._id;\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                transformDates(response);\n\t                resourcifyPension(response, _this);\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    Object.defineProperty(PensionsContractResource.prototype, \"transactions\", {\n\t        /**\n\t         * Returns transactions resource for pension contract\n\t         * @returns {ContractsTransactionsResource}\n\t         */\n\t        get: function () {\n\t            return new transactions_1.ContractsTransactionsResource(this.getPath() + \"/transactions\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return PensionsContractResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.PensionsContractResource = PensionsContractResource;\n\tfunction transformDates(item) {\n\t    CSCoreSDK.EntityUtils.addDatesFromISO(['signingDate', 'validFrom', 'validTo'], item);\n\t    if (item.productAccount) {\n\t        CSCoreSDK.EntityUtils.addDatesFromISO('date', item.productAccount);\n\t    }\n\t    if (Array.isArray(item.beneficiaries)) {\n\t        item.beneficiaries.forEach(function (x) {\n\t            CSCoreSDK.EntityUtils.addDatesFromISO('birthDate', x);\n\t        });\n\t    }\n\t}\n\tfunction resourcifyPension(pension, pensionReference) {\n\t    pension.get = pensionReference.get;\n\t    pension.update = pensionReference.update;\n\t    pension.transactions = pensionReference.transactions;\n\t}\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar funds_1 = __webpack_require__(39);\n\tvar beneficiaries_1 = __webpack_require__(40);\n\tvar insurees_1 = __webpack_require__(41);\n\tvar payments_1 = __webpack_require__(42);\n\tvar services_1 = __webpack_require__(43);\n\tvar events_1 = __webpack_require__(44);\n\tvar tax_benefits_1 = __webpack_require__(45);\n\tvar strategies_1 = __webpack_require__(46);\n\tvar transfer_1 = __webpack_require__(47);\n\t/**\n\t * @class InsurancesContractsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Insurance>}\n\t * @implements {CSCoreSDK.HasInstanceResource<InsurancesContractResource>}\n\t */\n\tvar InsurancesContractsResource = (function (_super) {\n\t    __extends(InsurancesContractsResource, _super);\n\t    function InsurancesContractsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns list of life insurances for current user.\n\t         * @param {InsurancesParameters=} params\n\t         * @returns {Promise<InsuranceList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'insurances', params, function (response) {\n\t                response.items.forEach(function (item) {\n\t                    transformDates(item);\n\t                    resourcifyInsurance(item, _this.withId(item.id));\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Get the resource of insurance contracts with a given id\n\t         * @param {string} id\n\t         * @returns {InsurancesContractResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new InsurancesContractResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        return _this;\n\t    }\n\t    return InsurancesContractsResource;\n\t}(CSCoreSDK.Resource));\n\texports.InsurancesContractsResource = InsurancesContractsResource;\n\t/**\n\t * @class InsurancesContractResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<InsuranceDetail>}\n\t * @implements {CSCoreSDK.UpdateEnabled<UpdateInsuranceRequest, UpdateInsuranceResponse>}\n\t */\n\tvar InsurancesContractResource = (function (_super) {\n\t    __extends(InsurancesContractResource, _super);\n\t    function InsurancesContractResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns detail of the life insurance\n\t         * @returns {Promise<InsuranceDetail>}\n\t         */\n\t        _this.get = function () {\n\t            return _this._client.callApi(_this.getPath().replace('/my', '/cz/my') + \"/detail\", 'GET').then(function (response) {\n\t                transformDates(response);\n\t                resourcifyInsurance(response, _this);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Allows to change a limited set of insurance settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process.\n\t         * @param {UpdateInsuranceRequest} payload\n\t         * @returns {Promise<UpdateInsuranceResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            payload.id = _this._id;\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                transformDates(response);\n\t                resourcifyInsurance(response, _this);\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    Object.defineProperty(InsurancesContractResource.prototype, \"funds\", {\n\t        /**\n\t         * Returns funds resource for insurance contract\n\t         * @returns {InsurancesContractFundsResource}\n\t         */\n\t        get: function () {\n\t            return new funds_1.InsurancesContractFundsResource(this.getPath() + \"/funds\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(InsurancesContractResource.prototype, \"beneficiaries\", {\n\t        /**\n\t         * Returns beneficiaries resource for insurance contract\n\t         * @returns {InsurancesContractBeneficiariesResource}\n\t         */\n\t        get: function () {\n\t            return new beneficiaries_1.InsurancesContractBeneficiariesResource(this.getPath() + \"/beneficiaries\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(InsurancesContractResource.prototype, \"insurees\", {\n\t        /**\n\t         * Returns insurees resource for insurance contract\n\t         * @returns {InsurancesContractInsureesResource}\n\t         */\n\t        get: function () {\n\t            return new insurees_1.InsurancesContractInsureesResource(this.getPath() + \"/insurees\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(InsurancesContractResource.prototype, \"payments\", {\n\t        /**\n\t         * Returns payments resource for insurance contract\n\t         * @returns {InsurancesContractPaymentsResource}\n\t         */\n\t        get: function () {\n\t            return new payments_1.InsurancesContractPaymentsResource(this.getPath() + \"/payments\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(InsurancesContractResource.prototype, \"services\", {\n\t        /**\n\t         * Returns services resource for insurance contract\n\t         * @returns {InsurancesContractServicesResource}\n\t         */\n\t        get: function () {\n\t            return new services_1.InsurancesContractServicesResource(this.getPath() + \"/services\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(InsurancesContractResource.prototype, \"events\", {\n\t        /**\n\t         * Returns events resource for insurance contract\n\t         * @returns {InsurancesContractEventsResource}\n\t         */\n\t        get: function () {\n\t            return new events_1.InsurancesContractEventsResource(this.getPath() + \"/events\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(InsurancesContractResource.prototype, \"taxBenefits\", {\n\t        /**\n\t         * Returns taxBenefits resource for insurance contract\n\t         * @returns {InsurancesContractTaxBenefitsResource}\n\t         */\n\t        get: function () {\n\t            return new tax_benefits_1.InsurancesContractTaxBenefitsResource(this.getPath() + \"/taxBenefits\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(InsurancesContractResource.prototype, \"strategies\", {\n\t        /**\n\t         * Returns strategies resource for insurance contract\n\t         * @returns {InsurancesContractStrategiesResource}\n\t         */\n\t        get: function () {\n\t            return new strategies_1.InsurancesContractStrategiesResource(this.getPath() + \"/strategies\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(InsurancesContractResource.prototype, \"transfer\", {\n\t        /**\n\t         * Returns transfer resource for insurance contract\n\t         * @returns {InsurancesContractTransferResource}\n\t         */\n\t        get: function () {\n\t            return new transfer_1.InsurancesContractTransferResource(this.getPath() + \"/transfer\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return InsurancesContractResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.InsurancesContractResource = InsurancesContractResource;\n\tfunction transformDates(item) {\n\t    if (item.life) {\n\t        CSCoreSDK.EntityUtils.addDatesFromISO(['contractEndDate', 'contractStartDate', 'contractTerminationDate', 'lastPremiumDate', 'premiumLastPaid'], item.life);\n\t    }\n\t}\n\tfunction resourcifyInsurance(insurance, insuranceReference) {\n\t    insurance.get = insuranceReference.get;\n\t    insurance.update = insuranceReference.update;\n\t    insurance.funds = insuranceReference.funds;\n\t    insurance.beneficiaries = insuranceReference.beneficiaries;\n\t    insurance.insurees = insuranceReference.insurees;\n\t    insurance.payments = insuranceReference.payments;\n\t    insurance.services = insuranceReference.services;\n\t    insurance.events = insuranceReference.events;\n\t    insurance.taxBenefits = insuranceReference.taxBenefits;\n\t    insurance.strategies = insuranceReference.strategies;\n\t    insurance.transfer = insuranceReference.transfer;\n\t}\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class InsurancesContractFundsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<Fund>}\n\t * @implements {CSCoreSDK.UpdateEnabled<UpdateFundRequest, UpdateFundResponse>}\n\t */\n\tvar InsurancesContractFundsResource = (function (_super) {\n\t    __extends(InsurancesContractFundsResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function InsurancesContractFundsResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns detail of distribution of capital value into funds.\n\t         * @returns {Promise<FundList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'funds', null);\n\t        };\n\t        /**\n\t         * Change the distribution of capital value into funds.\n\t         * @param {UpdateFundRequest} payload\n\t         * @returns {Promise<UpdateFundResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return InsurancesContractFundsResource;\n\t}(CSCoreSDK.Resource));\n\texports.InsurancesContractFundsResource = InsurancesContractFundsResource;\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class InsurancesContractBeneficiariesResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<InsuranceBeneficiary>}\n\t * @implements {CSCoreSDK.UpdateEnabled<UpdateInsuranceBeneficiaries, UpdateInsuranceBeneficiaries>}\n\t */\n\tvar InsurancesContractBeneficiariesResource = (function (_super) {\n\t    __extends(InsurancesContractBeneficiariesResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function InsurancesContractBeneficiariesResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns list of beneficiaries related to the insurance contract.\n\t         * @returns {Promise<InsuranceBeneficiaryList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'beneficiaries', null).then(function (response) {\n\t                CSCoreSDK.EntityUtils.addDatesToItems(['birthdate'], response);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Change beneficiaries and distribution of insurance among beneficiaries.\n\t         * @param {UpdateInsuranceBeneficiaries} payload\n\t         * @returns {Promise<UpdateInsuranceBeneficiaries>}\n\t         */\n\t        _this.update = function (payload) {\n\t            if (payload && Array.isArray(payload.beneficiaries)) {\n\t                payload.beneficiaries.forEach(function (x) {\n\t                    CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['birthdate'], x);\n\t                });\n\t            }\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                CSCoreSDK.EntityUtils.addDatesToItems(['birthdate'], response, 'beneficiaries');\n\t                return response;\n\t            });\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return InsurancesContractBeneficiariesResource;\n\t}(CSCoreSDK.Resource));\n\texports.InsurancesContractBeneficiariesResource = InsurancesContractBeneficiariesResource;\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class InsurancesContractInsureesResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<Insuree>}\n\t */\n\tvar InsurancesContractInsureesResource = (function (_super) {\n\t    __extends(InsurancesContractInsureesResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function InsurancesContractInsureesResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns list of insurees related to the insurance contract.\n\t         * @returns {Promise<InsureeList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'insurees');\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return InsurancesContractInsureesResource;\n\t}(CSCoreSDK.Resource));\n\texports.InsurancesContractInsureesResource = InsurancesContractInsureesResource;\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class InsurancesContractPaymentsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<ContractPayment>}\n\t */\n\tvar InsurancesContractPaymentsResource = (function (_super) {\n\t    __extends(InsurancesContractPaymentsResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function InsurancesContractPaymentsResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns list of life insurance payments. List contains one upcoming payment and payments history for 2 years.\n\t         * @returns {Promise<ContractPaymentList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'payments').then(function (response) {\n\t                CSCoreSDK.EntityUtils.addDatesToItems(['transactionDate', 'instructionFrom', 'instructionTo'], response);\n\t                return response;\n\t            });\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return InsurancesContractPaymentsResource;\n\t}(CSCoreSDK.Resource));\n\texports.InsurancesContractPaymentsResource = InsurancesContractPaymentsResource;\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class InsurancesContractServicesResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<InsuranceService>}\n\t */\n\tvar InsurancesContractServicesResource = (function (_super) {\n\t    __extends(InsurancesContractServicesResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function InsurancesContractServicesResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns list of services for the life insurance\n\t         * @returns {Promise<InsuranceServiceList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'services').then(function (response) {\n\t                response.items.forEach(function (x) {\n\t                    transformDates(x);\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Allows activation of risk sports insurance.\n\t         * @param {RiskSportsUpdateRequest} payload\n\t         * @returns {Promise<ActivateRiskSportsResponse>}\n\t         */\n\t        _this.activateRiskSports = function (payload) {\n\t            CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['dateFrom', 'dateTo'], payload);\n\t            return CSCoreSDK.ResourceUtils.CallUpdateWithSuffix(_this, 'riskSportsActivation', payload).then(function (response) {\n\t                transformDates(response);\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Allows deactivation of risk sports insurance.\n\t         * @param {RiskSportsUpdateRequest} payload\n\t         * @returns {Promise<DeactivateRiskSportsResponse>}\n\t         */\n\t        _this.deactivateRiskSports = function (payload) {\n\t            CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['dateFrom', 'dateTo'], payload);\n\t            return CSCoreSDK.ResourceUtils.CallUpdateWithSuffix(_this, 'riskSportsDeactivation', payload).then(function (response) {\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return InsurancesContractServicesResource;\n\t}(CSCoreSDK.Resource));\n\texports.InsurancesContractServicesResource = InsurancesContractServicesResource;\n\tfunction transformDates(response) {\n\t    CSCoreSDK.EntityUtils.addDatesFromISO(['dateFrom', 'dateTo'], response);\n\t}\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class InsurancesContractEventsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<ContractEvent>}\n\t */\n\tvar InsurancesContractEventsResource = (function (_super) {\n\t    __extends(InsurancesContractEventsResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function InsurancesContractEventsResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns list of events for the life insurance\n\t         * @returns {Promise<ContractEventList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'events').then(function (response) {\n\t                response.items.forEach(function (item) {\n\t                    CSCoreSDK.EntityUtils.addDatesFromISO(['substateDate', 'processingDate', 'creationDate'], item);\n\t                    if (item.indemnities && Array.isArray(item.indemnities)) {\n\t                        item.indemnities.forEach(function (indemnity) {\n\t                            CSCoreSDK.EntityUtils.addDatesFromISO('paymentDate', indemnity);\n\t                        });\n\t                    }\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return InsurancesContractEventsResource;\n\t}(CSCoreSDK.Resource));\n\texports.InsurancesContractEventsResource = InsurancesContractEventsResource;\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class InsurancesContractTaxBenefitsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.GetEnabled<TaxBenefit>}\n\t */\n\tvar InsurancesContractTaxBenefitsResource = (function (_super) {\n\t    __extends(InsurancesContractTaxBenefitsResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function InsurancesContractTaxBenefitsResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns tax benefits for the life insurance\n\t         * @returns {Promise<TaxBenefit>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null);\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return InsurancesContractTaxBenefitsResource;\n\t}(CSCoreSDK.Resource));\n\texports.InsurancesContractTaxBenefitsResource = InsurancesContractTaxBenefitsResource;\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class InsurancesContractStrategiesResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<ContractStrategy>}\n\t */\n\tvar InsurancesContractStrategiesResource = (function (_super) {\n\t    __extends(InsurancesContractStrategiesResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function InsurancesContractStrategiesResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns list of strategies with corresponsing funds allocation for the life insurance\n\t         * @returns {Promise<ContractStrategyList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'strategies');\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return InsurancesContractStrategiesResource;\n\t}(CSCoreSDK.Resource));\n\texports.InsurancesContractStrategiesResource = InsurancesContractStrategiesResource;\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class InsurancesContractTransferResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.UpdateEnabled<UpdateContractTrasferRequest, UpdateContractTrasferResponse>}\n\t */\n\tvar InsurancesContractTransferResource = (function (_super) {\n\t    __extends(InsurancesContractTransferResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function InsurancesContractTransferResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Creates insurance transfer - premium payment, extra deposit or recommended deposit.\n\t         * @param {UpdateContractTrasferRequest} payload\n\t         * @returns {Promise<UpdateContractTrasferResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath());\n\t                return response;\n\t            });\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return InsurancesContractTransferResource;\n\t}(CSCoreSDK.Resource));\n\texports.InsurancesContractTransferResource = InsurancesContractTransferResource;\n\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class LoyaltyContractsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.GetEnabled<Loyalty>}\n\t */\n\tvar LoyaltyContractsResource = (function (_super) {\n\t    __extends(LoyaltyContractsResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function LoyaltyContractsResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Get data about iBod account of the current client.\n\t         * @returns {Promise<Loyalty>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (response) {\n\t                CSCoreSDK.EntityUtils.addDatesFromISO('exportDate', response);\n\t                return response;\n\t            });\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return LoyaltyContractsResource;\n\t}(CSCoreSDK.Resource));\n\texports.LoyaltyContractsResource = LoyaltyContractsResource;\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class ServicesResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Service>}\n\t */\n\tvar ServicesResource = (function (_super) {\n\t    __extends(ServicesResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function ServicesResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns possibly empty list of services for current user. This resource represents only services which are not bound to any product.\n\t         * @param {ServiceParameters=} params\n\t         * @returns {Promise<ServiceList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'services', params, function (response) {\n\t                CSCoreSDK.EntityUtils.addDatesToItems(['dateFrom', 'dateTo'], response);\n\t                return response;\n\t            });\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return ServicesResource;\n\t}(CSCoreSDK.Resource));\n\texports.ServicesResource = ServicesResource;\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar mandatory_1 = __webpack_require__(51);\n\tvar attachments_1 = __webpack_require__(52);\n\t/**\n\t * @class MessagesResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Message>}\n\t * @implements {CSCoreSDK.HasInstanceResource<MessageResource>}\n\t */\n\tvar MessagesResource = (function (_super) {\n\t    __extends(MessagesResource, _super);\n\t    function MessagesResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Get all messages for current user generated by bank itself. Message can be read or unread, mandatory and non-mandatory. This call might return different messages based on appId of the caller (for example, some messages might be specific to an application).\n\t         * @param {MessagesParameters=} params\n\t         * @returns {Promise<MessageList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'messages', params, function (response) {\n\t                response.items.forEach(function (item) {\n\t                    transformDates(item);\n\t                    resourcifyMessages(item, _this.withId(item.id));\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Get the resource of message with a given id\n\t         * @param {string} id\n\t         * @returns {MessageResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new MessageResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        return _this;\n\t    }\n\t    Object.defineProperty(MessagesResource.prototype, \"mandatory\", {\n\t        /**\n\t         * Get messages mandatory resource\n\t         * @returns {MessagesMandatoryResource}\n\t         */\n\t        get: function () {\n\t            return new mandatory_1.MessagesMandatoryResource(this.getPath() + \"/mandatory\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return MessagesResource;\n\t}(CSCoreSDK.Resource));\n\texports.MessagesResource = MessagesResource;\n\t/**\n\t * @class MessageResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<Message>}\n\t * @implements {CSCoreSDK.UpdateEnabled<UpdateMessageRequest, NetbankingEmptyResponse>}\n\t * @implements {CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse>}\n\t */\n\tvar MessageResource = (function (_super) {\n\t    __extends(MessageResource, _super);\n\t    function MessageResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Get one specific messages for current user generated by bank itself. Message can be read or unread, mandatory and non-mandatory.\n\t         * @returns {Promise<Message>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (response) {\n\t                transformDates(response);\n\t                resourcifyMessages(response, _this);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * After message has been read by user it should be marked accordingly by this endpoint.\n\t         * @param {UpdateMessageRequest} payload\n\t         * @returns {Promise<NetbankingEmptyResponse>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload);\n\t        };\n\t        /**\n\t         * Resource for deleting message by its identifier. Only read messages can be deleted.\n\t         * @returns {Promise<NetbankingEmptyResponse>}\n\t         */\n\t        _this.delete = function () {\n\t            return CSCoreSDK.ResourceUtils.CallDelete(_this, null);\n\t        };\n\t        return _this;\n\t    }\n\t    Object.defineProperty(MessageResource.prototype, \"attachments\", {\n\t        /**\n\t         * Get messages attachments resource\n\t         * @returns {MessageAttachmentsResource}\n\t         */\n\t        get: function () {\n\t            return new attachments_1.MessageAttachmentsResource(this.getPath() + \"/attachments\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return MessageResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.MessageResource = MessageResource;\n\tfunction transformDates(item) {\n\t    CSCoreSDK.EntityUtils.addDatesFromISO(['date'], item);\n\t}\n\tfunction resourcifyMessages(message, messageReference) {\n\t    message.get = messageReference.get;\n\t    message.update = messageReference.update;\n\t    message.delete = messageReference.delete;\n\t    // Convenience download\n\t}\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class MessagesMandatoryResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<Message>}\n\t */\n\tvar MessagesMandatoryResource = (function (_super) {\n\t    __extends(MessagesMandatoryResource, _super);\n\t    function MessagesMandatoryResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns all mandatory messages. This call might return different messages based on appId of the caller (for example, some messages might be specific to an application). Which messages can be seen by which application can be configured on the presto server side.\n\t         * @return {Promise<MandatoryMessageList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'messages').then(function (response) {\n\t                CSCoreSDK.EntityUtils.addDatesToItems(['date'], response);\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return MessagesMandatoryResource;\n\t}(CSCoreSDK.Resource));\n\texports.MessagesMandatoryResource = MessagesMandatoryResource;\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class MessageAttachmentsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.HasInstanceResource<MessageAttachmentResource>}\n\t */\n\tvar MessageAttachmentsResource = (function (_super) {\n\t    __extends(MessageAttachmentsResource, _super);\n\t    function MessageAttachmentsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Get the resource of attachments\n\t         * @param {string} id\n\t         * @returns {MessageAttachmentResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new MessageAttachmentResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        return _this;\n\t    }\n\t    return MessageAttachmentsResource;\n\t}(CSCoreSDK.Resource));\n\texports.MessageAttachmentsResource = MessageAttachmentsResource;\n\t/**\n\t * @class MessageAttachmentResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t */\n\tvar MessageAttachmentResource = (function (_super) {\n\t    __extends(MessageAttachmentResource, _super);\n\t    function MessageAttachmentResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Downloads attachment file. The binary representation of an attachment file, with a “Content-Disposition” header of type attachment (including the filename), in order to instruct the browser to open a save dialog.\n\t         * @returns {Promise<Uint8Array>}\n\t         */\n\t        _this.download = function () {\n\t            return CSCoreSDK.ResourceUtils.CallDownload(_this, null, 'POST');\n\t        };\n\t        return _this;\n\t    }\n\t    return MessageAttachmentResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.MessageAttachmentResource = MessageAttachmentResource;\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class TemplateResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Template>}\n\t * @implements {CSCoreSDK.HasInstanceResource<TemplateResource>}\n\t */\n\tvar TemplatesResource = (function (_super) {\n\t    __extends(TemplatesResource, _super);\n\t    function TemplatesResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * List of payment templates for current user.\n\t         * @param {TemplatesParameters=} params\n\t         * @returns {Promise<TemplateList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'templates', params, function (response) {\n\t                response.items.forEach(function (item) {\n\t                    resourcifyTemplates(item, _this.withId(item.id));\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Get resource for template with a given id\n\t         * @param {string} id\n\t         * @returns {TemplateResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new TemplateResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        return _this;\n\t    }\n\t    return TemplatesResource;\n\t}(CSCoreSDK.Resource));\n\texports.TemplatesResource = TemplatesResource;\n\t/**\n\t * @class TemplateResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<Template>}\n\t */\n\tvar TemplateResource = (function (_super) {\n\t    __extends(TemplateResource, _super);\n\t    function TemplateResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Get payment template detail\n\t         * @returns {Promise<Template>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (response) {\n\t                resourcifyTemplates(response, _this);\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return TemplateResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.TemplateResource = TemplateResource;\n\tfunction resourcifyTemplates(template, templateReference) {\n\t    template.get = templateReference.get;\n\t}\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class PhoneNumbersResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<PhoneNumber>}\n\t * @implements {CSCoreSDK.CreateEnabled<PhoneNumberRequest, PhoneNumber>}\n\t * @implements {CSCoreSDK.HasInstanceResource<PhoneNumberResource>}\n\t */\n\tvar PhoneNumbersResource = (function (_super) {\n\t    __extends(PhoneNumbersResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function PhoneNumbersResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns list of phone numbers\n\t         * @returns {Promise<PhoneNumberList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'phoneNumbers').then(function (response) {\n\t                response.items.forEach(function (x) {\n\t                    resourcifyPhoneNumbers(x, _this.withId(x.id));\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Creates new phone number\n\t         * @param {PhoneNumberRequest} payload\n\t         * @returns {Promise<PhoneNumber>}\n\t         */\n\t        _this.create = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallCreate(_this, payload).then(function (response) {\n\t                resourcifyPhoneNumbers(response, _this.withId(response.id));\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Get single phone number with a given id\n\t         * @param {string} id\n\t         * @returns {PhoneNumberResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new PhoneNumberResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return PhoneNumbersResource;\n\t}(CSCoreSDK.Resource));\n\texports.PhoneNumbersResource = PhoneNumbersResource;\n\t/**\n\t * @class PhoneNumberResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.UpdateEnabled<PhoneNumberRequest, PhoneNumber>}\n\t * @implements {CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse>}\n\t */\n\tvar PhoneNumberResource = (function (_super) {\n\t    __extends(PhoneNumberResource, _super);\n\t    function PhoneNumberResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Updates phone number\n\t         * @param {PhoneNumberRequest} payload\n\t         * @returns {Promise<PhoneNumber>}\n\t         */\n\t        _this.update = function (payload) {\n\t            payload.id = _this._id;\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                resourcifyPhoneNumbers(response, _this);\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Deletes phone number\n\t         * @returns {Promise<NetbankingEmptyResponse>}\n\t         */\n\t        _this.delete = function () {\n\t            return CSCoreSDK.ResourceUtils.CallDelete(_this, null);\n\t        };\n\t        return _this;\n\t    }\n\t    return PhoneNumberResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.PhoneNumberResource = PhoneNumberResource;\n\tfunction resourcifyPhoneNumbers(phoneNumber, phoneNumberReference) {\n\t    phoneNumber.update = phoneNumberReference.update;\n\t    phoneNumber.delete = phoneNumberReference.delete;\n\t}\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class BudgetsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<Budget>}\n\t */\n\tvar BudgetsResource = (function (_super) {\n\t    __extends(BudgetsResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function BudgetsResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns list of user's tracked categories and its limits.\n\t         * @returns {Promise<BudgetList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'budgets');\n\t        };\n\t        /**\n\t         * Set new value of tracked categories.\n\t         * @param {UpdateBudgets} payload\n\t         * @returns {Promise<UpdateBudgets>}\n\t         */\n\t        _this.update = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload);\n\t        };\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return BudgetsResource;\n\t}(CSCoreSDK.Resource));\n\texports.BudgetsResource = BudgetsResource;\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class GoalsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<Goal>}\n\t * @implements {CSCoreSDK.UpdateEnabled<UpdateGoal, UpdateGoal>}\n\t */\n\tvar GoalsResource = (function (_super) {\n\t    __extends(GoalsResource, _super);\n\t    /**\n\t     * @param {string} basePath\n\t     * @param {CSCoreSDK.WebApiClient} client\n\t     */\n\t    function GoalsResource(basePath, client) {\n\t        var _this = _super.call(this, basePath, client) || this;\n\t        /**\n\t         * Returns list of user's saving goals except of completed ones. In price, only CZK currency is supported. If user has never set any goal, the response is empty.\n\t         * @returns {Promise<GoalList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'goals').then(function (response) {\n\t                response.items.forEach(function (item) {\n\t                    transformDates(item);\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Set new value of goals. In price, only CZK currency is supported. If completed flag is not present, false value is supposed. All goals of given client are replaced - old ones (except of completed) are deleted and these new specified are inserted.\n\t         * @param {UpdateGoal} payload\n\t         * @returns {Promise<UpdateGoal>}\n\t         */\n\t        _this.update = function (payload) {\n\t            if (Array.isArray(payload.goals)) {\n\t                payload.goals.forEach(function (goal) {\n\t                    if (goal.deadline && Object.prototype.toString.call(goal.deadline) === '[object Date]') {\n\t                        goal.deadline = goal.deadline.getTime();\n\t                    }\n\t                });\n\t            }\n\t            return CSCoreSDK.ResourceUtils.CallUpdate(_this, payload).then(function (response) {\n\t                response.goals.forEach(function (item) {\n\t                    transformDates(item);\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        // insert 'cz' resource into the resource's path because the api requires it in some resources\n\t        _this._path = _this.getPath().replace('/my', '/cz/my');\n\t        return _this;\n\t    }\n\t    return GoalsResource;\n\t}(CSCoreSDK.Resource));\n\texports.GoalsResource = GoalsResource;\n\tfunction transformDates(item) {\n\t    if (item.deadline) {\n\t        item.deadline = new Date(item.deadline);\n\t    }\n\t}\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class PromotionsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<Promotion>}\n\t * @implements {CSCoreSDK.CreateEnabled<CreatePromotionRequest, CreatePromotionResponse>}\n\t */\n\tvar PromotionsResource = (function (_super) {\n\t    __extends(PromotionsResource, _super);\n\t    function PromotionsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Returns promotion list for the current user\n\t         * @returns {Promise<PromotionList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'promotions');\n\t        };\n\t        /**\n\t         * Hide specified promotion\n\t         * @param {CreatePromotionRequest} payload\n\t         * @returns {Promise<CreatePromotionResponse>}\n\t         */\n\t        _this.create = function (payload) {\n\t            return _this._client.callApi(_this.getPath().replace('promotions', 'actions'), 'POST', null, payload);\n\t        };\n\t        return _this;\n\t    }\n\t    return PromotionsResource;\n\t}(CSCoreSDK.Resource));\n\texports.PromotionsResource = PromotionsResource;\n\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class AuthorizationLimitsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ParametrizedListEnabled<AuthorizationLimitsParams, AuthorizationLimit>}\n\t * @implements {CSCoreSDK.HasInstanceResource<AuthorizationLimitResource>}\n\t */\n\tvar AuthorizationLimitsResource = (function (_super) {\n\t    __extends(AuthorizationLimitsResource, _super);\n\t    function AuthorizationLimitsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Return all user local specific payment order entry limits for for all user active authorization methods and channels/applications used in country.\n\t         * @param {AuthorizationLimitsParams=} params\n\t         * @returns {Promise<AuthorizationLimitList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, 'limits', params).then(function (response) {\n\t                response.items.forEach(function (x) {\n\t                    resourcifyLimits(x, _this.withId(x.id));\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Get the resource of authorization limit with a given id\n\t         * @param {string} id\n\t         * @returns {AuthorizationLimitResource}\n\t         */\n\t        _this.withId = function (id) {\n\t            return new AuthorizationLimitResource(id, _this.getPath(), _this.getClient());\n\t        };\n\t        return _this;\n\t    }\n\t    return AuthorizationLimitsResource;\n\t}(CSCoreSDK.Resource));\n\texports.AuthorizationLimitsResource = AuthorizationLimitsResource;\n\t/**\n\t * @class AuthorizationLimitResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<AuthorizationLimit>}\n\t */\n\tvar AuthorizationLimitResource = (function (_super) {\n\t    __extends(AuthorizationLimitResource, _super);\n\t    function AuthorizationLimitResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Return local specific payment order entry limits valid for combination of user, authorization method and used channel/application. For example user could define different limits for TAC authorization via George and mobile applications.\n\t         * @returns {Promise<AuthorizationLimit>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (response) {\n\t                resourcifyLimits(response, _this);\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return AuthorizationLimitResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.AuthorizationLimitResource = AuthorizationLimitResource;\n\tfunction resourcifyLimits(limit, limitReference) {\n\t    limit.get = limitReference.get;\n\t}\n\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class AuthorizationTokenResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse>}\n\t */\n\tvar AuthorizationTokenResource = (function (_super) {\n\t    __extends(AuthorizationTokenResource, _super);\n\t    function AuthorizationTokenResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Invalidate authorization token.\n\t         * @returns {Promise<NetbankingEmptyResponse>}\n\t         */\n\t        _this.delete = function () {\n\t            return _this._client.callApi(_this.getPath().replace('/my', ''), 'DELETE');\n\t        };\n\t        return _this;\n\t    }\n\t    return AuthorizationTokenResource;\n\t}(CSCoreSDK.Resource));\n\texports.AuthorizationTokenResource = AuthorizationTokenResource;\n\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class BundlesResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.CreateEnabled<BundleCreateRequest, BundleResponse>}\n\t */\n\tvar BundlesResource = (function (_super) {\n\t    __extends(BundlesResource, _super);\n\t    function BundlesResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * @param {BundleCreateRequest} payload\n\t         * @returns {Promise<BundleResponse>}\n\t         */\n\t        _this.create = function (payload) {\n\t            return CSCoreSDK.ResourceUtils.CallCreate(_this, payload).then(function (response) {\n\t                CSCoreSDK.SigningUtils.createSigningObject(response, _this.getClient(), _this.getPath() + \"/\" + response.id);\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return BundlesResource;\n\t}(CSCoreSDK.Resource));\n\texports.BundlesResource = BundlesResource;\n\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// cs-netbanking-sdk.node.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 843825123e754a5ecb61","/// <reference types=\"es6-promise\" />\n\nimport * as CSCoreSDK from 'cs-core-sdk';\nimport { AccountsResource } from './accounts/accounts';\nimport { ProfileResource } from './profile/profile';\nimport { CardsResource } from './cards/cards';\nimport { OrdersResource } from './orders/orders';\nimport { SecuritiesResource } from './securities/securities';\nimport { SettingsResource } from './settings/settings';\nimport { ContactsResource } from './contacts/contacts';\nimport { PluginsResource } from './plugins/plugins';\nimport { ContractsResource } from './contracts/contracts';\nimport { ServicesResource } from './services/services';\nimport { MessagesResource } from './messages/messages';\nimport { TemplatesResource } from './templates/templates';\nimport { PhoneNumbersResource } from './phone-numbers/phone-numbers';\nimport { BudgetsResource } from './budgets/budgets';\nimport { GoalsResource } from './goals/goals';\nimport { PromotionsResource } from './promotions/promotions';\nimport { AuthorizationLimitsResource } from './authorization-limits/authorization-limits';\nimport { AuthorizationTokenResource } from './authorization-token/authorization-token';\nimport { BundlesResource } from './bundles/bundles';\n\nvar sharedClient: NetbankingClient = null;\n\n/**\n * Returns the singleton NetbankingClient\n * @returns {NetbankingClient}\n */\nexport function getClient(): NetbankingClient {\n  if (sharedClient === null) {\n    return new NetbankingClient(CSCoreSDK.config.copy(), CSCoreSDK.sharedContext);\n  }\n\n  return sharedClient;\n}\n\n/**\n * Netbanking client \n * @extends {CSCoreSDK.WebApiClient}\n */\nexport class NetbankingClient extends CSCoreSDK.WebApiClient {\n\n  /**\n   * Creates new instance of NetbankingClient\n   * \n   * @param {WebApiConfiguration} config object that configures this client\n   * @param {WebApiContext} context object that allows for data sharing between clients\n   */\n  constructor(config: CSCoreSDK.WebApiConfiguration, context: CSCoreSDK.WebApiContext) {\n    super(config, '/api/v3/netbanking/my');\n    this.sharedContext = context;\n  }\n\n  /**\n   * List all accounts and get other information like balance, services, statements etc.\n   * @returns {AccountsResource}\n   */\n  get accounts(): AccountsResource {\n    return new AccountsResource(this.getPath() + '/accounts', this);\n  }\n\n  /**\n   * Get information about the current user's profile and past logins.\n   * @returns {ProfileResource}\n   */\n  get profile(): ProfileResource {\n    return new ProfileResource(this.getPath() + '/profile', this);\n  }\n\n  /**\n   * List all cards and other information like delivery, transactions, limits etc. \n   * @returns {CardsResource}\n   */\n  get cards(): CardsResource {\n    return new CardsResource(this.getPath() + '/cards', this);\n  }\n\n  /**\n   * List, update and get payments, booking date or create and update domestic payments. \n   * @returns {OrdersResource}\n   */\n  get orders(): OrdersResource {\n    return new OrdersResource(this.getPath() + '/orders', this);\n  }\n\n  /**\n   * @returns {SecuritiesResource}\n   */\n  get securities(): SecuritiesResource {\n    return new SecuritiesResource(this.getPath() + '/securities', this);\n  }\n\n  /**\n   * @returns {SettingsResource}\n   */\n  get settings(): SettingsResource {\n    return new SettingsResource(`${this.getPath()}/settings`, this);\n  }\n\n  /**\n   * @returns {ContactsResource}\n   */\n  get contacts(): ContactsResource {\n    return new ContactsResource(`${this.getPath()}/contacts`, this);\n  }\n\n  /**\n   * @returns {PluginsResource}\n   */\n  get plugins(): PluginsResource {\n    return new PluginsResource(`${this.getPath()}/plugins`, this);\n  }\n\n  /**\n   * @returns {ContractsResource}\n   */\n  get contracts(): ContractsResource {\n    return new ContractsResource(`${this.getPath()}/contracts`, this);\n  }\n\n  /**\n   * @returns {ServicesResource}\n   */\n  get services(): ServicesResource {\n    return new ServicesResource(`${this.getPath()}/services`, this);\n  }\n\n  /**\n   * @returns {MessagesResource}\n   */\n  get messages(): MessagesResource {\n    return new MessagesResource(`${this.getPath()}/messages`, this);\n  }\n\n  /**\n   * @returns {TemplatesResource}\n   */\n  get templates(): TemplatesResource {\n    return new TemplatesResource(`${this.getPath()}/templates`, this);\n  }\n\n  /**\n   * @returns {PhoneNumbersResource}\n   */\n  get phoneNumbers(): PhoneNumbersResource {\n    return new PhoneNumbersResource(`${this.getPath()}/phone-numbers`, this);\n  }\n\n  /**\n   * @returns {BudgetsResource}\n   */\n  get budgets(): BudgetsResource {\n    return new BudgetsResource(`${this.getPath()}/budgets`, this);\n  }\n\n  /**\n   * @returns {GoalsResource}\n   */\n  get goals(): GoalsResource {\n    return new GoalsResource(`${this.getPath()}/goals`, this);\n  }\n\n  /**\n   * @returns {PromotionsResource}\n   */\n  get promotions(): PromotionsResource {\n    return new PromotionsResource(`${this.getPath()}/promotions`, this);\n  }\n\n  /**\n   * @returns {AuthorizationLimitsResource}\n   */\n  get authorizationLimits(): AuthorizationLimitsResource {\n    return new AuthorizationLimitsResource(`${this.getPath()}/authorizationLimits`, this);\n  }\n\n  /**\n   * @returns {AuthorizationTokenResource}\n   */\n  get authorizationToken(): AuthorizationTokenResource {\n    return new AuthorizationTokenResource(`${this.getPath()}/auth/token/invalidate`, this);\n  }\n\n  /**\n   * @returns {BundlesResource}\n   */\n  get bundles(): BundlesResource {\n    return new BundlesResource(`${this.getPath()}/bundles`, this);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/netbanking.ts","module.exports = require(\"cs-core-sdk\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cs-core-sdk\"\n// module id = 1\n// module chunks = 0","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Signable, AccountNumber, Amount, NetbankingParameters } from '../common';\nimport { AccountBalanceResource } from './balance';\nimport { AccountServicesResource } from './services';\nimport { AccountReservationsResource } from './reservations';\nimport { AccountRepaymentsResource } from './repayments';\nimport { AccountStatementsResource } from './statements';\nimport { SubAccountsResource } from './subAccounts';\nimport { AccountTransactionsResource } from './transactions';\nimport { AccountTransferResource } from './transfer';\nimport { AccountStandingOrdersResource } from './standing-orders';\nimport { AccountDirectDebitsResource } from './direct-debits';\n\n/**\n * @class AccountsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.HasInstanceResource<AccountResource>}\n * @implements {CSCoreSDK.PaginatedListEnabled<MainAccount>}\n */\nexport class AccountsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.HasInstanceResource<AccountResource>, CSCoreSDK.PaginatedListEnabled<MainAccount> {\n\n  /**\n   * List all accounts\n   * @param {AccountParameters=} params\n   * @returns {Promise<AccountList>}\n   */\n  list = (params?: AccountParameters): Promise<AccountList> => {\n\n    // transform \"sort\" and \"order\" parameters to comma separated list from array\n    CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'accounts', params, response => {\n      response.items.forEach(item => {\n\n        // add convenient methods\n        resourcifyListing(<MainAccount>item, this.withId((<MainAccount>item).id), true);\n\n        // transform ISO dates to native Date objects\n        transformResponse(<MainAccount>item);\n      });\n      return response;\n    });\n  }\n\n  /**\n   * Get the detail of the account with a given id\n   * @param {string|number} id\n   * @returns {AccountResource}\n   */\n  withId = (id: string | number): AccountResource => {\n    return new AccountResource(id, this.getPath(), this._client);\n  }\n}\n\n/**\n * Get detail of the individual account and additional information about it \n * @class AccountResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<MainAccount>}\n * @implements {CSCoreSDK.UpdateEnabled<ChangeAccountSettingsRequest, ChangeAccountSettingsResponse>}\n */\nexport class AccountResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<MainAccount>, CSCoreSDK.UpdateEnabled<ChangeAccountSettingsRequest, ChangeAccountSettingsResponse> {\n\n  /**\n   * Get account detail\n   * @returns {Promise<MainAccount>}\n   */\n  get = (): Promise<MainAccount> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n\n      // add convenienxce methods\n      resourcifyListing(<MainAccount>response, this, false);\n\n      // transform ISO dates to native Date objects\n      transformResponse(<MainAccount>response);\n\n      return response;\n    });\n  }\n\n  /**\n   * Update account's settings.\n   * @param {ChangeAccountSettingsRequest} payload\n   * @returns {Promise<ChangeAccountSettingsResponse>}\n   */\n  update = (payload: ChangeAccountSettingsRequest): Promise<ChangeAccountSettingsResponse> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n      // add convenience methods\n      resourcifyListing(<MainAccount>response, this, false);\n\n      // transform ISO dates to native Date objects\n      transformResponse(<MainAccount>response);\n\n      return response;\n    });\n  }\n\n  /**\n   * Get information about the account's balance\n   * @returns {AccountBalanceResource}\n   */\n  get balance(): AccountBalanceResource {\n    return new AccountBalanceResource(this.getPath() + '/balance', this._client);\n  }\n\n  /**\n   * Get information about the account's services\n   * @returns {AccountServicesResource}\n   */\n  get services(): AccountServicesResource {\n    return new AccountServicesResource(this.getPath() + '/services', this._client);\n  }\n\n  /**\n   * Get information about the account's reservations\n   * @returns {AccountReservationsResource}\n   */\n  get reservations(): AccountReservationsResource {\n    return new AccountReservationsResource(this.getPath() + '/reservations', this._client);\n  }\n\n  /**\n   * Get information about the account's repayments\n   * @returns {AccountRepaymentsResource}\n   */\n  get repayments(): AccountRepaymentsResource {\n    return new AccountRepaymentsResource(this.getPath() + '/repayments', this._client);\n  }\n\n  /**\n   * Get information about the account's statements\n   * @returns {AccountStatementsResource}\n   */\n  get statements(): AccountStatementsResource {\n    return new AccountStatementsResource(this.getPath() + '/statements', this._client);\n  }\n\n  /**\n   * Get information about the account's subaccounts\n   * @returns {SubAccountsResource}\n   */\n  get subAccounts(): SubAccountsResource {\n    return new SubAccountsResource(this.getPath() + '/subaccounts', this._client);\n  }\n\n  /**\n   * Get information about the account's transactions\n   * @returns {AccountTransactionsResource}\n   */\n  get transactions(): AccountTransactionsResource {\n    return new AccountTransactionsResource(this.getPath() + '/transactions', this._client);\n  }\n\n  /**\n   * Revolve a loan\n   * @returns {AccountTransferResource}\n   */\n  get transfer(): AccountTransferResource {\n    return new AccountTransferResource(this.getPath() + '/transfer', this._client);\n  }\n\n  /**\n   * @returns {AccountStandingOrdersResource}\n   */\n  get standingOrders(): AccountStandingOrdersResource {\n    return new AccountStandingOrdersResource(this.getPath() + '/standingorders', this.getClient());\n  }\n\n  /**\n   * @returns {AccountDirectDebitsResource}\n   */\n  get directDebits(): AccountDirectDebitsResource {\n    return new AccountDirectDebitsResource(this.getPath() + '/directdebits', this.getClient());\n  }\n}\n\nfunction resourcifyListing(accountListing: MainAccount, account: AccountResource, isFromList: boolean): void {\n  if (isFromList) {\n    accountListing.get = account.get;\n  }\n  accountListing.update = account.update;\n  accountListing.services = account.services;\n  accountListing.transactions = account.transactions;\n  accountListing.reservations = account.reservations;\n  accountListing.transfer = account.transfer;\n  accountListing.statements = account.statements;\n  accountListing.repayments = account.repayments;\n  accountListing.standingOrders = account.standingOrders;\n  accountListing.directDebits = account.directDebits;\n}\n\nfunction transformResponse(accountListing) {\n  if (accountListing.saving) {\n    CSCoreSDK.EntityUtils.addDatesFromISO('nextProlongation', accountListing.saving);\n  }\n  if (accountListing.loan) {\n    CSCoreSDK.EntityUtils.addDatesFromISO(['maturityDate', 'drawdownToDate', 'installmentDay', 'nextRateDate'], accountListing.loan);\n  }\n  if (accountListing.subaccounts) {\n    CSCoreSDK.EntityUtils.addDatesToItems('overdraftDueDate', accountListing, 'subaccounts');\n  }\n  CSCoreSDK.EntityUtils.addDatesFromISO('overdraftDueDate', accountListing);\n}\n\n/**\n * @interface AccountList\n * @extends {CSCoreSDK.PaginatedListResponse<MainAccount>}\n */\nexport interface AccountList extends CSCoreSDK.PaginatedListResponse<MainAccount> { }\n\n/**\n * @interface MainAccount\n * @extends {Account}\n */\nexport interface MainAccount extends Account {\n\n  /**\n  * User defined account name. Max. 50 characters\n  */\n  alias?: string;\n\n  /**\n  * Account description. Currently account owner name is returned.\n  */\n  description?: string;\n\n  /**\n  * Disposable account balance\n  */\n  disposable?: Amount;\n\n  /**\n  * Overdraft amount for account\n  */\n  overdraft?: OverdraftAmount;\n\n  /**\n  * Due date of overdraft. Only for overdrafts where automatic prolongation is not set.\n  */\n  overdraftDueDate?: Date;\n\n  /**\n  * Array of flags\n  */\n  flags?: [string];\n\n  /**\n  * Account's subaccounts\n  */\n  subaccounts?: [SubAccount];\n\n  /**\n  * Basic debit Interest rate, used for Loan and Mortgage account. Value in percentage, e.g. 11,5 will be displayed as 11,5 %.\n  */\n  debitInterestRate?: number;\n\n  /**\n  * For loans (not mortgages) this is interest rate which apply when repayment is delayed. Value in percentage, e.g. 19,5 will be displayed as 19,5 %.\n  */\n  penaltyInterestRate?: number;\n\n  /**\n  * Loan of the account\n  */\n  loan?: Loan;\n\n  /**\n  * Savings of the account\n  */\n  saving?: Saving;\n\n  /**\n   * \n   */\n  ownTransferReceivers?: TransferReceivers;\n\n  /**\n   * Convenience method for getting detail of the account right from the list \n   * @returns {Promise<MainAccount>}\n   */\n  get: () => Promise<MainAccount>;\n\n  /**\n   * Convenience method for updating account's details\n   * @param {ChangeAccountSettingsRequest} payload\n   * @returns {Promise<ChangeAccountSettingsResponse>}\n   */\n  update: (payload: ChangeAccountSettingsRequest) => Promise<ChangeAccountSettingsResponse>;\n\n  /**\n  * Convenience getter for getting accounts's services resource\n  */\n  services: AccountServicesResource;\n\n  /**\n  * Convenience getter for getting accounts's transactions resource\n  */\n  transactions: AccountTransactionsResource;\n\n  /**\n  * Convenience getter for getting accounts's reservations resource\n  */\n  reservations: AccountReservationsResource;\n\n  /**\n  * Convenience getter for getting accounts's transfer resource\n  */\n  transfer: AccountTransferResource;\n\n  /**\n  * Convenience getter for getting accounts's statements resource\n  */\n  statements: AccountStatementsResource;\n\n  /**\n  * Convenience getter for getting accounts's repayments resource\n  */\n  repayments: AccountRepaymentsResource;\n\n  /**\n  * Convenience getter for getting accounts's standing orders resource\n  */\n  standingOrders: AccountStandingOrdersResource;\n\n  /**\n  * Convenience getter for getting accounts's direct debits resource\n  */\n  directDebits: AccountDirectDebitsResource;\n}\n\n/**\n * @interface OverdraftAmount\n * @extends {Amount}\n */\nexport interface OverdraftAmount extends Amount {\n\n  /**\n  * Due date of overdraft. Only for overdrafts where automatic prolongation is not set.\n  */\n  dueDate?: Date;\n}\n\n/**\n * @interface SubAccount\n * @extends {Account}\n */\nexport interface SubAccount extends Account {\n\n  /**\n  * In case of interest rate bands this is the interest rate which applies to value over limit.\n  */\n  \"cz-interestRateOverLimit\"?: number;\n\n  /**\n  * Limit amount for basic credit interest rate used for some saving accounts.\n  */\n  \"cz-interestRateLimit\"?: Amount;\n}\n\n/**\n * @interface Account\n */\nexport interface Account {\n\n  /**\n  * Unique product id\n  */\n  id: string;\n\n  /**\n  * Account number of this account\n  */\n  accountno: AccountNumber;\n\n  /**\n  * Product type. Possible values are CURRENT (for current accounts), SAVING (for saving accounts), LOAN (for loans)\n  */\n  type: string;\n\n  /**\n  * Subtype product. Possible values are mapping based on type. For CURRENT (CURRENT_ACCOUNT, INVESTMENT_CURRENT_ACCOUNT, \n  * GIRO_ACCOUNT, GIRO_ACCOUNT_OLD, FOREIGN_ACCOUNT, INVESTMENT_FOREIGN_ACCOUNT), SAVING (DEPOSIT_ACCOUNT, SAVINT_ACCOUNT, \n  * SAVING_INTERNET, CHILDREN_PASSBOOK, SAVING_CS, BENEFIT_INVEST), LOAN (LOAN_ACCOUNT, MORTGAGE, REVOLVING_LOAN).\n  */\n  subtype: string;\n\n  /**\n  * Product code.\n  */\n  product: string;\n\n  /**\n  * Product description localized\n  */\n  productI18N: string;\n\n  /**\n  * Actual account balance. For loans this field contains outstanding principal\n  */\n  balance: Amount;\n\n  /**\n  * Basic credit Interest rate, used for Current and Saving account. Value in percentage, e.g. 0,5 will be displayed as 0,5 %\n  */\n  creditInterestRate: number;\n}\n\n/**\n * @interface Loan\n */\nexport interface Loan {\n\n  /**\n  * For mortgages this is the date of interest rate validity.\n  */\n  interestRateToDate?: number;\n\n  /**\n  * For loans this is contracted value of the loan.\n  */\n  loanAmount?: Amount;\n\n  /**\n  * For mortgages this is its maturity date.\n  */\n  maturityDate?: Date;\n\n  /**\n  * For loans this is remaining amount for utilization. Basically this is disposable balance for loans.\n  */\n  remainingLoanAmount: Amount;\n\n  /**\n  * For loans and morgages this is last date when you can use money.\n  */\n  drawdownToDate?: Date;\n\n  /**\n  * For mortgages this is actual drawdown amount.\n  */\n  drawdownAmount: Amount;\n\n  /**\n  * For loans and mortgages this is value of the principal. Value which should be paid back to bank.\n  */\n  outstandingDebt?: Amount;\n\n  /**\n  * Amount of money to onetime repay whole loan.\n  */\n  \"cz-lumpsumRepayment\"?: Amount;\n\n  /**\n  * Frequency of the repayment. Possible values are MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, WEEKLY.\n  */\n  installmentFrequency?: string;\n\n  /**\n  * Day of the month when repayment should be paid (f.e. 22)\n  */\n  installmentDay?: Date;\n\n  /**\n  * Loans and mortgages repayment amount.\n  */\n  nextRateAmount?: Amount;\n\n  /**\n  * Next date of the repayment (for loans).\n  */\n  nextRateDate?: Date;\n}\n\n/**\n * @interface Saving\n */\nexport interface Saving {\n\n  /**\n  * In case of interest rate bands this is the interest rate which applies to value over limit.\n  */\n  interestRateOverLimit?: number;\n\n  /**\n  * Limit amount for basic credit interest rate used for some saving accounts.\n  */\n  interestRateLimit?: Amount;\n\n  /**\n  * Bonus interest rates which can be gained if certain conditions are met.\n  */\n  \"cz-bonusInterestRate\"?: number;\n\n  /**\n  * Saving purpose code (for some savings accounts). Possible values are ELECTRONICS, WHITE_GOODS, HOLIDAYS, SPORT_EQUIPMENT, FURNITURE, CARS_AND_ACCESSORIES, HOBBIES_AND_GARDEN, GIFTS_AND_PARTIES, HEALTH, STUDIES, HOUSING, PERSONAL.\n  */\n  savingGoal?: number;\n\n  /**\n  * For some savings accounts this is target amount of the saving.\n  */\n  targetAmount?: Amount;\n\n  /**\n  * Minimum balance for some current and savings accounts.\n  */\n  minimumBalance?: Amount;\n\n  /**\n  * The next prolongation date, when BE system will automatically credit regular deposit amount on saving account or calculate and transfer interest on term deposit.\n  */\n  nextProlongation: Date;\n\n  /**\n  * Maximum amount of own transfer from current (master) to saving account (slave, this) used only for some saving accounts. Currently used only for Individualní spoření. Field contains maximum amount for current month (maximum for month minus already executed payments in current month).\n  */\n  extraSavingMaximum?: Amount;\n\n  /**\n  * Maximum amount of own transfer from current (master) to saving account (slave, this) used only for some saving accounts. Currently used only for Individualni sporeni. Field contains maximum possible amount for all months (regardless already created payments).\n  */\n  \"cz-extraSavingMaximumMonthly\"?: Amount;\n}\n\n/**\n * @interface TransferReceivers\n */\nexport interface TransferReceivers {\n\n  /**\n  * Identifier of the account which is allowed as a transfer receiver. If id is specified then you can find it among other accounts in GET /netbanking/my/accounts response.\n  */\n  id: string;\n\n  /**\n  * Account number which is allowed as a transfer receiver.\n  */\n  accountno: AccountNumber;\n}\n\n/**\n * @interface ChangeAccountSettingsRequest\n */\nexport interface ChangeAccountSettingsRequest {\n\n  /**\n  * User defined account name. Max. 50 characters \n  */\n  alias?: string;\n}\n\n/**\n * @interface ChangeAccountSettingsResponse\n * @extends {MainAccount}\n * @extends {Signable}\n */\nexport interface ChangeAccountSettingsResponse extends MainAccount, Signable { }\n\n/**\n * @interface AccountParameters\n * @extends {NetbankingParameters}\n */\nexport interface AccountParameters extends NetbankingParameters {\n\n  /**\n  * Example: CURRENT.\n  */\n  type?: string;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/accounts.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../common';\n\n/**\n * Get information about the account's balance\n * @class AccountBalanceResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.GetEnabled<AccountBalance>}\n */\nexport class AccountBalanceResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.GetEnabled<AccountBalance> {\n\n  /**\n   * Fetches the balance and returns them in a promise\n   * @returns {Promise<AccountBalance>}\n   */\n  get = (): Promise<AccountBalance> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null);\n  }\n}\n\n/**\n * @interface AccountBalance\n */\nexport interface AccountBalance {\n\n  /**\n  * Account balance for Current, Saved amount for Saving, Principal Outstanding for Loan/Mortgage.\n  */\n  balance: Amount;\n\n  /**\n  * Disposable balance for Current account.\n  */\n  disposable?: Amount;\n\n  /**\n  * Overdraft amount for Current account.\n  */\n  overdraft?: Amount;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/balance.ts","import * as CSCoreSDK from 'cs-core-sdk';\n\n/**\n * Get information about the account's services\n * @class AccountServicesResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Service>}\n */\nexport class AccountServicesResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Service> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Fetches the services and returns them in a promise\n   * @param {ServiceParameters=} params\n   */\n  list = (params?: ServiceParameters): Promise<ServiceList> => {\n\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'services', params, response => {\n\n      // transform ISO dates to native Date objects\n      CSCoreSDK.EntityUtils.addDatesToItems(['dateFrom', 'dateTo'], response);\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface ServiceList\n * @extends {CSCoreSDK.PaginatedListResponse<Service>}\n */\nexport interface ServiceList extends CSCoreSDK.PaginatedListResponse<Service> { }\n\n/**\n * @interface Service\n */\nexport interface Service {\n\n  /**\n  * Service identifier.\n  */\n  id: string;\n\n  /**\n  * Localized name of the service.\n  */\n  nameI18N: string;\n\n  /**\n  * Information about service group. There is an icon defined for every group.\n  */\n  iconGroup: string;\n\n  /**\n  * Service is active from date.\n  */\n  dateFrom?: Date;\n\n  /**\n  * Service will be active till date.\n  */\n  dateTo?: Date;\n}\n\n/**\n * @interface ServiceParameters\n * @extends {CSCoreSDK.Paginated}\n */\nexport interface ServiceParameters extends CSCoreSDK.Paginated { }\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/services.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../common';\n\n/**\n * Get information about the account's reservations\n * @class AccountReservationsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Reservation>}\n */\nexport class AccountReservationsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Reservation> {\n\n  /**\n   * Fetches the reservations and returns them in a promise\n   * @param {ReservationParameters=} params\n   * @returns {Promise<ReservationList>}\n   */\n  list = (params?: ReservationParameters): Promise<ReservationList> => {\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'reservations', params, response => {\n\n      // transform ISO dates to native Date objects\n      CSCoreSDK.EntityUtils.addDatesToItems(['creationDate', 'expirationDate'], response);\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface ReservationList\n * @extends {CSCoreSDK.PaginatedListResponse<Reservation>}\n */\nexport interface ReservationList extends CSCoreSDK.PaginatedListResponse<Reservation> { }\n\n/**\n * @interface Reservation\n */\nexport interface Reservation {\n\n  /**\n  * Type of reservation. Possible values are CASH_WITHDRAWAL, PAYMENT, CARD_PAYMENT, OTHER\n  */\n  type: string;\n\n  /**\n  * Reservation status. Possible values are RESERVED, CANCELLED, EXPIRED. Currently only reservations with status RESERVED are supported.\n  */\n  status: string;\n\n  /**\n  * Transaction date and time.\n  */\n  creationDate: Date;\n\n  /**\n  * Reservation expiration date.\n  */\n  expirationDate?: Date;\n\n  /**\n  * Merchant Name / ATM.\n  */\n  merchantName?: string;\n\n  /**\n  * Merchant address.\n  */\n  \"cz-merchantAddress\"?: string;\n\n  /**\n  * Reservation description, additional info.\n  */\n  description: string;\n\n  /**\n  * The amount of reservation in account's currency\n  */\n  amount: Amount;\n\n  /**\n  * The amount of the reservation in transaction currency\n  */\n  amountSender?: Amount;\n}\n\n/**\n * @interface ReservationParameters\n * @extends {CSCoreSDK.Paginated}\n */\nexport interface ReservationParameters extends CSCoreSDK.Paginated { }\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/reservations.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../common';\n\n/**\n * Get information about the account's repayments\n * @class AccountRepaymentsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<Repayment>}\n */\nexport class AccountRepaymentsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<Repayment> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Fetches the repayments and returns them in a promise\n   * @returns {Promise<RepaymentList>}\n   */\n  list = (): Promise<RepaymentList> => {\n\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'repayments', null).then(response => {\n\n      // transform ISO dates to native Date objects\n      CSCoreSDK.EntityUtils.addDatesToItems('repaymentDate', response)\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface RepaymentList\n * @extends {CSCoreSDK.PaginatedListResponse<Repayment>}\n */\nexport interface RepaymentList extends CSCoreSDK.PaginatedListResponse<Repayment> { }\n\n/**\n * @interface Repayment\n */\nexport interface Repayment {\n\n  /**\n   * Date of the repayment.\n   */\n  repaymentDate: Date;\n\n  /**\n   * Repayment amount. What should be paid.\n   */\n  amount: Amount;\n\n  /**\n   * Actual paid amount.\n   */\n  paidAmount?: Amount;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/repayments.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { StatementList, Statement, NetbankingParameters, DownloadStatementParameters } from '../common';\n\n/**\n * Get information about the account's statements\n * @class AccountStatementsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Statement>}\n */\nexport class AccountStatementsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Statement>, CSCoreSDK.ParametrizedDownloadEnabled<DownloadStatementParameters, Uint8Array> {\n\n  /**\n   * Fetches the statements and returns them in a promise\n   * @param {NetbankingParameters=} params\n   * @returns {Promise<StatementList>}\n   */\n  list = (params?: NetbankingParameters): Promise<StatementList> => {\n\n    // transform \"sort\" and \"order\" parameters to comma separated list from array\n    CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'statements', params, response => {\n\n      // transform ISO dates to native Date objects\n      CSCoreSDK.EntityUtils.addDatesToItems('statementDate', response);\n\n      return response;\n    });\n  }\n\n  /**\n   * Downloads statements file\n   * @param {DownloadStatementParameters} params\n   * @returns {Promise<Uint8Array>}\n   */\n  download = (params: DownloadStatementParameters): Promise<Uint8Array> => {\n    return CSCoreSDK.ResourceUtils.CallDownload(this, 'signed/download', 'POST', params);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/statements.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { StatementList, Statement, NetbankingParameters, DownloadStatementParameters } from '../common';\n\n/**\n * Get individual SubAccount resource\n * @class SubAccountsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.HasInstanceResource<SubAccountResource>}\n */\nexport class SubAccountsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.HasInstanceResource<SubAccountResource> {\n\n  /**\n   * Returns individual SubAccount resource with a given id\n   * @param {string|number} id\n   * @returns {SubAccountResource}\n   */\n  withId = (id: string | number): SubAccountResource => {\n    return new SubAccountResource(id, this.getPath(), this._client);\n  }\n}\n\n/**\n * Get information about the subaccount\n * @class SubAccountResource\n * @extends {CSCoreSDK.InstanceResource}\n */\nexport class SubAccountResource extends CSCoreSDK.InstanceResource {\n\n  /**\n   * Get information about the subaccount's statements\n   * @returns {SubAccountStatementsResource}\n   */\n  get statements(): SubAccountStatementsResource {\n    return new SubAccountStatementsResource(this.getPath() + '/statements', this._client);\n  }\n}\n\n/**\n * List all subaccount's statements\n * @class SubAccountStatementsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Statement>}\n */\nexport class SubAccountStatementsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Statement>, CSCoreSDK.ParametrizedDownloadEnabled<DownloadStatementParameters, Uint8Array> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns all subaccount's statements in a promise\n   * @param {NetbankingParameters=} params\n   * @returns {Promise<StatementList>}\n   */\n  list = (params?: NetbankingParameters): Promise<StatementList> => {\n\n    // transform \"sort\" and \"order\" parameters to comma separated list from array\n    CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'statements', params, response => {\n\n      // transform ISO dates to native Date objects\n      CSCoreSDK.EntityUtils.addDatesToItems('statementDate', response);\n\n      return response;\n    });\n  }\n\n  /**\n   * Downloads statements file\n   * @param {DownloadStatementParameters} params\n   * @returns {Promise<Uint8Array>}\n   */\n  download = (params: DownloadStatementParameters): Promise<Uint8Array> => {\n    return CSCoreSDK.ResourceUtils.CallDownload(this, 'download', 'POST', params);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/subAccounts.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { AddNoteAndMarkTransactionRequest, AddNoteAndMarkTransactionResponse, ExportTransactionsParameters } from '../common';\n\n/**\n * Get individual AccountsTransactionsResource\n * @class AccountTransactionsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.HasInstanceResource<AccountTransactionResource>}\n */\nexport class AccountTransactionsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.HasInstanceResource<AccountTransactionResource>, CSCoreSDK.ParametrizedExportEnabled<ExportTransactionsParameters, Uint8Array> {\n\n  /**\n   * Returns individual AccountsTransactionResource with a given id\n   * @param {AccountTransactionResource} id\n   * @returns {AccountTransactionResource}\n   */\n  withId = (id: string | number): AccountTransactionResource => {\n    return new AccountTransactionResource(id, this.getPath(), this._client);\n  }\n\n  /**\n   * Exports transaction history into signed pdf\n   * @param {ExportTransactionsParameters} params\n   * @returns {Promise<Uint8Array>}\n   */\n  export = (params: ExportTransactionsParameters): Promise<Uint8Array> => {\n\n    // transform \"fields\" parameter to comma separated list from array\n    CSCoreSDK.EntityUtils.transformArrayParamsToString(params, 'fields');\n\n    // transform Date objects to ISO strings\n    CSCoreSDK.EntityUtils.transformDatesToISO(['dateFrom', 'dateTo'], params);\n\n    // insert 'cz' resource into the resource's path once because the api requires it in some resources\n    var path = this.getPath().replace('/my', '/cz/my');\n\n    return this._client.callApi(`${path}/export`, 'POST', params, null, null, 'arraybuffer');\n  }\n}\n\n/**\n * Allows to add or change a client's personal transaction note and mark the transaction as favorite/important for one specific transaction on selected account.\n * @class AccountTransactionResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.UpdateEnabled<AddNoteAndMarkTransactionRequest, AddNoteAndMarkTransactionResponse>}\n */\nexport class AccountTransactionResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.UpdateEnabled<AddNoteAndMarkTransactionRequest, AddNoteAndMarkTransactionResponse> {\n\n  /**\n   * Adds, changes of marks transaction\n   * @param {AddNoteAndMarkTransactionRequest} payload\n   * @returns {Promise<AddNoteAndMarkTransactionResponse>}\n   */\n  update = (payload: AddNoteAndMarkTransactionRequest): Promise<AddNoteAndMarkTransactionResponse> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/transactions.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../common';\n\n/**\n * Revolve a loan\n * @class AccountTransferResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.UpdateEnabled<TransferRequest, TransferResponse>}\n */\nexport class AccountTransferResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.UpdateEnabled<TransferRequest, TransferResponse> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Revolves the loan. Currently only REVOLVING_LOAN subtype is supported.\n   * @param {TransferRequest} payload\n   * @returns {Promise<TransferResponse>}\n   */\n  update = (payload: TransferRequest): Promise<TransferResponse> => {\n\n    // transform Date objects to ISO strings\n    CSCoreSDK.EntityUtils.transformDatesToSimpleISO('transferDate', payload);\n\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n      // Remove signInfo from response and add SigningObject with key signing\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    })\n  }\n}\n\n/**\n * @interface TransferResponse\n * @extends {CSCoreSDK.Signable}\n */\nexport interface TransferResponse extends CSCoreSDK.Signable { }\n\n/**\n * @interface TransferRequest\n */\nexport interface TransferRequest {\n\n  /**\n   * Type of the transfer. Currently only REVOLVING_LOAN_DISBURSEMENT is supported.\n   */\n  type: string;\n\n  /**\n  * Amount which should be transfered.\n  */\n  amount: Amount;\n\n  /**\n  * Payment transfer date.\n  */\n  transferDate: Date;\n\n  /**\n  * Note for the recipient.\n  */\n  recipientNote?: string;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/transfer.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { AccountNumber, Amount, NetbankingParameters, Symbols } from '../common';\n\n/**\n * @class AccountStandingOrdersResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<StandingOrder>}\n * @implements {CSCoreSDK.HasInstanceResource<AccountStandingOrderResource>}\n * @implements {CSCoreSDK.CreateEnabled<CreateStandingOrderRequest, StandingOrderResponse>}\n */\nexport class AccountStandingOrdersResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<StandingOrder>, CSCoreSDK.HasInstanceResource<AccountStandingOrderResource>, CSCoreSDK.CreateEnabled<CreateStandingOrderRequest, StandingOrderResponse> {\n\n  /**\n   * Returns list of actual standing/sweep orders for accounts of the current user.\n   * @param {NetbankingParameters} params\n   * @returns {Promise<StandingOrderList>}\n   */\n  list = (params: NetbankingParameters): Promise<StandingOrderList> => {\n\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'standingOrders', params, response => {\n\n      response.items.forEach(item => {\n        addDatesToStandingOrder(item);\n        resourcifyStandingOrder(<StandingOrder>item, this.withId((<StandingOrder>item).number));\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Get the resource of standing order with a given id\n   * @param {string} id\n   * @returns {AccountStandingOrderResource}\n   */\n  withId = (id: string): AccountStandingOrderResource => {\n    return new AccountStandingOrderResource(id, this.getPath(), this.getClient());\n  }\n\n  /**\n   * Resource for creating standing/sweep order. Once order has been signed new payments are generated and executed according its settings.\n   * @param {CreateStandingOrderRequest} payload\n   * @returns {Promise<StandingOrderResponse>}\n   */\n  create = (payload: CreateStandingOrderRequest): Promise<StandingOrderResponse> => {\n\n    CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['nextExecutionDate', 'lastExecutionDate', 'startDate'], payload);\n\n    return CSCoreSDK.ResourceUtils.CallCreate(this, payload).then(response => {\n      addDatesToStandingOrder(response);\n      resourcifyStandingOrder(<StandingOrder>response, this.withId((<StandingOrder>response).number));\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n}\n\n/**\n * @class AccountStandingOrderResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<StandingOrder>}\n * @implements {CSCoreSDK.DeleteEnabled<StandingOrderResponse>}\n */\nexport class AccountStandingOrderResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<StandingOrder>, CSCoreSDK.DeleteEnabled<StandingOrderResponse> {\n\n  /**\n   * Returns detail of actual standing/sweep orders identified by its number.\n   * @returns {Promise<StandingOrder>}\n   */\n  get = (): Promise<StandingOrder> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n      addDatesToStandingOrder(response);\n      resourcifyStandingOrder(<StandingOrder>response, this);\n\n      return response;\n    });\n  }\n\n  /**\n   * This call removes existing standing/sweep order. No more payments for the order are executed after the change has been signed.\n   * @returns {Promise<StandingOrderResponse>}\n   */\n  delete = (): Promise<StandingOrderResponse> => {\n    return CSCoreSDK.ResourceUtils.CallDelete(this, null).then(response => {\n      addDatesToStandingOrder(response);\n      resourcifyStandingOrder(<StandingOrder>response, this);\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n}\n\nfunction addDatesToStandingOrder(item) {\n  CSCoreSDK.EntityUtils.addDatesFromISO(['startDate', 'realExecutionDate', 'nextExecutionDate', 'lastExecutionDate'], item);\n  if ((<StandingOrder>item).break) {\n    CSCoreSDK.EntityUtils.addDatesFromISO(['validFromDate', 'validToDate'], (<StandingOrder>item).break);\n  }\n  if ((<StandingOrder>item).scheduledExecutionDates && Array.isArray((<StandingOrder>item).scheduledExecutionDates)) {\n    var datesArr: any = (<StandingOrder>item).scheduledExecutionDates.map(x => new Date(CSCoreSDK.EntityUtils.parseISODate(x)));\n\n    (<StandingOrder>item).scheduledExecutionDates = datesArr;\n  }\n}\n\nfunction resourcifyStandingOrder(orderListing: StandingOrder, orderReference: AccountStandingOrderResource) {\n  orderListing.get = orderReference.get;\n  orderListing.delete = orderReference.delete;\n}\n\n/**\n * @interface StandingOrderList\n * @extends {CSCoreSDK.PaginatedListResponse<StandingOrder>}\n */\nexport interface StandingOrderList extends CSCoreSDK.PaginatedListResponse<StandingOrder> { }\n\n/**\n * @interface StandingOrder\n * @extends {CreateStandingOrderRequest}\n */\nexport interface StandingOrder extends CreateStandingOrderRequest {\n\n  /**\n   * Standing order respectively sweep order identifier.\n   */\n  number: string;\n\n\n  /**\n   * Represents the status of the order. Only possible value so far is OK.\n   */\n  status: string;\n\n  /**\n   * Maximum number of iterations - processing of the standing order. Only applicable in combination with executionMode.\n   */\n  maxIterations: number;\n\n  /**\n   * Maximum amount to be transferred using the standing order. Only applicable in combination with executionMode.\n   */\n  maxAmount: Amount;\n\n  /**\n   * Date and time since the order is valid from.\n   */\n  startDate: Date | string;\n\n  /**\n   * Array of execution dates (DATEs) when payments will be executed from this standing order since today until today + 30 days.\n   */\n  scheduledExecutionDates?: [Date];\n\n  /**\n   * Date when the next order will be really executed taking into account weekends and holidays.\n   */\n  realExecutionDate?: Date;\n\n  break?: {\n\n    /**\n     * Start date of break period. Standing order will not be processed from this date.\n     */\n    validFromDate: Date;\n\n    /**\n     * End date of break period. Standing order will not be processed to this date.\n     */\n    validToDate: Date;\n  }\n\n  /**\n   * List of months where there is no payment (only applicable with interval IRREGULAR). Possible values: JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER\n   */\n  stoppages?: [string];\n\n  /**\n   * Array of optional Flag values to Standing Order. Possible flags: deletable.\n   */\n  flags?: [string];\n\n  /**\n   * Convience method for getting standing order detail\n   * @returns {Promise<StandingOrder>}\n   */\n  get: () => Promise<StandingOrder>;\n\n  /**\n   * Conveinience method for deleting standing order\n   * @returns {Promise<StandingOrderResponse>}\n   */\n  delete: () => Promise<StandingOrderResponse>;\n}\n\n/**\n * @interface StandingOrderResponse\n */\nexport interface StandingOrderResponse extends StandingOrder, CSCoreSDK.Signable { }\n\n/**\n * @interface CreateStandingOrderRequest\n */\nexport interface CreateStandingOrderRequest {\n\n  /**\n   * Either STANDING_ORDER (there is fixed amount specified which is transferred in defined times) or SWEEP_ORDER (there is specified limit, amount over limit/to limit is transferred in defined times).\n   */\n  type: string;\n\n  /**\n   * Relevant only for sweep orders. Either SWEEP_OVER_LIMIT (amount over limit is transferred from account) or SWEEP_UNDER_LIMIT (amount to limit is transferred to account).\n   */\n  subtype?: string;\n\n  /**\n   * Alias name of standing order entered by user for his better orientation in standing order list.\n   */\n  alias?: string;\n\n  /**\n   * Name of the standing order receiver.\n   */\n  receiverName?: string;\n\n  /**\n   * Receiver account number. In case of SWEEP_UNDER_LIMIT this is actually sender.\n   */\n  receiver: AccountNumber;\n\n  /**\n   * Message for payee set during payment order creation. It is used to identify transaction on receiver side.\n   */\n  senderReference?: string;\n\n  /**\n   * The amount of the order in case of standing order. The limit amount in case of sweep order.\n   */\n  amount: Amount;\n\n  /**\n   * Date when the next order is set to be executed. This includes weekends and banking holidays.\n   */\n  nextExecutionDate?: Date | string;\n\n  /**\n   * Date when the last order will be processed. Only applicable in combination with executionMode .\n   */\n  lastExecutionDate?: Date | string;\n\n  /**\n   * The execution mode defines when or how standing/sweep order will be cancelled, processed the last time. Possible values: UNTIL_DATE (standing order is valid until specific date - field lastExecutionDate), UNTIL_CANCELLATION (standing order is valid forever and must be cancelled by client), AFTER_MAX_ITERATION_EXCEEDED (certain count of executions is specified - field maxIterations) or MAX_AMOUNT_EXCEEDED (maximum amount which can be transferred for this order is specified, if next iteration would exceed this amount it is not executed - field maxAmount).\n   */\n  executionMode: string;\n\n  /**\n   * The execution due mode defines how the date when order should be executed is specified. Possible values: DUE_DAY_OF_MONTH (specific number of day in the month is defined) or DUE_LAST_DAY_OF_MONTH (order is executed on last day of particular month).\n   */\n  executionDueMode: string;\n\n  /**\n   * Execution interval defines how often order is executed. Possible values: DAILY, WEEKLY, MONTHLY, BI_MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, IRREGULAR.\n   */\n  executionInterval: string;\n\n  /**\n   * Value represents order number of the day within particular period when the standing order will be reqularly executed. Possible values: 1-7 (for WEEKLY interval), 1-28 for STANDING_ORDER, 1-27 for type SWEEP_ORDER (for MONTHLY, QUARTERLY, HALFYEARLY and YEARLY - for intervals longer then month also intervalDueMonth is applicable). Field is not relevant for other execution intervals.\n   */\n  intervalDueDay?: number;\n\n  /**\n   * Due date month in execution interval of standing order processing. Represents order number of the month in particular period. Possible values: 1-2 for BI_MONTHLY, 1-3 for QUARTERLY, 1-6 for HALFYEARLY, 1-12 for YEARLY. Field is not relevant for other execution intervals.\n   */\n  intervalDueMonth?: number;\n\n  symbols?: Symbols;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/standing-orders.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { AccountNumber, Amount, NetbankingParameters, Symbols } from '../common';\n\n/**\n * @class AccountDirectDebitsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<DirectDebit>}\n * @implements {CSCoreSDK.HasInstanceResource<AccountDirectDebitResource>}\n * @implements {CSCoreSDK.CreateEnabled<DirectDebit, SignableDirectDebit>}\n */\nexport class AccountDirectDebitsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<DirectDebit>, CSCoreSDK.HasInstanceResource<AccountDirectDebitResource>, CSCoreSDK.CreateEnabled<DirectDebit, SignableDirectDebit> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Resource Direct Debit List represents collection of all direct debit approvals entered by user for the specified user\n   * @param {NetbankingParameters} params\n   * @returns {Promise<DirectDebitList>}\n   */\n  list = (params: NetbankingParameters): Promise<DirectDebitList> => {\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'directDebits', params, response => {\n\n      CSCoreSDK.EntityUtils.addDatesToItems(['startDate', 'endDate', 'versionValidityDate'], response);\n\n      return response;\n    });\n  }\n\n  /**\n   * Get the resource of direct debit with a given id\n   * @param {string} id\n   * @returns {AccountDirectDebitResource}\n   */\n  withId = (id: string): AccountDirectDebitResource => {\n    return new AccountDirectDebitResource(id, this.getPath(), this.getClient());\n  }\n\n  /**\n   * Resource for creating (or allowing) direct debit on certain account. Once signed it can be used by receiver party.\n   * @param {DirectDebit} payload\n   * @returns {Promise<SignableDirectDebit>}\n   */\n  create = (payload: DirectDebit): Promise<SignableDirectDebit> => {\n\n    CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['startDate', 'endDate'], payload);\n\n    return CSCoreSDK.ResourceUtils.CallCreate(this, payload).then(response => {\n\n      CSCoreSDK.EntityUtils.addDatesFromISO(['startDate', 'endDate', 'versionValidityDate'], response);\n\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n}\n\n/**\n * @class AccountDirectDebitResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<DirectDebit>}\n * @implements {CSCoreSDK.DeleteEnabled<SignableDirectDebit>}\n */\nexport class AccountDirectDebitResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<DirectDebit>, CSCoreSDK.DeleteEnabled<SignableDirectDebit> {\n\n  /**\n   * Get the single direct debits detail.\n   * @returns {Promise<DirectDebit>}\n   */\n  get = (): Promise<DirectDebit> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n\n      CSCoreSDK.EntityUtils.addDatesFromISO(['startDate', 'endDate', 'versionValidityDate'], response);\n\n      return response;\n    });\n  }\n\n  /**\n   * Resource for deleting direct debit (permission) on certain account. Once signed no more transfers can be made by receiver party.\n   * @returns {Promise<SignableDirectDebit>}\n   */\n  delete = (): Promise<SignableDirectDebit> => {\n    return CSCoreSDK.ResourceUtils.CallDelete(this, null).then(response => {\n\n      CSCoreSDK.EntityUtils.addDatesFromISO(['startDate', 'endDate', 'versionValidityDate'], response);\n\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface DirectDebitList\n * @extends {CSCoreSDK.PaginatedListResponse<DirectDebit>}\n */\nexport interface DirectDebitList extends CSCoreSDK.PaginatedListResponse<DirectDebit> { }\n\n/**\n * @interface DirectDebit\n */\nexport interface DirectDebit {\n\n  /**\n   * Order number of the direct debit approval. It is unique per approval. Several versions of an approval have the same order number.\n   */\n  number?: string;\n\n  /**\n   * Type of the approval. Possible values are DIRECT_DEBIT or SIPO.\n   */\n  type: string;\n\n  /**\n   * Name of the direct debit receiver.\n   */\n  receiverName?: string;\n\n  /**\n   * Account number of the receiver.\n   */\n  receiver: AccountNumber;\n\n  /**\n   * Approval name chosen by the user.\n   */\n  alias?: string;\n\n  /**\n   * Limit for the single direct debit.\n   */\n  limit?: Amount;\n\n  /**\n   * Limit for the whole period.\n   */\n  limitSum?: Amount;\n\n  /**\n   * Limit for the number of direct debits for the period.\n   */\n  numberLimit?: number;\n\n  /**\n   * Beginning date for the approval.\n   */\n  startDate: Date | string;\n\n  /**\n   * End date for the approval.\n   */\n  endDate?: Date | string;\n\n  /**\n   * Symbols structure for Variable symbol, Specific symbol, Constant symbol.\n   */\n  symbols?: Symbols;\n\n  /**\n   * The order of the month in the period when direct debits are acceptable. This must he null for period at least one month.\n   */\n  dueMonth?: number;\n\n  /**\n   * The number of the day in month. From this day direct debits are acceptable. This can be not null only for period longer then one month.\n   */\n  dayFrom?: number;\n\n  /**\n   * The number of the day in month. To this day direct debits are acceptable.\n   */\n  dayTo?: number;\n\n  /**\n   * Unique identifier for version of the direct debit approval.\n   */\n  versionId?: number;\n\n  /**\n   * Date when the version comes into use.\n   */\n  versionValidityDate?: Date;\n\n  /**\n   * Number of period cycles in one period.\n   */\n  periodicity: number;\n\n  /**\n   * Unit of the period cycle. Possible values are HALFYEARLY, MONTHLY, QUARTERLY, YEARLY, DAILY, WEEKLY, OTHER.\n   */\n  periodCycle: string;\n}\n\n/**\n * @interface SignableDirectDebit\n * @extends {DirectDebit}\n * @extends {CSCoreSDK.Signable}\n */\nexport interface SignableDirectDebit extends DirectDebit, CSCoreSDK.Signable { }\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/direct-debits.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { LastLoginsResource } from './lastLogins';\n\n/**\n * Get information about the profile and past logins.\n * @class ProfileResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.GetEnabled<Profile>}\n */\nexport class ProfileResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.GetEnabled<Profile> {\n\n  /** \n   * Returns information about the profile \n   * @returns {Promise<Profile>}\n   */\n  get = (): Promise<Profile> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(profile => {\n\n      if ((<Profile>profile).lastlogin) {\n\n        // transform ISO dates to native Date objects\n        CSCoreSDK.EntityUtils.addDatesFromISO('lastlogin', profile);\n      }\n\n      return profile;\n    });\n  }\n\n  /** \n   * Returns LastLoginsResource for listing past logins\n   * @returns {LastLoginsResource}\n   */\n  get lastLogins(): LastLoginsResource {\n    return new LastLoginsResource(this.getPath() + '/logininfo', this.getClient());\n  }\n}\n\n/**\n * @interface Profile\n */\nexport interface Profile {\n\n  /**\n  * user's first name\n  */\n  firstName: string;\n\n  /**\n  * user's last name\n  */\n  lastName: string;\n\n  /**\n  * user's name used for salutation\n  */\n  salutation?: string;\n\n  /**\n  * customer's id a.k.a cluid\n  */\n  customerId: string;\n\n  /**\n  * number of institute\n  */\n  institudeId: number;\n\n  /**\n  * Has the customer approved §107 telecommunication act. Possible values: ACCEPTED, NOT_ACCEPTED, UNKNOWN.\n  */\n  marketingInfoAcceptance: string;\n\n  /**\n  * user's gender. Possible values: MALE, FEMALE, UNKNOWN.\n  */\n  gender: string;\n\n  /**\n  * Date and time of the last login of customer. Common last login for all client applications - George, QC, etc.\n  */\n  lastlogin?: Date;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/profile/profile.ts","import * as CSCoreSDK from 'cs-core-sdk';\n\n/** \n * List all past logins\n * @class LastLoginsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<LastLoginInfo>}\n */\nexport class LastLoginsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<LastLoginInfo> {\n\n  /** \n   * Returns promise with a list of past logins\n   * @returns {Promise<LastLoginList>}\n   */\n  list = (): Promise<LastLoginList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'lastlogin').then(response => {\n\n      // transform ISO dates to native Date objects\n      CSCoreSDK.EntityUtils.addDatesToItems('lastlogin', response);\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface LastLoginList\n * @extends {CSCoreSDK.ListResponse<LastLoginInfo>}\n */\nexport interface LastLoginList extends CSCoreSDK.ListResponse<LastLoginInfo> { }\n\n/**\n * @interface LastLoginInfo\n */\nexport interface LastLoginInfo {\n\n  /**\n  * Channel of the last login. \n  */\n  channel: string;\n\n  /**\n  * Date of the last login.\n  */\n  lastlogin: Date;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/profile/lastLogins.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount, AccountNumber, Signable, NetbankingParameters } from '../common';\nimport { CardDeliveryResource } from './delivery';\nimport { CardTransactionsResource } from './transactions';\nimport { CardActionsResource } from './actions';\nimport { CardLimitsResource } from './limits';\nimport { CardSecure3DResource } from './secure3D';\nimport { CardTransferResource } from './transfer';\nimport { CardAccountsResource } from './statements';\n\n/**\n * Represents list of payment cards (either debet or credit) for current user. Every card was issued for current user or belongs to one of his accounts.\n * @class CardsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Card>}\n * @implements {CSCoreSDK.HasInstanceResource<CardResource>}\n */\nexport class CardsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Card>, CSCoreSDK.HasInstanceResource<CardResource> {\n\n  /**\n   * List all cards \n   * @param {Promise<CardList>=} params\n   * @returns {Promise<CardList>}\n   */\n  list = (params?: NetbankingParameters): Promise<CardList> => {\n\n    // transform \"sort\" and \"order\" parameters to comma separated list from array\n    CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'cards', params, response => {\n\n      response.items.forEach(item => {\n\n        // add convenient methods to items in the list\n        resourcifyListing(<Card>item, this.withId((<Card>item).id), true);\n\n        // transform ISO dates to native Date objects\n        transformResponse(item);\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Get a resource for card with a given id \n   * @param {string} id\n   * @returns {CardResource}\n   */\n  withId = (id: string): CardResource => {\n    return new CardResource(id, this.getPath(), this.getClient());\n  }\n}\n\n/**\n * @class CardResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<Card>}\n * @implements {CSCoreSDK.UpdateEnabled<ChangeCardSettingsRequest, ChangeCardSettingsResponse>}\n */\nexport class CardResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<Card>, CSCoreSDK.UpdateEnabled<ChangeCardSettingsRequest, ChangeCardSettingsResponse> {\n\n  /**\n   * Get detail of the card\n   * @returns {Promise<Card>}\n   */\n  get = (): Promise<Card> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(card => {\n\n      // add convenient methods to items in the list\n      resourcifyListing(<Card>card, this, false);\n\n      // transform ISO dates to native Date objects\n      transformResponse(card);\n\n      return card;\n    });\n  }\n\n  /**\n   * Update card's alias\n   * @param {ChangeCardSettingsRequest} payload\n   * @returns {Promise<ChangeCardSettingsResponse>}\n   */\n  update = (payload: ChangeCardSettingsRequest): Promise<ChangeCardSettingsResponse> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(card => {\n\n      // add convenient methods to items in the list\n      resourcifyListing(<Card>card, this, false);\n\n      // transform ISO dates to native Date objects\n      transformResponse(card);\n\n      return card;\n    })\n  }\n\n  /**\n   * Get current delivery settings\n   * @returns {CardDeliveryResource}\n   */\n  get delivery(): CardDeliveryResource {\n    return new CardDeliveryResource(this.getPath() + '/delivery', this._client);\n  }\n\n  /**\n   * Allows to add or change a client's personal note and mark/star the card transaction as favorite/important for one specific transaction\n   * @returns {CardTransactionsResource}\n   */\n  get transactions(): CardTransactionsResource {\n    return new CardTransactionsResource(this.getPath() + '/transactions', this._client);\n  }\n\n  /**\n   * Issue various actions on a single card. Currently supported actions are: \n   * reissue pin, lock card, unlock card, activate card, set automatic card replacement on, set automatic card replacement off, replacement card request\n   * @returns {CardActionsResource}\n   */\n  get actions(): CardActionsResource {\n    return new CardActionsResource(this.getPath() + '/states', this._client);\n  }\n\n  /**\n   * Get information about different limits\n   * @returns {CardLimitsResource}\n   */\n  get limits(): CardLimitsResource {\n    return new CardLimitsResource(this.getPath() + '/card-limits', this._client);\n  }\n\n  /**\n   * Get the 3D secure online shopping status\n   * @returns {CardSecure3DResource}\n   */\n  get secure3d(): CardSecure3DResource {\n    return new CardSecure3DResource(this.getPath() + '/secure-online-shopping', this._client);\n  }\n\n  /**\n   * Resource for paying up credit card debt\n   * @returns {CardTransferResource}\n   */\n  get transfer(): CardTransferResource {\n    return new CardTransferResource(this.getPath() + '/transfer', this._client);\n  }\n\n  /**\n   * Account resource for listing statements\n   * @returns {CardAccountsResource}\n   */\n  get accounts(): CardAccountsResource {\n    return new CardAccountsResource(this.getPath() + '/mainaccount', this._client);\n  }\n}\n\nfunction resourcifyListing(itemListing: Card, itemResource: CardResource, isFromList: boolean) {\n  if (isFromList) {\n    itemListing.get = itemResource.get;\n  }\n  itemListing.update = itemResource.update;\n  itemListing.delivery = itemResource.delivery;\n  itemListing.transactions = itemResource.transactions;\n  itemListing.actions = itemResource.actions;\n  itemListing.limits = itemResource.limits;\n  itemListing.secure3d = itemResource.secure3d;\n  itemListing.transfer = itemResource.transfer;\n  itemListing.accounts = itemResource.accounts;\n}\n\nfunction transformResponse(item) {\n  CSCoreSDK.EntityUtils.addDatesFromISO(['expiryDate', 'validFromDate'], item);\n}\n\n/**\n * @interface CardList\n * @extends {CSCoreSDK.PaginatedListResponse<Card>}\n */\nexport interface CardList extends CSCoreSDK.PaginatedListResponse<Card> { }\n\n/**\n * @interface Card\n */\nexport interface Card {\n\n  /**\n  * unique product id\n  */\n  id: string;\n\n  /**\n  * Users product name. Max. 50 characters.\n  */\n  alias?: string;\n\n  /**\n  * product owner\n  */\n  owner: string;\n\n  /**\n  * card number\n  */\n  number: string;\n\n  /**\n  * Card sequence number. The number distinguishing between separate cards (different plastic cards) with the same Primary Account Number (PAN)\n  */\n  sequenceNumber: string;\n\n  /**\n  * Localized product name.\n  */\n  productI18N: string;\n\n  /**\n  * Internal product code.\n  */\n  productCode?: string;\n\n  /**\n  * Expiration date of particular plastic card\n  */\n  expiryDate?: Date;\n\n  /**\n  * Date from which this particular plastic card is valid\n  */\n  validFromDate?: Date;\n\n  /**\n  * Current state of card. Possible values: ACTIVE, INACTIVE (issued card not activated yet), TEMPORARY_BLOCKED.\n  */\n  state: string;\n\n  /**\n  * Type of card: credit, debit/bankcard. Possible Values: BANK_CARD (used for debit card too), CREDIT\n  */\n  type: string;\n\n  /**\n  * Credit card provider/issuer: Erste Bank or external bank. Possible Values: ERSTE_BANK, EXTERNAL\n  */\n  provider: string;\n\n  /**\n  * Indicates reason for locking the card. Possible Values: THEFT, LOSS, FRAUD, OTHER\n  */\n  lockReason?: string;\n\n  /**\n  * Card characteristics. Possible values: MAIN, AUTHORIZED\n  */\n  characteristics?: string;\n\n  /**\n  * For credit card: Loan limit for card (shadow) account.\n  */\n  limit?: Amount;\n\n  /**\n  * Disposable balance of current account linked to debit/bank card or Available balance of credit card (disposable balance of shadow account). Not available for all cards or states (locked, closed, unknown).\n  */\n  balance?: Amount;\n\n  /**\n  * Total outstanding/owed amount for credit card (the last known value).\n  */\n  outstandingAmount?: Amount;\n\n  /**\n  * Minimal installment repayment amount for credit card (at previous cycle end date).\n  */\n  minimalMonthlyAmount?: Amount;\n\n  /**\n  * Installment repayment due date.\n  */\n  installmentDueDate?: Date;\n\n  /**\n  * Information about the main account.\n  */\n  mainAccount?: CardMainAccount;\n\n  /**\n  * Information about the main account's limits.\n  */\n  \"cz-overallCardAccountLimits\"?: CardAccountLimits;\n\n  /**\n  * Indicates how a client receives their card and pin. Possible values: BRANCH, HOME, OTHER_BRANCH, ADDRESS_ABROAD.\n  */\n  cardDeliveryMode?: string;\n\n  /**\n  * Array of optional features valid for given card.\n  */\n  features?: [string];\n\n  /**\n  * Array of optional Flag values depends on Card type.\n  */\n  flags?: [string];\n\n  /**\n   * Convenience method for getting detail of the card right from the list \n   * @returns {Promise<Card>}\n   */\n  get: () => Promise<Card>;\n\n  /**\n   * Convenience method for updating card's settings\n   * @param {ChangeCardSettingsRequest} payload\n   * @returns {Promise<ChangeCardSettingsResponse>}\n   */\n  update: (payload: ChangeCardSettingsRequest) => Promise<ChangeCardSettingsResponse>;\n\n  /**\n  * Convenience getter for getting card's delivery resource\n  */\n  delivery: CardDeliveryResource;\n\n  /**\n  * Convenience getter for getting card's transactions resource\n  */\n  transactions: CardTransactionsResource;\n\n  /**\n  * Convenience getter for getting card's actions resource\n  */\n  actions: CardActionsResource;\n\n  /**\n  * Convenience getter for getting card's limits resource\n  */\n  limits: CardLimitsResource;\n\n  /**\n  * Convenience getter for getting card's 3D Secure resource\n  */\n  secure3d: CardSecure3DResource;\n\n  /**\n  * Convenience getter for getting card's transfer resource\n  */\n  transfer: CardTransferResource;\n\n  /**\n  * Convenience getter for getting card's accounts resource\n  */\n  accounts: CardAccountsResource;\n}\n\n/**\n * @interface CardAccountLimits\n */\nexport interface CardAccountLimits {\n\n  /**\n  * Daily ATM limit on credit line. Daily ATM limit for all credit cards issued to mainAccount.\n  */\n  limitATM?: Amount;\n\n  /**\n  * Daily POS limit on credit line. Daily POS limit for all credit cards issued to mainAccount.\n  */\n  limitPOS?: Amount;\n}\n\n/**\n * @interface CardMainAccount\n */\nexport interface CardMainAccount {\n\n  /**\n  * Internal ID as reference for account provided by BE\n  */\n  id?: string;\n\n  /**\n  * Full name of the main account's holder.\n  */\n  holderName: string;\n\n  /**\n  * Main account is credit card shadow account for credit card or linked main current account for bank/debit card.\n  */\n  accountno: AccountNumber;\n}\n\n/**\n * @interface ChangeCardSettingsResponse\n * @extends {Card}\n * @extends {Signable}\n */\nexport interface ChangeCardSettingsResponse extends Card, Signable {\n\n  /**\n  * ID of the branch\n  */\n  branchId?: string;\n}\n\n/**\n * @interface ChangeCardSettingsRequest\n */\nexport interface ChangeCardSettingsRequest {\n\n  /**\n  * Alias of the card\n  */\n  alias?: string;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/cards/cards.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Signable, Address } from '../common';\n\n/**\n * Get current delivery settings\n * @class CardDeliveryResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.GetEnabled<DeliveryListing>}\n * @implements {CSCoreSDK.UpdateEnabled<ChangeDeliverySettingsRequest, ChangeDeliverySettingsResponse>}\n */\nexport class CardDeliveryResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.GetEnabled<DeliveryListing>, CSCoreSDK.UpdateEnabled<ChangeDeliverySettingsRequest, ChangeDeliverySettingsResponse> {\n\n  /**\n   * Returns current delivery settings\n   * @returns {Promise<DeliveryListing>}\n   */\n  get = (): Promise<DeliveryListing> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null);\n  }\n\n  /**\n   * Change current delivery settings \n   * @param {ChangeDeliverySettingsRequest} payload\n   * @returns {Promise<ChangeDeliverySettingsResponse>}\n   */\n  update = (payload: ChangeDeliverySettingsRequest): Promise<ChangeDeliverySettingsResponse> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n  }\n}\n\n/**\n * @interface DeliveryListing\n */\nexport interface DeliveryListing {\n\n  /**\n  * Type of the delivery which should be set for this card. Possible values are BRANCH, OTHER_BRANCH, HOME, ADDRESS_ABROAD.\n  */\n  cardDeliveryMode: string;\n\n  /**\n  * Identification of the branch where card will be ready to takeover.\n  */\n  branchId: string;\n\n  /**\n  * Address where card should be sent.\n  */\n  address: Address;\n\n  /**\n  * Information about the confirmation\n  */\n  confirmations?: [Confirmation];\n}\n\n/**\n * @interface Confirmation\n */\nexport interface Confirmation {\n\n  /**\n  * Email\n  */\n  email: string;\n\n  /**\n  * Language\n  */\n  language: string;\n}\n\n/**\n * @interface ChangeDeliverySettingsResponse\n * @extends {DeliveryListing}\n * @extends {Signable}\n */\nexport interface ChangeDeliverySettingsResponse extends DeliveryListing, Signable { }\n\n/**\n * @interface ChangeDeliverySettingsRequest\n */\nexport interface ChangeDeliverySettingsRequest {\n\n  /**\n  * Indicates how a client receives their card and pin. Possible values: BRANCH, HOME, OTHER_BRANCH, ADDRESS_ABROAD.\n  */\n  cardDeliveryMode: string;\n\n  /**\n  * ID of a branch where card should be sent.\n  */\n  branchId?: string;\n\n  /**\n  * Address where card should be sent.\n  */\n  address?: Address;\n\n  /**\n  * Phone number of the client.\n  */\n  deliveryPhone?: string;\n\n  /**\n  * Information about the confirmation\n  */\n  confirmations: [Confirmation];\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/cards/delivery.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { AddNoteAndMarkTransactionRequest, ExportTransactionsParameters, Transaction, Signable } from '../common';\n\n/**\n * Allows to add or change a client's personal note and mark/star the card transaction as favorite/important for one specific transaction\n * @class CardTransactionsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.HasInstanceResource<CardTransactionResource>}\n */\nexport class CardTransactionsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.HasInstanceResource<CardTransactionResource>, CSCoreSDK.ParametrizedExportEnabled<ExportTransactionsParameters, Uint8Array> {\n\n  /**\n   * Returns CardTransactionResource for a given id\n   * @param {string} id\n   * @returns {CardTransactionResource}\n   */\n  withId = (id: string): CardTransactionResource => {\n    return new CardTransactionResource(id, this.getPath(), this._client);\n  }\n\n  /**\n   * Export transactions to PDF\n   * @param {ExportTransactionsParameters} params\n   * @returns {Promise<Uint8Array>}\n   */\n  export = (params: ExportTransactionsParameters): Promise<Uint8Array> => {\n\n    // transform \"fields\" parameter to comma separated list from array\n    CSCoreSDK.EntityUtils.transformArrayParamsToString(params, 'fields');\n\n    // transform Date objects to ISO strings\n    CSCoreSDK.EntityUtils.transformDatesToISO(['dateFrom', 'dateTo'], params);\n\n    // insert 'cz' resource into the resource's path once because the api requires it in some resources\n    var path = this.getPath().replace('/my', '/cz/my');\n\n    return this._client.callApi(`${path}/export`, 'POST', params, null, null, 'arraybuffer');\n  }\n}\n\n/**\n * Add or change a client's personal note and mark/star the card transaction as favorite/important\n * @class CardTransactionResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.UpdateEnabled<AddNoteAndMarkTransactionRequest, AddNoteAndMarkCardTransactionResponse>}\n */\nexport class CardTransactionResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.UpdateEnabled<AddNoteAndMarkTransactionRequest, AddNoteAndMarkCardTransactionResponse> {\n\n  /**\n   * Adds, changes of marks transaction\n   * @param {AddNoteAndMarkTransactionRequest} payload\n   * @returns {Promise<AddNoteAndMarkCardTransactionResponse>}\n   */\n  update = (payload: AddNoteAndMarkTransactionRequest): Promise<AddNoteAndMarkCardTransactionResponse> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n  }\n}\n\n/**\n * @interface AddNoteAndMarkCardTransactionResponse\n * @extends {Signable}\n */\nexport interface AddNoteAndMarkCardTransactionResponse extends Signable {\n  cardTransaction: Transaction;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/cards/transactions.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Signable } from '../common';\nimport { Confirmation } from './delivery';\n\n/**\n * Issue various actions on a single card. \n * @class CardActionsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.UpdateEnabled<CardActionRequest, CardActionResponse>}\n */\nexport class CardActionsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.UpdateEnabled<CardActionRequest, CardActionResponse> {\n\n  /**\n   * Issues various actions on a single card\n   * @param {CardActionRequest} payload\n   * @returns {Promise<CardActionResponse>}\n   */\n  update = (payload: CardActionRequest): Promise<CardActionResponse> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n      // Remove signInfo from response and add SigningObject with key signing\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface CardActionResponse\n * @extends {CSCoreSDK.Signable}\n */\nexport interface CardActionResponse extends CSCoreSDK.Signable { }\n\n/**\n * @interface CardActionRequest\n */\nexport interface CardActionRequest {\n\n  /**\n   * Action which should be issued. Possible values are \"REISSUE_PIN\", \"LOCK_CARD\", \"UNLOCK_CARD\", \"REPLACE_CARD\", \"ACTIVATE_CARD\", \"SET_AUTOMATIC_REPLACEMENT_ON\", \"SET_AUTOMATIC_REPLACEMENT_OFF\".\n   */\n  action: string;\n\n  /**\n  * Reason why card should be locked. Possible values are \"THEFT\" and \"LOSS\". Relevant only for action \"LOCK_CARD\".\n  */\n  lockReason?: string;\n\n  /**\n  * Information about the confirmation\n  */\n  confirmations?: [Confirmation];\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/cards/actions.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../common';\nimport { Confirmation } from './delivery';\n\n/**\n * Get information about different limits\n * @class CardLimitsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<CardLimit>}\n * @implements {CSCoreSDK.UpdateEnabled<ChangeCardLimitsRequest, ChangeCardLimitsResponse>}\n */\nexport class CardLimitsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<CardLimit>, CSCoreSDK.UpdateEnabled<ChangeCardLimitsRequest, ChangeCardLimitsResponse> {\n\n  /**\n   * List all limits\n   * @returns {Promise<CardLimitsList>}\n   */\n  list = (): Promise<CardLimitsList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'limits').then(response => {\n\n      // transform ISO dates to native Date objects\n      CSCoreSDK.EntityUtils.addDatesToItems('temporaryLimitExpiration', response);\n\n      return response;\n    });\n  }\n\n  /**\n   * Update individual limits\n   * @param {ChangeCardLimitsRequest} payload\n   * @returns {Promise<ChangeCardLimitsResponse>}\n   */\n  update = (payload: ChangeCardLimitsRequest): Promise<ChangeCardLimitsResponse> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n      // transform ISO dates to native Date objects\n      CSCoreSDK.EntityUtils.addDatesToItems('temporaryLimitExpiration', response, 'limits');\n\n      // Remove signInfo from response and add SigningObject with key signing\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    })\n  }\n}\n\n/**\n * @interface CardLimitsList\n * @extends {CSCoreSDK.ListResponse<CardLimit>}\n */\nexport interface CardLimitsList extends CSCoreSDK.ListResponse<CardLimit> { }\n\n/**\n * @interface CardLimit\n */\nexport interface CardLimit {\n\n  /**\n  * Limit type defines ATM, POS, internet/eCommerce, total limits. Possible Values: ATM, POS, INTERNET\n  */\n  limitType: string;\n\n  /**\n  * Bank limit's period in days defined for limit type (default daily - 1D). Possible Values: 1D, 2D, 3D, 5D, 7D, 10D, 15D, 30D\n  */\n  limitPeriod: string;\n\n  /**\n  * Current limit amount valid for limit's type and period\n  */\n  limit?: Amount;\n\n  /**\n  * Temporary limit amount valid for limit's type and period\n  */\n  temporaryLimit?: Amount;\n\n  /**\n  * Temporary limit expiration date for limit's type and period. Field is mandatory if temporatyLimits are changed by PUT call. It is possible to set temporaryLimitExpiration up to 120 hours to the future.\n  */\n  temporaryLimitExpiration?: Date;\n\n  /**\n  * Maximum limit amount for card defined by bank valid for limit's type and period.\n  */\n  bankLimit?: Amount;\n}\n\n/**\n * @interface ChangeCardLimitsResponse\n * @extends {CSCoreSDK.Signable}\n */\nexport interface ChangeCardLimitsResponse extends CSCoreSDK.Signable {\n\n  /**\n  * Card's limits\n  */\n  limits?: [CardLimit];\n\n  /**\n  * Information about the confirmation\n  */\n  confirmations?: [Confirmation];\n}\n\n/**\n * @interface ChangeCardLimitsRequest\n */\nexport interface ChangeCardLimitsRequest {\n\n  /**\n  * Card's limits\n  */\n  limits?: [CardLimit];\n\n  /**\n  * Information about the confirmation\n  */\n  confirmations?: [Confirmation];\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/cards/limits.ts","import * as CSCoreSDK from 'cs-core-sdk';\n\n/**\n * Get the 3D secure online shopping status\n * @class CardSecure3DResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.GetEnabled<SecureSettings>}\n */\nexport class CardSecure3DResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.GetEnabled<SecureSettings> {\n\n  /**\n   * Returns 3D secure online shopping status\n   * @returns {Promise<SecureSettings>}\n   */\n  get = (): Promise<SecureSettings> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null);\n  }\n}\n\n/**\n * @interface SecureSettings\n */\nexport interface SecureSettings {\n\n  /**\n  * 3D secure functionality status. Possible Values: OK, NOT_ACTIVATED\n  */\n  status?: string;\n\n  /**\n  * Personal Assurance Message (PAM) that user chose when activate 3D secure\n  */\n  pam?: string;\n\n  /**\n  * Phone (used for OTP authentification) number Id coming from Contacts\n  */\n  phoneNumber?: string;\n\n  /**\n  * 3D Secure language\n  */\n  language?: string;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/cards/secure3D.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { AccountNumber, Amount } from '../common';\n\n/**\n * Resource for paying up credit card debt  \n * @class CardTransferResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.UpdateEnabled<PayUpCreditCardRequest, PayUpCreditCardResponse>}\n */\nexport class CardTransferResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.UpdateEnabled<PayUpCreditCardRequest, PayUpCreditCardResponse> {\n\n  /**\n   * Pays up the credit card debt and returns sign info  \n   * @param {PayUpCreditCardRequest} payload\n   * @returns {Promise<PayUpCreditCardResponse>}\n   */\n  update = (payload: PayUpCreditCardRequest): Promise<PayUpCreditCardResponse> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n      // Remove signInfo from response and add SigningObject with key signing\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface PayUpCreditCardRequest\n */\nexport interface PayUpCreditCardRequest {\n\n  /**\n  * Type of the transfer. Currently only DEBT_REPAYMENT is supported.\n  */\n  type: string;\n\n  /**\n  * Information about the sender\n  */\n  sender: Sender;\n\n  /**\n  * Amount which should be transfered.\n  */\n  amount: Amount;\n}\n\n/**\n * @interface Sender\n */\nexport interface Sender {\n\n  /**\n  * Identification of the source account for the transfer.\n  */\n  id?: string;\n\n  /**\n  * Account number of the source account for the transfer.\n  */\n  accountno: AccountNumber;\n}\n\n/**\n * @interface PayUpCreditCardResponse\n * @extends {CSCoreSDK.Signable}\n */\nexport interface PayUpCreditCardResponse extends CSCoreSDK.Signable { }\n\n\n// WEBPACK FOOTER //\n// ./lib/cards/transfer.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { StatementList, Statement, NetbankingParameters, DownloadStatementParameters } from '../common';\n\n/**\n * Account resource for listing statements\n * @class CardAccountsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.HasInstanceResource<CardAccountResource>}\n */\nexport class CardAccountsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.HasInstanceResource<CardAccountResource> {\n\n  /**\n   * Returns CardAccountResource for an account with a given id\n   * @param {string} id\n   * @returns {CardAccountResource}\n   */\n  withId = (id: string): CardAccountResource => {\n    return new CardAccountResource(id, this.getPath(), this._client);\n  }\n}\n\n/**\n * Indidiual account resource with a given id\n * @class CardAccountResource\n * @extends {CSCoreSDK.InstanceResource}\n */\nexport class CardAccountResource extends CSCoreSDK.InstanceResource {\n\n  /**\n   * Get statements of the account\n   * @returns {CardStatementsResource}\n   */\n  get statements(): CardStatementsResource {\n    return new CardStatementsResource(this.getPath() + '/statements', this._client);\n  }\n}\n\n/**\n * Get statements for an account\n * @class CardStatementsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Statement>}\n */\nexport class CardStatementsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Statement>, CSCoreSDK.ParametrizedDownloadEnabled<DownloadStatementParameters, Uint8Array> {\n\n  /**\n   * List all statements\n   * @param {NetbankingParameters=} params\n   * @returns {Promise<StatementList>}\n   */\n  list = (params?: NetbankingParameters): Promise<StatementList> => {\n\n    // transform \"sort\" and \"order\" parameters to comma separated list from array\n    CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'statements', params, response => {\n\n      // transform ISO dates to native Date objects\n      CSCoreSDK.EntityUtils.addDatesToItems('statementDate', response)\n\n      return response;\n    });\n  }\n\n  /**\n   * Download PDF with statements\n   * @param {DownloadStatementParameters} params\n   * @returns {Promise<Uint8Array>}\n   */\n  download = (params: DownloadStatementParameters): Promise<Uint8Array> => {\n    return CSCoreSDK.ResourceUtils.CallDownload(this, 'signed/download', 'POST', params);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/cards/statements.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount, Signable, AccountNumber, NetbankingParameters, NetbankingEmptyResponse } from '../common';\nimport { PaymentBookingDateResource } from './bookingDate';\nimport { PaymentsDomesticResource } from './domestic';\nimport { PaymentLimitsResource } from './limits';\nimport { PaymentMobileResource } from './mobile';\nimport { Symbols } from '../common';\n\n/**\n * Get information about payments orders\n * @class OrdersResource\n * @extends {CSCoreSDK.Resource}\n */\nexport class OrdersResource extends CSCoreSDK.Resource {\n\n  /**\n   * Returns PaymentsResource for listing, deleting and accessing other information about payments\n   * @returns {PaymentsResource}\n   */\n  get payments(): PaymentsResource {\n    return new PaymentsResource(this.getPath() + '/payments', this._client);\n  }\n}\n\n/**\n * List payments, get individual payment and other resources\n * @class PaymentsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.HasInstanceResource<PaymentResource>}\n * @implements {CSCoreSDK.PaginatedListEnabled<Payment>}\n */\nexport class PaymentsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.HasInstanceResource<PaymentResource>, CSCoreSDK.PaginatedListEnabled<Payment> {\n\n  /**\n   * List all payments\n   * @param {NetbankingParameters=} params\n   * @returns {Promise<PaymentList>}\n   */\n  list = (params?: NetbankingParameters): Promise<PaymentList> => {\n\n    // transform \"sort\" and \"order\" parameters to comma separated list from array\n    CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'order', params, response => {\n\n      response.items.forEach(item => {\n\n        // transform ISO dates to native Date objects\n        CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], item);\n\n        // Remove signInfo from response and add SigningObject with key signing\n        CSCoreSDK.SigningUtils.createSigningObject(item, this.getClient(), `${this.getClient().getPath()}/orders/payments/${(<Payment>item).id}`);\n\n        // add convenient get and delete methods for fetching order's detail and removing order\n        resourcifyListing(<Payment>item, this.withId((<Payment>item).id));\n      });\n      return response;\n    })\n  }\n\n  /**\n   * Get individual payment with a given id\n   * @param {string|number} id\n   * @returns {PaymentResource}\n   */\n  withId = (id: string | number): PaymentResource => {\n    return new PaymentResource(id, this.getPath(), this._client);\n  }\n\n  /**\n   * Get currently available booking date\n   * @returns {PaymentBookingDateResource}\n   */\n  get bookingDate(): PaymentBookingDateResource {\n    return new PaymentBookingDateResource(this.getPath() + '/bookingdate', this._client);\n  }\n\n  /**\n   * Create domestic payment order\n   * @returns {PaymentsDomesticResource}\n   */\n  get domestic(): PaymentsDomesticResource {\n    return new PaymentsDomesticResource(this.getPath() + '/domestic', this._client);\n  }\n\n  /**\n   * Get remaining amounts for payment orders\n   * @returns {PaymentLimitsResource}\n   */\n  get limits(): PaymentLimitsResource {\n    return new PaymentLimitsResource(this.getPath() + '/limits', this._client);\n  }\n\n  /**\n   * Recharging the credit available on prepaid cards provided by Vodafone, T-Mobile or O2.\n   * @returns {PaymentMobileResource}\n   */\n  get mobile(): PaymentMobileResource {\n    return new PaymentMobileResource(this.getPath() + '/mobile', this._client);\n  }\n}\n\n/**\n * Individual Payment order resource\n * @class PaymentResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<Payment>}\n * @implements {CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse>}\n */\nexport class PaymentResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<Payment>, CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse> {\n\n  /**\n   * Get detail of the payment\n   * @returns {Promise<Payment>}\n   */\n  get = (): Promise<Payment> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(payment => {\n\n      // transform ISO dates to native Date objects\n      CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], payment);\n\n      // Remove signInfo from response and add SigningObject with key signing\n      CSCoreSDK.SigningUtils.createSigningObject(payment, this.getClient(), `${this.getClient().getPath()}/orders/payments/${(<Payment>payment).id}`);\n\n      return payment;\n    });\n  }\n\n  /**\n   * Delete payment\n   * @returns {Promise<NetbankingEmptyResponse>}\n   */\n  delete = (): Promise<NetbankingEmptyResponse> => {\n    return CSCoreSDK.ResourceUtils.CallDelete(this, null);\n  }\n\n}\n\nfunction resourcifyListing(paymentListing: Payment, paymentResource: PaymentResource) {\n  paymentListing.get = paymentResource.get;\n  paymentListing.delete = paymentResource.delete;\n}\n\n/**\n * @interface PaymentList\n * @extends {CSCoreSDK.PaginatedListResponse<Payment>}\n */\nexport interface PaymentList extends CSCoreSDK.PaginatedListResponse<Payment> { }\n\n/**\n * @interface Payment\n * @extends {CSCoreSDK.Signable}\n */\nexport interface Payment extends CSCoreSDK.Signable {\n\n  /**\n  * Internal identifier of payment order. Note that after signing of the order the id could change.\n  */\n  id: string;\n\n  /**\n  * Transaction reference ID provided by BE when payment order was executed.\n  */\n  referenceId?: string;\n\n  /**\n  * Payment order category determines whether payment is domestic, SEPA, international or inside the bank (domestic, but could be different processing) or between accounts of the same user (domestic, but with better fee policy). Possible values: DOMESTIC, OWN_TRANSFER, SEPA, INTERNATIONAL.\n  */\n  orderCategory: string;\n\n  /**\n  * Payment order type (outgoing payment, outgoing direct debit, incoming direct debit) determines further transaction processing in BE. Values: PAYMENT_OUT, DIRECT_DEBIT_IN\n  */\n  orderType: string;\n\n  /**\n  * sender name\n  */\n  senderName?: string;\n\n  /**\n  * sender account number\n  */\n  sender: AccountNumber;\n\n  /**\n  * receiver name\n  */\n  receiverName?: string;\n\n  /**\n  * Receiver IBAN in case of international payments.\n  */\n  receiver: AccountNumber;\n\n  /**\n  * payment amount\n  */\n  amount: Amount;\n\n  /**\n  * Information about the symbols\n  */\n  symbols?: Symbols;\n\n  /**\n  * Message for payee set during payment order creation. It is used to identify transaction on receiver side. Array of texts 4x35.\n  */\n  additionalInfo?: Info;\n\n  /**\n  * Message for me set during payment order creation.\n  */\n  senderReference?: string;\n\n  /**\n  * Datetime when payment order was created/updated (the last time) by user (read-only field is automatically setup/changed by BE system based on POST/PUT request).\n  */\n  executionDate?: Date;\n\n  /**\n  * Modification date indicates the last update of payment order done by user or BE system (read-only field provided by BE).\n  */\n  modificationDate?: Date;\n\n  /**\n  * payment transfer date\n  */\n  transferDate?: Date;\n\n  /**\n  * Datetime till when payment order will be repeated on BE in the case of insufficient funds on account.\n  */\n  expirationDate?: Date;\n\n  /**\n  * Date and time which should be used for default ordering of the payment orders for display.\n  */\n  \"cz-orderingDate\": Date;\n\n  /**\n  * Status of the payment order (details above), State of payment order presented to user on FE). Possible values: OPEN, SPOOLED, CANCELLED, CLOSED and DELETED\n  */\n  state: string;\n\n  /**\n  * State detail of payment order provided based on BE technical states.\n  */\n  stateDetail: string;\n\n  /**\n  * Indicator whether state (stateDetail value) of payment order is OK from user point of view. For mapping between stateDetail and stateOk indicator values see table below.\n  */\n  stateOk: boolean;\n\n  /**\n  * description of payment order, transaction type\n  */\n  \"cz-description\"?: string;\n\n  /**\n  * ID of the application via which this payment order was entered/modified the last time. Possible values: GEORGE, ATM_PAYMENT, ATM_OTHER, GSM, BRANCH_FE, POST_OFFICE, INTERNET_BANKING, TELEPHONE_BANKER, COLLECTION_BOX, VIDEO_BANKER and UNKNOWN.\n  */\n  applicationId?: string;\n\n  /**\n  * ID of the channel via which this payment order was entered/modified the last time. Possible values: NET_BANKING, ATM, MOBILE_BANKING, ATM, BRANCH, POST_OFFICE, CALL_CENTRE, VIDEO_BANKING and UNKNOWN\n  */\n  channelId?: string;\n\n  /**\n  * Receiver's address\n  */\n  receiverAddress?: string;\n\n  /**\n  * Array of optional Flag values depends on Payment order category, type.\n  */\n  flags?: [string];\n\n  /**\n   * Convenience method for retrieving payment's detail\n   * @returns {Promise<Payment>}\n   */\n  get: () => Promise<Payment>;\n\n  /**\n   * Convenience method for removing payment\n   * @returns {Promise<NetbankingEmptyResponse>}\n   */\n  delete: () => Promise<NetbankingEmptyResponse>;\n}\n\n/**\n * @interface Info\n */\nexport interface Info {\n\n  /**\n  * Message for payee set during payment order creation. It is used to identify transaction on receiver side. Array of texts 4x35.\n  */\n  text4x35?: [string];\n}\n\n/**\n * @interface RemovePaymentOrderResponse\n * @extends {Signable}\n */\nexport interface RemovePaymentOrderResponse extends Signable { }\n\n\n// WEBPACK FOOTER //\n// ./lib/orders/orders.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { AccountNumber } from '../common';\n\n/**\n * Get currently available booking date\n * @class PaymentBookingDateResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.UpdateEnabled<PaymentBookingDateRequest, PaymentBookingDateResponse>}\n */\nexport class PaymentBookingDateResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.UpdateEnabled<PaymentBookingDateRequest, PaymentBookingDateResponse> {\n\n  /**\n   * Returns current available booking date based on the provided account and optional payment order category parameters\n   * @param {PaymentBookingDateRequest} payload\n   * @returns {Promise<PaymentBookingDateResponse>}\n   */\n  update = (payload: PaymentBookingDateRequest): Promise<PaymentBookingDateResponse> => {\n\n    // make copy of payload\n    payload = JSON.parse(JSON.stringify(payload));\n\n    // get account's ID from passed object\n    var params = {\n      accountId: payload.accountId\n    };\n\n    delete payload.accountId;\n\n    return CSCoreSDK.ResourceUtils.CallApiWithSuffix(this, null, \"PUT\", params, payload).then(bookingDate => {\n\n      // transform ISO dates to native Date objects\n      CSCoreSDK.EntityUtils.addDatesFromISO('bookingDate', bookingDate);\n\n      return bookingDate;\n    });\n  }\n}\n\n/**\n * @interface PaymentBookingDateRequest\n */\nexport interface PaymentBookingDateRequest {\n\n  /**\n  * Account's ID\n  */\n  accountId: string;\n\n  /**\n  * Receiver's account number\n  */\n  receiver?: AccountNumber;\n\n  /**\n  * Payment order priority selected by user, ENUM values: URGENT (for express payments), STANDARD.\n  */\n  priority?: string;\n}\n\n/**\n * @interface PaymentBookingDateResponse\n */\nexport interface PaymentBookingDateResponse {\n\n  /**\n  * booking date value for provided account ID and payment order.\n  */\n  bookingDate: Date;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/orders/bookingDate.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount, AccountNumber, Symbols } from '../common';\nimport { Info, Payment } from './orders';\n\n/**\n * Create domestic payment order\n * @class PaymentsDomesticResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.CreateEnabled<DomesticPaymentCreateRequest, DomesticPaymentResponse>}\n */\nexport class PaymentsDomesticResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.CreateEnabled<DomesticPaymentCreateRequest, DomesticPaymentResponse> {\n\n  /**\n   * Creates domestic payment order and returns it in promise\n   * @param {DomesticPaymentCreateRequest} payload\n   * @returns {Promise<DomesticPaymentResponse>}\n   */\n  create = (payload: DomesticPaymentCreateRequest): Promise<DomesticPaymentResponse> => {\n\n    // transform Date object to ISO strings\n    CSCoreSDK.EntityUtils.transformDatesToISO('transferDate', payload);\n\n    return CSCoreSDK.ResourceUtils.CallCreate(this, payload).then(response => {\n\n      // transform ISO dates to native Date objects\n      CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], response);\n\n      // Remove signInfo from response and add SigningObject with key signing\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), `${this.getClient().getPath()}/orders/payments/${(<DomesticPaymentResponse>response).id}`);\n\n      return response;\n    });\n  }\n\n  /**\n   * Returns PaymentDomesticResource resource for updating domestic payment\n   * @param {string} id\n   * @returns {PaymentDomesticResource}\n   */\n  withId = (id: string): PaymentDomesticResource => {\n    return new PaymentDomesticResource(id, this.getPath(), this.getClient());\n  }\n\n}\n\n/**\n * Update domestic payment\n * @class PaymentDomesticResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.UpdateEnabled<DomesticPaymentUpdateRequest, DomesticPaymentResponse>}\n */\nexport class PaymentDomesticResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.UpdateEnabled<DomesticPaymentUpdateRequest, DomesticPaymentResponse> {\n\n  /**\n   * Updates domestic payment and returns it in promise\n   * @param {DomesticPaymentUpdateRequest} payload\n   * @returns {Promise<DomesticPaymentResponse>}\n   */\n  update = (payload: DomesticPaymentUpdateRequest): Promise<DomesticPaymentResponse> => {\n\n    // add ID to payload from resource id property\n    (<FullDomesticPaymentUpdateRequest>payload).id = this._id;\n\n    // transform Date object to ISO strings\n    CSCoreSDK.EntityUtils.transformDatesToISO('transferDate', payload);\n\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n      // transform ISO dates to native Date objects\n      CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], response);\n\n      // Remove signInfo from response and add SigningObject with key signing\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), `${this.getClient().getPath()}/orders/payments/${(<DomesticPaymentResponse>response).id}`);\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface FullDomesticPaymentUpdateRequest\n * @extends {DomesticPaymentUpdateRequest}\n */\nexport interface FullDomesticPaymentUpdateRequest extends DomesticPaymentUpdateRequest {\n\n  /**\n  * Internal identifier of payment order. Note that after signing of the order the id could change.\n  */\n  id: string;\n}\n\n/**\n * @interface DomesticPaymentUpdateRequest\n * @extends {DomesticPaymentCreateRequest}\n */\nexport interface DomesticPaymentUpdateRequest extends DomesticPaymentCreateRequest {\n\n  /**\n  * Status of the payment order (details above), State of payment order presented to user on FE). Possible values: OPEN, SPOOLED, CANCELLED, CLOSED and DELETED\n  */\n  state?: string;\n\n  /**\n  * State detail of payment order provided based on BE technical states.\n  */\n  stateDetail?: string;\n\n  /**\n  * Indicator whether state (stateDetail value) of payment order is OK from user point of view. For mapping between stateDetail and stateOk indicator values see table below.\n  */\n  stateOk?: boolean;\n}\n\n/**\n * @interface DomesticPaymentResponse\n * @extends {Payment}\n * @extends {CSCoreSDK.Signable}\n */\nexport interface DomesticPaymentResponse extends Payment, CSCoreSDK.Signable { }\n\n/**\n * @interface DomesticPaymentCreateRequest\n */\nexport interface DomesticPaymentCreateRequest {\n\n  /**\n  * Name of the sender\n  */\n  senderName: string;\n\n  /**\n  * Account number of the sender.\n  */\n  sender: DomesticPaymentAccount;\n\n  /**\n  * Name of the payee\n  */\n  receiverName: string;\n\n  /**\n  * Account number of payee\n  */\n  receiver: DomesticPaymentAccount;\n\n  /**\n  * Payment order amount.\n  */\n  amount: Amount;\n\n  /**\n  * Optional date (in the future) when this payment has to be done\n  */\n  transferDate?: Date;\n\n  /**\n  * Message for payee set during payment order creation. It is used to identify transaction on receiver side. Array of texts 4x35\n  */\n  additionalInfo?: Info;\n\n  /**\n  * Message for me set during payment order creation.\n  */\n  senderReference?: string;\n\n  /**\n  * Information about the symbols\n  */\n  symbols?: Symbols;\n\n  /**\n  * Array of optional Flag values depends on Payment order category, type.\n  */\n  flags?: [string];\n}\n\n/**\n * @interface DomesticPaymentAccount\n */\nexport interface DomesticPaymentAccount {\n\n  /**\n  * Account number with possible prefix. Format is \"XXXXXX-NNNNNNNNNN\" if prefix is not null or \"000000\". If prefix is not provided then format is \"NNNNNNNNNN\" without leading zeros.\n  */\n  number: string;\n\n  /**\n  * Bank Code\n  */\n  bankCode: string;\n\n  /**\n  * Code of the Country - 2 characters; mandatoryfor international orders.\n  */\n  countryCode?: string;\n\n  /**\n  * IBAN\n  */\n  \"cz-iban\"?: string;\n\n  /**\n  * BIC\n  */\n  \"cz-bic\"?: string;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/orders/domestic.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../common';\n\n/**\n * Get remaining amounts for payment orders\n * @class PaymentLimitsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<PaymentLimit>}\n */\nexport class PaymentLimitsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<PaymentLimit> {\n\n  /**\n   * List all limits for payment orders\n   * @returns {Promise<PaymentLimitsList>}\n   */\n  list = (): Promise<PaymentLimitsList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'remainingLimits', null);\n  }\n}\n\n/**\n * @interface PaymentLimitsList\n * @extends {CSCoreSDK.ListResponse<PaymentLimit>}\n */\nexport interface PaymentLimitsList extends CSCoreSDK.ListResponse<PaymentLimit> { }\n\n/**\n * @interface PaymentLimit\n */\nexport interface PaymentLimit {\n\n  /**\n  * Authorization method type for which is limit defined. ENUM: tac, tan, sms, gridCard, eok, displayCard, mToken. Other local authorization type has to be defined.\n  */\n  authorizationType: string;\n\n  /**\n  * ID of the channel for which is limit defined. ENUM: netBanking, mobileBanking, homeBanking, thirdParty, and unknown - remaining limit amount valid for all channels, not particulary defined.\n  */\n  channelId: string;\n\n  /**\n  * ID of the application for which is limit defined. ENUM: George, InternetBanking and unknown - remaining limit amount valid for all applications, not particulary defined.\n  */\n  applicationId: string;\n\n  /**\n  * Remaining Daily amount which can be transferred using particular authorization method and channel (_embedded AMOUNT type).\n  */\n  remainingAmount: Amount;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/orders/limits.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../common';\n\n/**\n * Recharging the credit available on prepaid cards provided by Vodafone, T-Mobile or O2.\n * @class PaymentMobileResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.CreateEnabled<MobilePaymentsRequest, MobilePaymentsResponse>}\n */\nexport class PaymentMobileResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.CreateEnabled<MobilePaymentsRequest, MobilePaymentsResponse> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Recharge the credit on prepaid card\n   * @param {MobilePaymentsRequest} payload\n   * @returns {Promise<MobilePaymentsResponse>}\n   */\n  create = (payload: MobilePaymentsRequest): Promise<MobilePaymentsResponse> => {\n\n    return CSCoreSDK.ResourceUtils.CallCreate(this, payload).then(response => {\n\n      // Remove signInfo from response and add SigningObject with key signing\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    })\n  }\n}\n\n/**\n * @interface MobilePaymentsRequest\n */\nexport interface MobilePaymentsRequest {\n\n  /**\n  * Type of mobile payment depending on provider of mobile services. Possible values: TOP_UP (for all operators) and INVOICE, VODAFONE_PAYMENT, MOBILE_DEPOSIT (for Vodafone).\n  */\n  paymentType: string;\n\n  /**\n  * Phone number.\n  */\n  phoneNumber: string;\n\n  /**\n  * Sender name\n  */\n  sender: MobilePaymentSender;\n\n  /**\n  * Payment amount.\n  */\n  amount: Amount;\n\n  /**\n  * Invoice number used as identifier of mobile payment on mobile service provider side (only for paymentType: INVOICE).\n  */\n  invoiceNumber?: string;\n\n  /**\n  * Phone number used for sending of confirmation of mobile payment execution. Not available for paymentType: INVOICE.\n  */\n  confirmationPhoneNumber: string;\n}\n\n/**\n * @interface MobilePaymentsResponse\n * @extends {MobilePaymentsRequest}\n * @extends {CSCoreSDK.Signable}\n */\nexport interface MobilePaymentsResponse extends MobilePaymentsRequest, CSCoreSDK.Signable { }\n\n/**\n * @interface MobilePaymentSender\n */\nexport interface MobilePaymentSender {\n\n  /**\n  * Account number with possible prefix. Format is \"XXXXXX-NNNNNNNNNN\" if prefix is not null or \"000000\". If prefix is not provided then format is \"NNNNNNNNNN\" without leading zeros.\n  */\n  number: string;\n\n  /**\n  * Bank Code\n  */\n  bankCode: string;\n\n  /**\n  * Code of the Country - 2 characters; mandatoryfor international orders.\n  */\n  countryCode?: string;\n\n  /**\n  * IBAN\n  */\n  iban: string;\n\n  /**\n  * BIC\n  */\n  bic: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/orders/mobile.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { SecurityTransactionsResource } from './transactions';\nimport { Amount, Signable } from '../common';\n\n/**\n * @class SecuritiesResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Security>}\n * @implements {CSCoreSDK.HasInstanceResource<SecurityResource>}\n */\nexport class SecuritiesResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Security>, CSCoreSDK.HasInstanceResource<SecurityResource> {\n\n  /**\n   * Returns list of securities accounts for current user. Securities account represents virtual account which holds securities titles and its shares (funds, bonds, etc.).\n   * @param {SecuritiesParams=} params\n   * @returns {Promise<SecurityList>}\n   */\n  list = (params?: SecuritiesParams): Promise<SecurityList> => {\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'securitiesAccounts', params, response => {\n\n      transformDatesInSubSecAccounts(response);\n      response.items.forEach(sec => {\n        resourcifySecurity(<Security>sec, this.withId((<Security>sec).id));\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Get resource of security with a given id \n   * @param {string} id\n   * @returns {SecuritiesResource}\n   */\n  withId = (id: string): SecurityResource => {\n    return new SecurityResource(id, this.getPath(), this.getClient());\n  }\n}\n\n/**\n * @class SecurityResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<Security>}\n * @implements {CSCoreSDK.UpdateEnabled<SecurityRequest, SecurityResponse>}\n */\nexport class SecurityResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<Security>, CSCoreSDK.UpdateEnabled<SecurityRequest, SecurityResponse> {\n\n  /**\n   * Get a single securities account with all its details. Securities account represents virtual account which holds securities titles and its shares (funds, bonds, etc.).\n   * @returns {Promise<Security>}\n   */\n  get = (): Promise<Security> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n      transformDatesInSubSecAccounts(response);\n      resourcifySecurity(<Security>response, this);\n\n      return response;\n    });\n  }\n\n  /**\n   * Allows to change a limited set of securities account-settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process.\n   * @param {SecurityRequest} payload\n   * @returns {Promise<SecurityResponse>}\n   */\n  update = (payload: SecurityRequest): Promise<SecurityResponse> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n      transformDatesInSubSecAccounts(response);\n      resourcifySecurity(<Security>response, this);\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n\n  /**\n   * Returns security transactions resource\n   * @returns {SecurityTransactionsResource}\n   */\n  get transactions(): SecurityTransactionsResource {\n    return new SecurityTransactionsResource(`${this.getPath()}/transactions`, this.getClient());\n  }\n}\n\nfunction transformDatesInSubSecAccounts(response) {\n  if (response.subSecAccounts && Array.isArray(response.subSecAccounts)) {\n    response.subSecAccounts.forEach(acc => {\n      CSCoreSDK.EntityUtils.addDatesFromISO('lastPriceDate', acc);\n    });\n  }\n}\n\nfunction resourcifySecurity(security: Security, securityReference: SecurityResource) {\n  security.transactions = securityReference.transactions;\n  security.get = securityReference.get;\n  security.update = securityReference.update;\n}\n\n/**\n * @interface SecurityList\n * @extends {CSCoreSDK.PaginatedListResponse<Security>}\n */\nexport interface SecurityList extends CSCoreSDK.PaginatedListResponse<Security> { }\n\n/**\n * @interface Security\n */\nexport interface Security {\n\n  /**\n   * Product id\n   */\n  id: string;\n\n  /**\n   * Account identification number of security portfolio (MUIN)\n   */\n  accountno: string;\n\n  /**\n   * Alias for security portfolio. Max. 50 characters.\n   */\n  alias?: string;\n\n  /**\n   * Description - Securities portfolio Account name, Name of principal account holder\n   */\n  description: string;\n\n  /**\n   * Account balance value\n   */\n  balance: Amount;\n\n  /**\n   * Array of securities sub accounts\n   */\n  subSecAccounts?: [SubSecAccount];\n\n  /**\n  * Convenience getter for getting security's transactions resource\n  */\n  transactions: SecurityTransactionsResource;\n\n  /**\n   * Convenience method for getting security detail right from the list \n   * @returns {Promise<Security>}\n   */\n  get: () => Promise<Security>;\n\n  /**\n   * Convenience method for updating security's details\n   * @param {SecurityRequest} payload\n   * @returns {Promise<SecurityResponse>}\n   */\n  update: (payload: SecurityRequest) => Promise<SecurityResponse>;\n}\n\n/**\n * @interface SubSecAccount\n */\nexport interface SubSecAccount {\n\n  /**\n   * Sub Securities Account ID\n   */\n  id: string;\n\n  /**\n   * Array of the titles within sub account.\n   */\n  titles?: [{\n\n    /**\n     * Name of the security title.\n     */\n    title: string;\n\n    /**\n     * ISIN - identifier of the security title.\n     */\n    isin: string;\n\n    /**\n     * Number of securities/shares\n     */\n    numberOfShares: number;\n\n    /**\n     * Last Price of Securities title\n     */\n    lastPrice: Amount;\n\n    /**\n     * Date of securities last price evaluation\n     */\n    lastPriceDate: Date;\n\n    /**\n     * Market value of the securities title.\n     */\n    marketValue: Amount;\n\n    /**\n     * Security Product Type. Possible values: BOND, SHARE, FUND, IPO, OPTION, OTHER, INDEX, CERTIFICATE, INVESTMENT,KNOCKOUT, UNKNOWN.\n     */\n    securityType: string;\n\n    /**\n     * Security Product Group. Possible values: BONDS_AND_MORE, GUARANTEE_OF_PRINCIPAL, NO_GUARANTEE_OF_PRINCIPAL, REAL_ESTATE, SHARES, STOCK_AND_MIXED, INVESTMENT, KNOCK_OUT, UNKNOWN.\n     */\n    productGroup: string;\n\n    /**\n     * Localized security indication depending on security type and product group\n     */\n    securityIndication: string;\n  }];\n\n  /**\n   * Array of flags.\n   */\n  flags: [string]\n}\n\n/**\n * @interface SecuritiesParams\n * @extends {CSCoreSDK.Paginated}\n */\nexport interface SecuritiesParams extends CSCoreSDK.Paginated { }\n\n/**\n * @interface SecurityRequest\n */\nexport interface SecurityRequest {\n\n  /**\n   * Alias for security portfolio. Max. 50 characters.\n   */\n  alias?: string;\n}\n\n/**\n * @interface SecurityResponse\n * @extends {Security}\n * @extends {CSCoreSDK.Signable}\n */\nexport interface SecurityResponse extends Security, CSCoreSDK.Signable { }\n\n\n// WEBPACK FOOTER //\n// ./lib/securities/securities.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Signable, ExportTransactionsParameters } from '../common';\n\n/**\n * @class SecurityTransactionsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.HasInstanceResource<SecurityTransactionResource>}\n */\nexport class SecurityTransactionsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.HasInstanceResource<SecurityTransactionResource>, CSCoreSDK.ParametrizedExportEnabled<ExportTransactionsParameters, Uint8Array> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Get resource of security transaction with a given id\n   * @param {string} id\n   * @returns {SecurityTransactionResource}\n   */\n  withId = (id: string): SecurityTransactionResource => {\n    return new SecurityTransactionResource(id, this.getPath(), this.getClient());\n  }\n\n  /**\n   * Export transaction history into signed pdf. \n   * @param {ExportTransactionsParameters} params\n   * @return {Promise<Uint8Array>}\n   */\n  export = (params: ExportTransactionsParameters): Promise<Uint8Array> => {\n\n    // transform \"fields\" parameter to comma separated list from array\n    CSCoreSDK.EntityUtils.transformArrayParamsToString(params, 'fields');\n\n    // transform Date objects to ISO strings\n    CSCoreSDK.EntityUtils.transformDatesToISO(['dateFrom', 'dateTo'], params);\n\n    return this._client.callApi(`${this.getPath()}/export`, 'POST', params, null, null, 'arraybuffer');\n  }\n\n}\n\n/**\n * @class SecurityTransactionResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.UpdateEnabled<SecurityTransactionRequest, SecurityTransactionResponse>}\n */\nexport class SecurityTransactionResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.UpdateEnabled<SecurityTransactionRequest, SecurityTransactionResponse> {\n\n  /**\n   * Allows to add or change a client's personal note and mark/star the transaction as favorite/important for one specific transaction on selected product.\n   * @param {SecurityTransactionRequest} payload\n   * @returns {Promise<SecurityTransactionResponse>}\n   */\n  update = (payload: SecurityTransactionRequest): Promise<SecurityTransactionResponse> => {\n    (<any>payload).id = this._id;\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface SecurityTransactionRequest\n */\nexport interface SecurityTransactionRequest {\n\n  /**\n   * Personal, user specific note for transaction. Max. 4 000 characters.\n   */\n  note?: string;\n\n  /**\n   * List of flags.\n   */\n  flags?: [string];\n}\n\n/**\n * @interface SecurityTransactionResponse\n * @extends {CSCoreSDK.Signable}\n */\nexport interface SecurityTransactionResponse extends CSCoreSDK.Signable {\n\n  transaction: {\n\n    /**\n     * Transaction identifier.\n     */\n    id: string;\n\n    /**\n     * Personal, user specific note for transaction. Max. 4 000 characters.\n     */\n    note?: string;\n\n    /**\n     * List of flags.\n     */\n    flags?: [string];\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/securities/transactions.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Signable } from '../common';\n\n/**\n * @class SettingsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.GetEnabled<Settings>}\n * @implements {CSCoreSDK.UpdateEnabled<Settings, SignableSettings>}\n */\nexport class SettingsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.GetEnabled<Settings>, CSCoreSDK.UpdateEnabled<Settings, SignableSettings> {\n\n  /**\n   * Returns basic user settings.\n   * @returns {Promise<Settings>}\n   */\n  get = (): Promise<Settings> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null);\n  }\n\n  /**\n   * Change user settings. Currently only language can be changed by this endpoint.\n   * @param {Settings} payload\n   * @returns {Promise<SignableSettings>}\n   */\n  update = (payload: Settings): Promise<SignableSettings> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface Settings\n */\nexport interface Settings {\n\n  /**\n   * Preferred language. Possible values are cs and en.\n   */\n  language: string;\n\n  /**\n   * List of flags.\n   */\n  flags?: [string];\n}\n\n/**\n * @interface SignableSettings\n * @extends {CSCoreSDK.Signable}\n */\nexport interface SignableSettings extends CSCoreSDK.Signable {\n\n  settings: Settings;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/settings/settings.ts","import * as CSCoreSDK from 'cs-core-sdk';\n\n/**\n * @class ContactsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<Contact>}\n * @implements {CSCoreSDK.HasInstanceResource<ContactResource>}\n */\nexport class ContactsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<Contact>, CSCoreSDK.HasInstanceResource<ContactResource> {\n\n  /**\n   * Resource represents list of contact information for current user. It can contain addresses, phones and email addresses.\n   * @returns {Promise<ContactList>}\n   */\n  list = (): Promise<ContactList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'contacts');\n  }\n\n  /**\n   * Get the resource of contact with a given id\n   * @param {string} id\n   * @returns {ContactResource}\n   */\n  withId = (id: string): ContactResource => {\n    return new ContactResource(id, this.getPath(), this.getClient());\n  }\n}\n\n/**\n * @class ContactResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<Contact>}\n */\nexport class ContactResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<Contact> {\n\n  /**\n   * Resource represents one specific contact information identified by its id. It can be address, phone or email address.\n   * @returns {Promise<Contact>}\n   */\n  get = (): Promise<Contact> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null);\n  }\n}\n\n/**\n * @interface ContactList\n * @extends {CSCoreSDK.ListResponse<Contact>}\n */\nexport interface ContactList extends CSCoreSDK.ListResponse<Contact> { }\n\n/**\n * @interface Contact\n */\nexport interface Contact {\n\n  /**\n   * Contact ID\n   */\n  id: string;\n\n  /**\n   * Type of contact. ENUM values: ADDRESS, PHONE, EMAIL, FAX.\n   */\n  type: string;\n\n  /**\n   * Contact flags\n   */\n  flags?: [string];\n\n  /**\n   * Contact address\n   */\n  address?: {\n\n    /**\n     * Address type. ENUM values: PERMANENT_RESIDENCE, SECONDARY_RESIDENCE, COMPANY_RESIDENCE, UNKNOWN\n     */\n    type: string;\n\n    /**\n     * Localized name of address type.\n     */\n    typeI18N: string;\n\n    description?: string;\n\n    street: string;\n\n    streetNumber?: string | number;\n\n    buildingApartment?: string | number;\n\n    zipCode: string;\n\n    city: string;\n\n    country: string;\n  }\n\n  /**\n   * Contact phone\n   */\n  phone?: {\n\n    /**\n     * Phone type. ENUM: PRIVATE, COMPANY, UNKNOWN\n     */\n    type: string;\n\n    /**\n     * Localized name of phone type.\n     */\n    typeI18N: string;\n\n    /**\n     * Country calling code as international phone number prefix. E.g.: \"0043\" or \"+43\", \"00420\" or \"+420\", \"00421\" or \"+421\"\n     */\n    countryCallingCode: string;\n\n    /**\n     * Phone number\n     */\n    phoneNumber: string;\n  }\n\n  /**\n   * Primary contact email address\n   */\n  email?: {\n\n    /**\n     * Email type. ENUM values: PRIVATE, COMPANY, UNKNOWN\n     */\n    type: string;\n\n    /**\n     * Localized name of email type.\n     */\n    typeI18N: string;\n\n    /**\n     * Email\n     */\n    email: string;\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/contacts/contacts.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount, AccountNumber } from '../common';\n\n/**\n * @class PluginsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Plugin>}\n * @implements {CSCoreSDK.HasInstanceResource<PluginResource>}\n */\nexport class PluginsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Plugin>, CSCoreSDK.HasInstanceResource<PluginResource> {\n\n  /**\n   * Returns list of available plugins for current user. Plugin is application functionality which can be enabled/disabled by user.\n   * @param {PluginsParameters} params\n   * @returns {Promise<PluginList>}\n   */\n  list = (params: PluginsParameters): Promise<PluginList> => {\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'plugins', params, response => {\n\n      CSCoreSDK.EntityUtils.addDatesToItems(['validUntil', 'dateOfActivation'], response);\n\n      return response;\n    });\n  }\n\n  /**\n   * Returns resource of plugin with a given id\n   * @param {string} id\n   * @returns {PluginResource}\n   */\n  withId = (id: string): PluginResource => {\n    return new PluginResource(id, this.getPath(), this.getClient());\n  }\n}\n\n/**\n * @class PluginResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.UpdateEnabled<UpdatePluginRequest, SignablePlugin>}\n */\nexport class PluginResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.UpdateEnabled<UpdatePluginRequest, SignablePlugin> {\n\n  /**\n   * Activation and deactivation of the specific plugin. You can also change settlement account for given plugin and current user.\n   * @param {UpdatePluginRequest} payload\n   * @returns {Promise<SignablePlugin>}\n   */\n  update = (payload: UpdatePluginRequest): Promise<SignablePlugin> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n      CSCoreSDK.EntityUtils.addDatesFromISO(['validUntil', 'dateOfActivation'], response);\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface PluginList\n * @extends {CSCoreSDK.PaginatedListResponse<Plugin>}\n */\nexport interface PluginList extends CSCoreSDK.PaginatedListResponse<Plugin> { }\n\n/**\n * @interface Plugin\n * @extends {UpdatePluginRequest}\n */\nexport interface Plugin extends UpdatePluginRequest {\n\n  /**\n   * Localized name of the plugin.\n   */\n  name: string;\n\n  /**\n   * Date until plugin is valid.\n   */\n  validUntil: Date;\n\n  /**\n   * Date of activation of plugin for user.\n   */\n  dateOfActivation?: Date;\n\n  standardFees?: [{\n\n    /**\n     * Time moment of changing the plugin fee. Possible values are IMMEDIATELY, ACCOUNT_STATEMENT, UNKNOWN.\n     */\n    timeOfCharging: string;\n\n    /**\n     * Frequency period of changing the plugin fee. Possible values are MONTHLY, NON_RECURRING, UNKNOWN.\n     */\n    periodOfCharging: string;\n\n    /**\n     * Fee amount defined for this plugin.\n     */\n    amount: Amount;\n  }];\n}\n\n/**\n * @interface UpdatePluginRequest\n */\nexport interface UpdatePluginRequest {\n\n  /**\n   * Plugin unique identifier.\n   */\n  productCode: string;\n\n  /**\n   * User settlement account for charging fees.\n   */\n  settlementAccount?: AccountNumber;\n\n  /**\n   * Array of optional flag values.\n   */\n  flags?: [string];\n}\n\n/**\n * @interface PluginsParameters\n * @extends {CSCoreSDK.Paginated}\n */\nexport interface PluginsParameters extends CSCoreSDK.Paginated { }\n\n/**\n * @interface SignablePlugin\n * @extends {Plugin}\n * @extends {CSCoreSDK.Signable}\n */\nexport interface SignablePlugin extends Plugin, CSCoreSDK.Signable { }\n\n\n// WEBPACK FOOTER //\n// ./lib/plugins/plugins.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { BuildingsContractsResource } from './buildings/buildings';\nimport { PensionsContractsResource } from './pensions/pensions';\nimport { InsurancesContractsResource } from './insurances/insurances';\nimport { LoyaltyContractsResource } from './loyalty/loyalty';\n\n/**\n * @class ContractsResource\n * @extends {CSCoreSDK.Resource}\n */\nexport class ContractsResource extends CSCoreSDK.Resource {\n\n  /**\n   * Get buildings contracts resource\n   * @returns {BuildingsContractsResource}\n   */\n  get buildings(): BuildingsContractsResource {\n    return new BuildingsContractsResource(`${this.getPath()}/buildings`, this.getClient());\n  }\n\n  /**\n   * Get pensions contracts resource\n   * @returns {PensionsContractsResource}\n   */\n  get pensions(): PensionsContractsResource {\n    return new PensionsContractsResource(`${this.getPath()}/pensions`, this.getClient());\n  }\n\n  /**\n   * Get insurances contracts resource\n   * @returns {InsurancesContractsResource}\n   */\n  get insurances(): InsurancesContractsResource {\n    return new InsurancesContractsResource(`${this.getPath()}/insurances`, this.getClient());\n  }\n\n  /**\n   * Get loyalty contracts resource\n   * @returns {LoyaltyContractsResource}\n   */\n  get loyalty(): LoyaltyContractsResource {\n    return new LoyaltyContractsResource(`${this.getPath()}/loyalty`, this.getClient());\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/contracts.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { BuildingsContractsServicesResource } from './services';\nimport { ContractsTransactionsResource } from '../transactions';\nimport { AccountNumber, Amount, Signable } from '../../common';\n\n/**\n * @class BuildingsContractsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.HasInstanceResource<BuildingsContractResource>}\n * @implements {CSCoreSDK.PaginatedListEnabled<BuildingsContract>}\n */\nexport class BuildingsContractsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.HasInstanceResource<BuildingsContractResource>, CSCoreSDK.PaginatedListEnabled<BuildingsContract> {\n\n  /**\n   * Resource represents list of building savings for current user. It contains building savings and loans from building savings as well.\n   * @param {BuildingsContractsParameters=} params\n   * @returns {Promise<BuildingsContractList>}\n   */\n  list = (params?: BuildingsContractsParameters): Promise<BuildingsContractList> => {\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'buildings', params, response => {\n\n      response.items.forEach(item => {\n\n        resourcifyBuildingsContracts(<BuildingsContract>item, this.withId((<BuildingsContract>item).id));\n        transformDates(item);\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Get the resource of buildings contract with a given id\n   * @param {string} id\n   * @returns {BuildingsContractResource}\n   */\n  withId = (id: string): BuildingsContractResource => {\n    return new BuildingsContractResource(id, this.getPath(), this.getClient());\n  }\n}\n\n/**\n * @class BuildingsContractResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<BuildingsContract>}\n * @implements {CSCoreSDK.UpdateEnabled<UpdateBuildingsContractRequest, UpdateBuildingsContractResponse>}\n */\nexport class BuildingsContractResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<BuildingsContract>, CSCoreSDK.UpdateEnabled<UpdateBuildingsContractRequest, UpdateBuildingsContractResponse> {\n\n  /**\n   * Resource represents one building saving product identified by it's identifier. It can be building saving or loan from building saving.\n   * @returns {Promise<BuildingsContract>}\n   */\n  get = (): Promise<BuildingsContract> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n      resourcifyBuildingsContracts(<BuildingsContract>response, this);\n      transformDates(response);\n\n      return response;\n    });\n  }\n\n  /**\n   * Allows to change a limited set of building savings contract-settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process.\n   * @param {UpdateBuildingsContractRequest} payload\n   * @returns {Promise<UpdateBuildingsContractResponse>}\n   */\n  update = (payload: UpdateBuildingsContractRequest): Promise<UpdateBuildingsContractResponse> => {\n    (<any>payload).id = this._id;\n\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n      resourcifyBuildingsContracts(<BuildingsContract>response, this);\n      transformDates(response);\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n\n  /**\n   * Get buildings contracts services resource\n   * @returns {BuildingsContractsServicesResource}\n   */\n  get services(): BuildingsContractsServicesResource {\n    return new BuildingsContractsServicesResource(`${this.getPath()}/services`, this.getClient());\n  }\n\n  /**\n   * Get buildings contracts transactions resource\n   * @returns {ContractsTransactionsResource}\n   */\n  get transactions(): ContractsTransactionsResource {\n    return new ContractsTransactionsResource(`${this.getPath().replace('/my', '/cz/my')}/transactions`, this.getClient());\n  }\n}\n\nfunction resourcifyBuildingsContracts(contract: BuildingsContract, contractReference: BuildingsContractResource) {\n  contract.get = contractReference.get;\n  contract.update = contractReference.update;\n  contract.services = contractReference.services;\n  contract.transactions = contractReference.transactions;\n}\n\nfunction transformDates(contract) {\n  if (contract.saving) {\n    CSCoreSDK.EntityUtils.addDatesFromISO('expiryDate', contract.saving);\n  }\n\n  if (contract.loan) {\n    CSCoreSDK.EntityUtils.addDatesFromISO(['interestRateFromDate', 'interestRateToDate'], contract.saving);\n  }\n}\n\n/**\n * @interface BuildingsContractList\n * @extends {CSCoreSDK.PaginatedListResponse<BuildingsContract>}\n */\nexport interface BuildingsContractList extends CSCoreSDK.PaginatedListResponse<BuildingsContract> { }\n\n/**\n * @interface BuildingsContract\n * @extends {UpdateBuildingsContractRequest}\n */\nexport interface BuildingsContract extends UpdateBuildingsContractRequest {\n\n  /**\n   * Building saving identifier.\n   */\n  id: string;\n\n  /**\n   * Building saving account number.\n   */\n  accountno: AccountNumber;\n\n  /**\n   * Type of the account. Possible values are BUILD_SAVING and BUILD_LOAN.\n   */\n  type: string;\n\n  /**\n   * Product code.\n   */\n  product: string;\n\n  /**\n   * Product name.\n   */\n  productI18N: string;\n\n  /**\n   * Building savings account balance. For loans outstanding debt is served\n   */\n  balance: Amount;\n\n  /**\n   * Status of the contract. Possible values are ACTIVE and CLOSED.\n   */\n  status: string;\n\n  /**\n   * Debtor. Will only by set for loans.\n   */\n  contractHolders?: [string];\n\n  /**\n   * Basic credit interest rate, used for building saving deposits. Value in percentage, e.g. 1,5 will be displayed as 1,5%.\n   */\n  creditInterestRate?: number;\n\n  /**\n   * Basic debit interest rate, used for building loan. Value in percentage, e.g. 9,5 will be displayed as 9,5%.\n   */\n  debitInterestRate?: number;\n\n  saving?: {\n\n    /**\n     * Target amount. Will not be set for loans.\n     */\n    targetAmount?: Amount;\n\n    /**\n     * Agreed monthly savings amount for building savings. Will not be set for loans.\n     */\n    agreedMonthlySavings?: Amount;\n\n    /**\n     * Notice period expiry date. Not set for loans.\n     */\n    expiryDate?: Date;\n\n    /**\n     * Remaining deposit to be paid to Building Savings till the end of this year to get annual maximal bonus.\n     */\n    bonusBearingDepositToPay?: Amount;\n  }\n\n\n  loan?: {\n\n    /**\n     * Total contracted building loan amount.\n     */\n    loanAmount?: Amount;\n\n    /**\n     * Installment part of the loan monthly repayment.\n     */\n    loanInstallment: Amount;\n\n    /**\n     * Saving part of the loan monthly repayment.\n     */\n    additionalSavings?: Amount;\n\n    /**\n     * Insurance part of the loan monthly repayment.\n     */\n    paymentInsurance?: Amount;\n\n    /**\n     * Current interest rate is valid from this date. Filled only for loans.\n     */\n    interestRateFromDate?: Date;\n\n    /**\n     * Current interest rate is valid to this date. Filled only for loans in case of variable interest rate. If interest rate is fixed, this field is empty.\n     */\n    interestRateToDate?: Date;\n  }\n\n  /**\n   * List of flags.\n   */\n  flags?: [string];\n\n  /**\n   * Convenience get method for fetching contracts detail \n   * @returns {Promise<BuildingsContract>}\n   */\n  get: () => Promise<BuildingsContract>;\n\n  /**\n   * Convenience update method for updating contract\n   * @param {UpdateBuildingsContractRequest} payload\n   * @returns {Promise<UpdateBuildingsContractResponse>}\n   */\n  update: (payload: UpdateBuildingsContractRequest) => Promise<UpdateBuildingsContractResponse>;\n\n  /**\n   * Convenience getter for contracts services\n   */\n  services: BuildingsContractsServicesResource;\n\n  /**\n   * Convenience getter for contracts transactions\n   */\n  transactions: ContractsTransactionsResource;\n}\n\n/**\n * @interface BuildingsContractsParameters\n * @extends {CSCoreSDK.Paginated}\n */\nexport interface BuildingsContractsParameters extends CSCoreSDK.Paginated { }\n\n/**\n * @interface UpdateBuildingsContractRequest\n */\nexport interface UpdateBuildingsContractRequest {\n\n  /**\n   * User-specific alias of the contract. Max. 50 characters.\n   */\n  alias?: string;\n}\n\n/**\n * @interface UpdateBuildingsContractResponse\n * @extends {BuildingsContract}\n * @extends {CSCoreSDK.Signable}\n */\nexport interface UpdateBuildingsContractResponse extends BuildingsContract, CSCoreSDK.Signable { }\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/buildings/buildings.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { ServiceList, Service, ServiceParameters } from '../../accounts/services';\n\n/**\n * @class BuildingsContractsServicesResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Service>}\n */\nexport class BuildingsContractsServicesResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Service> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns list of services which are connected or arranged for building saving product instance.\n   * @param {ServiceParameters=} params\n   * @returns {Promise<ServiceList>}\n   */\n  list = (params?: ServiceParameters): Promise<ServiceList> => {\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'services', params, response => {\n      CSCoreSDK.EntityUtils.addDatesToItems(['dateFrom', 'dateTo'], response);\n\n      return response;\n    });\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/buildings/services.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { SecurityTransactionRequest, SecurityTransactionResponse } from '../securities/transactions';\nimport { ExportTransactionsParameters } from '../common';\n\n/**\n * @class ContractsTransactionsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.HasInstanceResource<ContractsTransactionResource>}\n */\nexport class ContractsTransactionsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.HasInstanceResource<ContractsTransactionResource>, CSCoreSDK.ParametrizedExportEnabled<ExportTransactionsParameters, Uint8Array> {\n\n  /**\n   * Get contract transaction resource with a given id\n   * @param {string} id\n   * @returns {ContractsTransactionResource}\n   */\n  withId = (id: string): ContractsTransactionResource => {\n    return new ContractsTransactionResource(id, this.getPath(), this.getClient());\n  }\n\n  /**\n   * Export transaction history into signed pdf. \n   * @param {ExportTransactionsParameters} params\n   * @returns {Promise<Uint8Array>}\n   */\n  export = (params: ExportTransactionsParameters): Promise<Uint8Array> => {\n\n    // transform \"fields\" parameter to comma separated list from array\n    CSCoreSDK.EntityUtils.transformArrayParamsToString(params, 'fields');\n\n    // transform Date objects to ISO strings\n    CSCoreSDK.EntityUtils.transformDatesToISO(['dateFrom', 'dateTo'], params);\n\n    return this._client.callApi(`${this.getPath()}/export`, 'POST', params, null, null, 'arraybuffer');\n  }\n}\n\n/**\n * @class ContractsTransactionResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.UpdateEnabled<SecurityTransactionRequest, SecurityTransactionResponse>}\n */\nexport class ContractsTransactionResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.UpdateEnabled<SecurityTransactionRequest, SecurityTransactionResponse> {\n\n  /**\n   * Allows to add or change a client's personal note and mark/star the transaction as favorite/important for one specific transaction on selected product.\n   * @param {SecurityTransactionRequest} payload\n   * @returns {Promise<SecurityTransactionResponse>}\n   */\n  update = (payload: SecurityTransactionRequest): Promise<SecurityTransactionResponse> => {\n    (<any>payload).id = this._id;\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/transactions.ts","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport * as CSCoreSDK from 'cs-core-sdk';\nimport { ContractsTransactionsResource } from '../transactions';\nimport { Amount, Address, Signable } from '../../common';\n\n/**\n * @class PensionsContractsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Pension>}\n * @implements {CSCoreSDK.HasInstanceResource<PensionsContractResource>}\n */\nexport class PensionsContractsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Pension>, CSCoreSDK.HasInstanceResource<PensionsContractResource> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns list of pension products which belongs to current user. This includes Pension Savings, Supplementary Pension Insurance and Supplementary Pension Savings.\n   * @param {PensionParameters=} params\n   * @returns {Promise<PensionList>}\n   */\n  list = (params?: PensionParameters): Promise<PensionList> => {\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'pensions', params, response => {\n\n      response.items.forEach(item => {\n        transformDates(item);\n        resourcifyPension(<Pension>item, this.withId((<Pension>item).id));\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Get the resource of pension contract with a given id\n   * @param {string} id\n   * @returns {PensionsContractResource}\n   */\n  withId = (id: string): PensionsContractResource => {\n    return new PensionsContractResource(id, this.getPath(), this.getClient());\n  }\n}\n\n/**\n * @class PensionsContractResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<Pension>}\n * @implements {CSCoreSDK.UpdateEnabled<UpdatePensionRequest, UpdatePensionResponse>}\n */\nexport class PensionsContractResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<Pension>, CSCoreSDK.UpdateEnabled<UpdatePensionRequest, UpdatePensionResponse> {\n\n  /**\n   * Returns detail of pension product which belongs to current user. This can be Pension Saving, Supplementary Pension Insurance and Supplementary Pension Saving.\n   * @returns {Promise<Pension>}\n   */\n  get = (): Promise<Pension> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n      transformDates(response);\n      resourcifyPension(<Pension>response, this);\n\n      return response;\n    });\n  }\n\n  /**\n   * Allows to change a limited set of pension contract-settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process.\n   * @param {UpdatePensionRequest} payload\n   * @returns {Promise<UpdatePensionResponse>}\n   */\n  update = (payload: UpdatePensionRequest): Promise<UpdatePensionResponse> => {\n    (<any>payload).id = this._id;\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n      transformDates(response);\n      resourcifyPension(<Pension>response, this);\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n\n  /**\n   * Returns transactions resource for pension contract\n   * @returns {ContractsTransactionsResource}\n   */\n  get transactions(): ContractsTransactionsResource {\n    return new ContractsTransactionsResource(`${this.getPath()}/transactions`, this.getClient());\n  }\n}\n\nfunction transformDates(item) {\n  CSCoreSDK.EntityUtils.addDatesFromISO(['signingDate', 'validFrom', 'validTo'], item);\n  if (item.productAccount) {\n    CSCoreSDK.EntityUtils.addDatesFromISO('date', item.productAccount);\n  }\n  if (Array.isArray(item.beneficiaries)) {\n    item.beneficiaries.forEach(x => {\n      CSCoreSDK.EntityUtils.addDatesFromISO('birthDate', x);\n    });\n  }\n}\n\nfunction resourcifyPension(pension: Pension, pensionReference: PensionsContractResource) {\n  pension.get = pensionReference.get;\n  pension.update = pensionReference.update;\n  pension.transactions = pensionReference.transactions;\n}\n/**\n * @interface PensionList\n * @extends {CSCoreSDK.PaginatedListResponse<Pension>}\n */\nexport interface PensionList extends CSCoreSDK.PaginatedListResponse<Pension> { }\n\n/**\n * @interface Pension\n * @extends {UpdatePensionRequest}\n */\nexport interface Pension extends UpdatePensionRequest {\n\n  /**\n   * Product unique identifier.\n   */\n  id: string;\n\n  /**\n   * Name of the contract owner.\n   */\n  owner?: string;\n\n  /**\n   * Date when contract was signed.\n   */\n  signingDate?: Date;\n\n  /**\n   * First day of contract validity.\n   */\n  validFrom?: Date;\n\n  /**\n   * Last day of contract validity.\n   */\n  validTo?: Date;\n\n  /**\n   * Pension contract number.\n   */\n  agreementNumber: string;\n\n  /**\n   * Contract status. Possible values: ACTIVE, TERMINATED, PENSION_PAYMENT, INTERRUPTED, PAYMENTS_SUSPENDED, PAYMENTS_DEFFERED, SETTLED, REPEALED, NEGOTIATED.\n   */\n  status: string;\n\n  productAccount: {\n\n\n    /**\n     * Account balance.\n     */\n    amount: Amount;\n\n    /**\n     * Date of the account balance validity.\n     */\n    date: Date;\n  }\n\n  /**\n   * Localized product name.\n   */\n  productI18N: string;\n\n  /**\n   * Identification of the product type.\n   */\n  product: string;\n\n  /**\n   * Identification of the product group. Possible values are SUPPLEMENTARY_INSURANCE, PENSION_SAVINGS and SUPPLEMENTARY_SAVINGS.\n   */\n  subtype: string;\n\n  /**\n   * Birth number of the product owner.\n   */\n  birthNumber: string;\n\n  /**\n   * Amount of already paid benefits.\n   */\n  paidBenefits: Amount;\n\n  strategy?: {\n\n    /**\n     * Conservative strategy share. Value in percentage, e.g. 0,5 will be displayed as 0,5 %.\n     */\n    conservative?: number;\n\n    /**\n     * Balanced strategy share. Value in percentage, e.g. 0,5 will be displayed as 0,5 %.\n     */\n    balanced?: number;\n\n    /**\n     * Dynamic strategy share. Value in percentage, e.g. 0,5 will be displayed as 0,5 %.\n     */\n    dynamic?: number;\n\n    /**\n     * State bonds strategy share. Value in percentage, e.g. 0,5 will be displayed as 0,5 %.\n     */\n    stateBonds?: number;\n  }\n\n  pensionAgreed?: {\n\n    /**\n     * Indication whether old-age pension has been agreed.\n     */\n    oldAge?: boolean;\n\n    /**\n     * Indication whether disability pension has been agreed.\n     */\n    disability?: boolean;\n\n    /**\n     * Indication whether early-retirement pension has been agreed.\n     */\n    earlyRetirement?: boolean;\n  }\n\n  savingTime?: {\n\n    /**\n     * Supplementary pension saving time.\n     */\n    supplementary?: number;\n\n    /**\n     * Old-age pension saving time.\n     */\n    oldAge?: number;\n\n    /**\n     * Early-retirement saving time.\n     */\n    earlyRetirement?: number;\n  }\n\n  contribution?: {\n\n    /**\n     * Indication whether employer contribution is set up.\n     */\n    employer: boolean;\n\n    /**\n     * Participant contribution value.\n     */\n    participantAmount: Amount;\n\n    /**\n     * Other person contribution value.\n     */\n    otherPersonAmount: Amount;\n  }\n\n  supplementary?: {\n\n    /**\n     * Email used for electronic communication.\n     */\n    email?: string;\n\n    /**\n     * Phone number used for sms communication.\n     */\n    sms?: string;\n\n    /**\n     * Indication whether maximum service is set up.\n     */\n    maxService?: boolean;\n\n    /**\n     * Indication whether optimum service is set up.\n     */\n    optService?: boolean;\n  }\n\n\n  beneficiaries?: {\n\n    /**\n     * Beneficiary name.\n     */\n    name: string;\n\n    /**\n     * Beneficiary birth date.\n     */\n    birthDate: Date;\n\n    /**\n     * Beneficiary birth number.\n     */\n    birthNumber: string;\n\n    /**\n     * Address where card should be sent.\n     */\n    address?: Address;\n\n    /**\n     * Beneficiary share. Value in percentage, e.g. 0,5 will be displayed as 0,5 %.\n     */\n    share: number;\n\n    /**\n     * Entitlement type. Possible values TAKEOVER.\n     */\n    entitlement?: string;\n  }\n\n  /**\n   * Array of flags.\n   */\n  flags?: [string];\n\n  /**\n   * Convenience get method for fetching Pensions detail\n   * @returns {Promise<Pension>}\n   */\n  get: () => Promise<Pension>;\n\n  /**\n   * Convenience update method for updating Pension\n   * @param {UpdatePensionRequest} payload\n   * @returns {Promise<UpdatePensionResponse>}\n   */\n  update: (payload: UpdatePensionRequest) => Promise<UpdatePensionResponse>;\n\n  /**\n   * Convenience getter for getting Pensions transactions resource\n   */\n  transactions: ContractsTransactionsResource;\n}\n\n/**\n * @interface UpdatePensionRequest\n */\nexport interface UpdatePensionRequest {\n\n  /**\n   * User defined account name. Max. 50 characters.\n   */\n  alias?: string;\n}\n\n/**\n * @interface UpdatePensionResponse\n * @extends {CSCoreSDK.Signable, Pension}\n */\nexport interface UpdatePensionResponse extends CSCoreSDK.Signable, Pension { }\n\n/**\n * @interface PensionParameters\n * @extends {CSCoreSDK.Paginated}\n */\nexport interface PensionParameters extends CSCoreSDK.Paginated { }\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/pensions/pensions.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { InsurancesContractFundsResource } from './funds';\nimport { InsurancesContractBeneficiariesResource } from './beneficiaries';\nimport { InsurancesContractInsureesResource } from './insurees';\nimport { InsurancesContractPaymentsResource } from './payments';\nimport { InsurancesContractServicesResource } from './services';\nimport { InsurancesContractEventsResource } from './events';\nimport { InsurancesContractTaxBenefitsResource } from './tax-benefits';\nimport { InsurancesContractStrategiesResource } from './strategies';\nimport { InsurancesContractTransferResource } from './transfer';\nimport { Amount, AccountNumber, Signable } from '../../common';\n\n/**\n * @class InsurancesContractsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Insurance>}\n * @implements {CSCoreSDK.HasInstanceResource<InsurancesContractResource>}\n */\nexport class InsurancesContractsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Insurance>, CSCoreSDK.HasInstanceResource<InsurancesContractResource> {\n\n  /**\n   * Returns list of life insurances for current user.\n   * @param {InsurancesParameters=} params\n   * @returns {Promise<InsuranceList>}\n   */\n  list = (params?: InsurancesParameters): Promise<InsuranceList> => {\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'insurances', params, response => {\n\n      response.items.forEach(item => {\n        transformDates(item);\n        resourcifyInsurance(<Insurance>item, this.withId((<Insurance>item).id));\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Get the resource of insurance contracts with a given id\n   * @param {string} id\n   * @returns {InsurancesContractResource}\n   */\n  withId = (id: string): InsurancesContractResource => {\n    return new InsurancesContractResource(id, this.getPath(), this.getClient());\n  }\n}\n\n/**\n * @class InsurancesContractResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<InsuranceDetail>}\n * @implements {CSCoreSDK.UpdateEnabled<UpdateInsuranceRequest, UpdateInsuranceResponse>}\n */\nexport class InsurancesContractResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<InsuranceDetail>, CSCoreSDK.UpdateEnabled<UpdateInsuranceRequest, UpdateInsuranceResponse> {\n\n  /**\n   * Returns detail of the life insurance\n   * @returns {Promise<InsuranceDetail>}\n   */\n  get = (): Promise<InsuranceDetail> => {\n\n    return this._client.callApi(`${this.getPath().replace('/my', '/cz/my')}/detail`, 'GET').then(response => {\n      transformDates(response);\n      resourcifyInsurance(<InsuranceDetail>response, this);\n\n      return response;\n    });\n  }\n\n  /**\n   * Allows to change a limited set of insurance settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process.\n   * @param {UpdateInsuranceRequest} payload\n   * @returns {Promise<UpdateInsuranceResponse>}\n   */\n  update = (payload: UpdateInsuranceRequest): Promise<UpdateInsuranceResponse> => {\n    (<any>payload).id = this._id;\n\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n      transformDates(response);\n      resourcifyInsurance(<InsuranceDetail>response, this);\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n\n  /**\n   * Returns funds resource for insurance contract\n   * @returns {InsurancesContractFundsResource}\n   */\n  get funds(): InsurancesContractFundsResource {\n    return new InsurancesContractFundsResource(`${this.getPath()}/funds`, this.getClient());\n  }\n\n  /**\n   * Returns beneficiaries resource for insurance contract\n   * @returns {InsurancesContractBeneficiariesResource}\n   */\n  get beneficiaries(): InsurancesContractBeneficiariesResource {\n    return new InsurancesContractBeneficiariesResource(`${this.getPath()}/beneficiaries`, this.getClient());\n  }\n\n  /**\n   * Returns insurees resource for insurance contract\n   * @returns {InsurancesContractInsureesResource}\n   */\n  get insurees(): InsurancesContractInsureesResource {\n    return new InsurancesContractInsureesResource(`${this.getPath()}/insurees`, this.getClient());\n  }\n\n  /**\n   * Returns payments resource for insurance contract\n   * @returns {InsurancesContractPaymentsResource}\n   */\n  get payments(): InsurancesContractPaymentsResource {\n    return new InsurancesContractPaymentsResource(`${this.getPath()}/payments`, this.getClient());\n  }\n\n  /**\n   * Returns services resource for insurance contract\n   * @returns {InsurancesContractServicesResource}\n   */\n  get services(): InsurancesContractServicesResource {\n    return new InsurancesContractServicesResource(`${this.getPath()}/services`, this.getClient());\n  }\n\n  /**\n   * Returns events resource for insurance contract\n   * @returns {InsurancesContractEventsResource}\n   */\n  get events(): InsurancesContractEventsResource {\n    return new InsurancesContractEventsResource(`${this.getPath()}/events`, this.getClient());\n  }\n\n  /**\n   * Returns taxBenefits resource for insurance contract\n   * @returns {InsurancesContractTaxBenefitsResource}\n   */\n  get taxBenefits(): InsurancesContractTaxBenefitsResource {\n    return new InsurancesContractTaxBenefitsResource(`${this.getPath()}/taxBenefits`, this.getClient());\n  }\n\n  /**\n   * Returns strategies resource for insurance contract\n   * @returns {InsurancesContractStrategiesResource}\n   */\n  get strategies(): InsurancesContractStrategiesResource {\n    return new InsurancesContractStrategiesResource(`${this.getPath()}/strategies`, this.getClient());\n  }\n\n  /**\n   * Returns transfer resource for insurance contract\n   * @returns {InsurancesContractTransferResource}\n   */\n  get transfer(): InsurancesContractTransferResource {\n    return new InsurancesContractTransferResource(`${this.getPath()}/transfer`, this.getClient());\n  }\n}\n\nfunction transformDates(item) {\n  if (item.life) {\n    CSCoreSDK.EntityUtils.addDatesFromISO(['contractEndDate', 'contractStartDate', 'contractTerminationDate', 'lastPremiumDate', 'premiumLastPaid'], item.life);\n  }\n}\n\nfunction resourcifyInsurance(insurance: Insurance, insuranceReference: InsurancesContractResource) {\n  insurance.get = insuranceReference.get;\n  insurance.update = insuranceReference.update;\n  insurance.funds = insuranceReference.funds;\n  insurance.beneficiaries = insuranceReference.beneficiaries;\n  insurance.insurees = insuranceReference.insurees;\n  insurance.payments = insuranceReference.payments;\n  insurance.services = insuranceReference.services;\n  insurance.events = insuranceReference.events;\n  insurance.taxBenefits = insuranceReference.taxBenefits;\n  insurance.strategies = insuranceReference.strategies;\n  insurance.transfer = insuranceReference.transfer;\n}\n\n/**\n * @interface InsuranceList\n * @extends {CSCoreSDK.PaginatedListResponse<Insurance>}\n */\nexport interface InsuranceList extends CSCoreSDK.PaginatedListResponse<Insurance> { }\n\n/**\n * @interface Insurance\n * @extends {UpdateInsuranceRequest}\n */\nexport interface Insurance extends UpdateInsuranceRequest {\n\n  /**\n   * Contract number.\n   */\n  id: string;\n\n  /**\n   * Product Type of insurance. ENUM values: LIFE (CSAS supports only this value)\n   */\n  type: string;\n\n  /**\n   * Code of the sVersicherung product.\n   */\n  product: string;\n\n  /**\n   * Name of the sVersicherung product (localised).\n   */\n  productI18N: string;\n\n  /**\n   * The primary holder of the specific insurance contract.\n   */\n  insurancePolicyHolder: string;\n\n  /**\n   * Policy number\n   */\n  policyNumber: string;\n\n  /**\n   * ENUM: ACTIVE, CLOSED\n   */\n  status: string;\n\n  life?: LifeDetail;\n\n  /**\n   * Convenience get method for fetching Insurance detail\n   * @returns {Promise<InsuranceDetail>}\n   */\n  get: () => Promise<InsuranceDetail>;\n\n  /**\n   * Convenience update method for updating insurance\n   * @param {UpdateInsuranceRequest} payload\n   * @returns {Promise<UpdateInsuranceResponse>}\n   */\n  update: (payload: UpdateInsuranceRequest) => Promise<UpdateInsuranceResponse>;\n\n  /**\n   * Convenience getter for Insurance funds\n   */\n  funds: InsurancesContractFundsResource;\n\n  /**\n   * Convenience getter for Insurance beneficiaries\n   */\n  beneficiaries: InsurancesContractBeneficiariesResource;\n\n  /**\n   * Convenience getter for Insurance insurees\n   */\n  insurees: InsurancesContractInsureesResource;\n\n  /**\n   * Convenience getter for Insurance payments\n   */\n  payments: InsurancesContractPaymentsResource;\n\n  /**\n   * Convenience getter for Insurance services\n   */\n  services: InsurancesContractServicesResource;\n\n  /**\n   * Convenience getter for Insurance events\n   */\n  events: InsurancesContractEventsResource;\n\n  /**\n   * Convenience getter for Insurance tax benefits\n   */\n  taxBenefits: InsurancesContractTaxBenefitsResource;\n\n  /**\n   * Convenience getter for Insurance strategies\n   */\n  strategies: InsurancesContractStrategiesResource;\n\n  /**\n   * Convenience getter for Insurance transfer\n   */\n  transfer: InsurancesContractTransferResource;\n\n}\n\n/**\n * @interface UpdateInsuranceRequest\n */\nexport interface UpdateInsuranceRequest {\n\n  /**\n   * User-specific alias of the contract. Max. 50 characters.\n   */\n  alias?: string;\n}\n\n/**\n * @interface UpdateInsuranceResponse\n * @extends {Insurance}\n * @extends {CSCoreSDK.Signable}\n */\nexport interface UpdateInsuranceResponse extends Insurance, CSCoreSDK.Signable { }\n\n/**\n * @interface InsuranceDetail\n * @extends {Insurance}\n */\nexport interface InsuranceDetail extends Insurance {\n\n  /**\n   * Additional description of insurance product, additional charges, index applied to insurance contract\n   */\n  description?: string;\n\n\n  life?: LifeDetail;\n}\n\n/**\n * @interface InsurancesParameters\n * @extends {CSCoreSDK.Paginated}\n */\nexport interface InsurancesParameters extends CSCoreSDK.Paginated { }\n\n/**\n * @interface Life\n */\nexport interface Life {\n\n\n  lastPremiumDate?: Date;\n\n  lastPremiumPaid?: Amount;\n  /**\n   * Payment Interval. ENUM: ONCE, MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, UNKNOWN\n   */\n  premiumPaymentInterval: string;\n\n  /**\n   * The agreed premium for the specific insurance.\n   */\n  premium: Amount;\n\n  /**\n   * The agreed end dates of the insurance contract.\n   */\n  contractEndDate?: Date;\n\n  /**\n   * The contract start date.\n   */\n  contractStartDate: Date;\n\n  /**\n   * The agreed amount insured or risk covered by the insurance.\n   */\n  insuredAmount: Amount;\n\n  /**\n   * Capital value of the insurance. Amount of money in saving part of the insurance.\n   */\n  currentCapitalValue?: Amount;\n\n  /**\n   * Date of possible contract termination\n   */\n  contractTerminationDate?: Date;\n\n  /**\n   * Array of flags for life insurance extended detail\n   */\n  flags?: [string];\n}\n\n/**\n * @interface LifeDetail\n * @extends {Life}\n */\nexport interface LifeDetail extends Life {\n\n  /**\n   * Reason of possible contract termination\n   */\n  contractTerminationReason?: string;\n\n  /**\n   * In case of CLOSED contract, this means the reason of the termination. This field si localized.\n   */\n  \"cz-contractEndReason\"?: string;\n\n  /**\n   * Technique for the premium payment\n   */\n  premiumPaymentMethodI18N?: string;\n\n  /**\n   * Date of the last premium payment\n   */\n  premiumLastPaid?: Date;\n\n  /**\n   * Technical interest rate. Value in percentage, e.g. 0,5 will be displayed as 0,5 %.\n   */\n  technicalInterestRate?: number;\n\n  employerBenefit?: {\n\n    /**\n     * frequency of the contribution. ENUM: ONCE, MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, UNKNOWN\n     */\n    frequency?: string;\n\n    /**\n     * Explanatory text to employer contribution. Possible values: WHOLE_PREMIUM, PARTLY_PAID_PREMIUM, EXTRAORDINARY_PAYMENTS?\n     */\n    type?: string;\n\n    /**\n     * Amount of the contribution\n     */\n    amount?: Amount;\n  }\n\n  immobilization?: {\n\n    /**\n     * Immobilization secures the loan agreement with this contract number\n     */\n    contractNumber: string;\n\n    /**\n     * immobilization partner - third party name\n     */\n    partner: string;\n  }\n\n  paymentTemplates?: [{\n\n    /**\n     * Type of payment template. Possible values - ORDINARY, EXTRAORDINARY\n     */\n    type?: string;\n\n    symbols?: {\n\n      /**\n       * Variable symbol\n       */\n      variableSymbol?: string;\n    }\n\n    /**\n     * Receiver account number\n     */\n    receiver?: AccountNumber;\n  }];\n\n  /**\n   * Maximum amount that can be withdrawn from capital value\n   */\n  \"cz-capitalValueMaxWithdrawal\"?: Amount;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/insurances/insurances.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../../common';\n\n/**\n * @class InsurancesContractFundsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<Fund>}\n * @implements {CSCoreSDK.UpdateEnabled<UpdateFundRequest, UpdateFundResponse>}\n */\nexport class InsurancesContractFundsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<Fund>, CSCoreSDK.UpdateEnabled<UpdateFundRequest, UpdateFundResponse> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns detail of distribution of capital value into funds.\n   * @returns {Promise<FundList>}\n   */\n  list = (): Promise<FundList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'funds', null);\n  }\n\n  /**\n   * Change the distribution of capital value into funds.\n   * @param {UpdateFundRequest} payload\n   * @returns {Promise<UpdateFundResponse>}\n   */\n  update = (payload: UpdateFundRequest): Promise<UpdateFundResponse> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface FundList\n * @extends {CSCoreSDK.ListResponse<Fund>}\n */\nexport interface FundList extends CSCoreSDK.ListResponse<Fund> {\n\n  /**\n   * Total invested amount into all funds in CZK.\n   */\n  totalInvestedAmount: Amount;\n\n  /**\n   * Shows, whether a investment program is active for life insurance product. The field can be either blank or filled with 2 values - INVESTMENT_MANAGEMENT or CONSEQ\n   */\n  investmentProgram?: string;\n\n  /**\n   * Array of flags for funds.\n   */\n  flags?: [string];\n}\n\n/**\n * @interface Fund\n */\nexport interface Fund {\n\n  /**\n   * Unique code of fund.\n   */\n  code: string;\n\n  /**\n   * Name of fund.\n   */\n  name: string;\n\n  /**\n   * Current value invested into fund in CZK\n   */\n  investedAmount: Amount;\n\n  /**\n   * Current value invested into fund in %.\n   */\n  investedShare: number;\n\n  /**\n   * The rate at which the savings component of the premium will be invested in selected funds.Value in percentage, e.g. 63 will be displayed as 63 %.\n   */\n  allocation: number;\n}\n\n/**\n * @interface UpdateFundRequest\n */\nexport interface UpdateFundRequest {\n\n  funds: [{\n\n    /**\n     * Unique code of fund.\n     */\n    code: string;\n\n    allocation: number;\n  }];\n\n  /**\n   * Shows, whether an investment program is active for life insurance product. The field can be either blank or filled with 2 values - INVESTMENT_MANAGEMENT or CONSEQ\n   */\n  investmentProgram?: string;\n}\n\n/**\n * @interface UpdateFundResponse\n * @extends {UpdateFundRequest}\n * @extends {CSCoreSDK.Signable}\n */\nexport interface UpdateFundResponse extends UpdateFundRequest, CSCoreSDK.Signable { }\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/insurances/funds.ts","import * as CSCoreSDK from 'cs-core-sdk';\n\n/**\n * @class InsurancesContractBeneficiariesResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<InsuranceBeneficiary>}\n * @implements {CSCoreSDK.UpdateEnabled<UpdateInsuranceBeneficiaries, UpdateInsuranceBeneficiaries>}\n */\nexport class InsurancesContractBeneficiariesResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<InsuranceBeneficiary>, CSCoreSDK.UpdateEnabled<UpdateInsuranceBeneficiaries, UpdateInsuranceBeneficiaries> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns list of beneficiaries related to the insurance contract.\n   * @returns {Promise<InsuranceBeneficiaryList>}\n   */\n  list = (): Promise<InsuranceBeneficiaryList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'beneficiaries', null).then(response => {\n      CSCoreSDK.EntityUtils.addDatesToItems(['birthdate'], response);\n\n      return response;\n    });\n  }\n\n  /**\n   * Change beneficiaries and distribution of insurance among beneficiaries.\n   * @param {UpdateInsuranceBeneficiaries} payload\n   * @returns {Promise<UpdateInsuranceBeneficiaries>}\n   */\n  update = (payload: UpdateInsuranceBeneficiaries): Promise<UpdateInsuranceBeneficiaries> => {\n\n    if (payload && Array.isArray(payload.beneficiaries)) {\n      payload.beneficiaries.forEach(x => {\n        CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['birthdate'], x);\n      });\n    }\n\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n      CSCoreSDK.EntityUtils.addDatesToItems(['birthdate'], response, 'beneficiaries');\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface InsuranceBeneficiaryList\n * @extends {CSCoreSDK.ListResponse<InsuranceBeneficiary>}\n */\nexport interface InsuranceBeneficiaryList extends CSCoreSDK.ListResponse<InsuranceBeneficiary> { }\n\n/**\n * @interface InsuranceBeneficiary\n */\nexport interface InsuranceBeneficiary {\n\n  /**\n   * Type of beneficiary\n   */\n  type: string;\n\n  /**\n   * Name of the beneficiary.\n   */\n  name?: string;\n\n  /**\n   * Birthdate of the beneficiary.\n   */\n  birthdate?: Date;\n\n  /**\n   * Percentage of the insurance contract determined to beneficiary or distributed by law. Value in percentage, e.g. 63 will be displayed as 63 %.\n   */\n  percentage?: number;\n\n  /**\n   * Attribute returns unstructured information about distribution among beneficiaries in a single string in 2 cases: 1) Distribution have never been changed (after modifying the distribution - information will be returned ina structured form); 2) BE did not cut up unstructured format.\n   */\n  unstructuredInfo?: string;\n\n  /**\n   * List of flags.\n   */\n  flags?: [string];\n}\n\n/**\n * @interface UpdateInsuranceBeneficiaries\n */\nexport interface UpdateInsuranceBeneficiaries {\n\n  beneficiaries: [InsuranceBeneficiary];\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/insurances/beneficiaries.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Address, Amount } from '../../common';\n\n/**\n * @class InsurancesContractInsureesResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<Insuree>}\n */\nexport class InsurancesContractInsureesResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<Insuree> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns list of insurees related to the insurance contract.\n   * @returns {Promise<InsureeList>}\n   */\n  list = (): Promise<InsureeList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'insurees');\n  }\n}\n\n/**\n * @interface InsureeList\n * @extends {CSCoreSDK.ListResponse<Insuree>}\n */\nexport interface InsureeList extends CSCoreSDK.ListResponse<Insuree> { }\n\n/**\n * @interface Insuree\n */\nexport interface Insuree {\n\n  /**\n   * Unique ID of the person related to the insurance contract. ID is hashed combination of contract number and birthnumber of the person: contractNumber_birthnumber.\n   */\n  id: string;\n\n  /**\n   * Type of person related to the insurance contract. 3 possible values: POLICYHOLDER, INSURED_PERSON, CHILD.\n   */\n  type: string;\n\n  /**\n   * Name of the person related to the insurance contract.\n   */\n  name: string;\n\n  /**\n   * Contact address.\n   */\n  addresses: [Address];\n\n  /**\n   * Birthnumber of the person related to the insurance contract.\n   */\n  birthNumber: string;\n\n  /**\n   * Phone number of the person related to the insurance contract.\n   */\n  phoneNumber?: string;\n\n  /**\n   * Email address of the person related to the insurance contract.\n   */\n  email?: string;\n\n  risks?: [{\n\n    /**\n     * Name of the active risk product.\n     */\n    productName?: string;\n\n    /**\n     * Group of the active risk product.\n     */\n    riskGroup?: string;\n\n    /**\n     * Amount that an ​insurance ​company will ​pay after making a ​claim.\n     */\n    insuredSum?: Amount;\n\n    /**\n     * Frequency in which insured sum may be paid.\n     */\n    frequency?: string;\n\n    /**\n     * Description of the insured risk.\n     */\n    explanation?: string;\n  }];\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/insurances/insurees.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../../common';\n\n/**\n * @class InsurancesContractPaymentsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<ContractPayment>}\n */\nexport class InsurancesContractPaymentsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<ContractPayment> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns list of life insurance payments. List contains one upcoming payment and payments history for 2 years.\n   * @returns {Promise<ContractPaymentList>}\n   */\n  list = (): Promise<ContractPaymentList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'payments').then(response => {\n      CSCoreSDK.EntityUtils.addDatesToItems(['transactionDate', 'instructionFrom', 'instructionTo'], response);\n\n      return response;\n    });\n  }\n}\n\n/**\n * List of contract payments\n * @interface ContractPaymentList\n * @extends {CSCoreSDK.ListResponse<ContractPayment>}\n */\nexport interface ContractPaymentList extends CSCoreSDK.ListResponse<ContractPayment> { }\n\n/**\n * @interface ContractPayment\n */\nexport interface ContractPayment {\n\n  /**\n   * Payment identifier. Unique for current insurance.\n   */\n  id: string;\n\n  /**\n   * Type of the payment. Possible values are ORDINARY, ONETIME, EXTRAORDINARY, FUTURE, OVERDUE, WITHDRAWAL, PARTIALLY_PAID, UNKNOWN.\n   */\n  type: string;\n\n  /**\n   * Payment date.\n   */\n  transactionDate?: Date;\n\n  /**\n   * Payment amount. Amount which was received by insurance company.\n   */\n  amount: Amount;\n\n  /**\n   * Rest which should be paid if payment instruction wasn't fully paid by this payment.\n   */\n  restToPay?: Amount;\n\n  /**\n   * Payment instruction amount. Amount which should be paid for particular period.\n   */\n  instruction?: Amount;\n\n  /**\n   * Amount paid by employer (as benefit). It is included in the payment amount.\n   */\n  employerContribution?: Amount;\n\n  /**\n   * Start date of the period for which payment instruction was created.\n   */\n  instructionFrom?: Date;\n\n  /**\n   * End date of the period for which payment instruction was created.\n   */\n  instructionTo?: Date;\n\n  /**\n   * Array of flags for funds.\n   */\n  flags?: [string];\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/insurances/payments.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount, Signable } from '../../common';\n\n/**\n * @class InsurancesContractServicesResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<InsuranceService>}\n */\nexport class InsurancesContractServicesResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<InsuranceService> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns list of services for the life insurance\n   * @returns {Promise<InsuranceServiceList>}\n   */\n  list = (): Promise<InsuranceServiceList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'services').then(response => {\n\n      response.items.forEach(x => {\n        transformDates(x);\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Allows activation of risk sports insurance.\n   * @param {RiskSportsUpdateRequest} payload\n   * @returns {Promise<ActivateRiskSportsResponse>}\n   */\n  activateRiskSports = (payload: RiskSportsUpdateRequest): Promise<ActivateRiskSportsResponse> => {\n\n    CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['dateFrom', 'dateTo'], payload);\n\n    return CSCoreSDK.ResourceUtils.CallUpdateWithSuffix(this, 'riskSportsActivation', payload).then(response => {\n\n      transformDates(response);\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n\n  /**\n   * Allows deactivation of risk sports insurance.\n   * @param {RiskSportsUpdateRequest} payload\n   * @returns {Promise<DeactivateRiskSportsResponse>}\n   */\n  deactivateRiskSports = (payload: RiskSportsUpdateRequest): Promise<DeactivateRiskSportsResponse> => {\n\n    CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['dateFrom', 'dateTo'], payload);\n\n    return CSCoreSDK.ResourceUtils.CallUpdateWithSuffix(this, 'riskSportsDeactivation', payload).then(response => {\n\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n}\n\nfunction transformDates(response) {\n  CSCoreSDK.EntityUtils.addDatesFromISO(['dateFrom', 'dateTo'], response);\n}\n\n/**\n * @interface InsuranceServiceList\n * @extends {CSCoreSDK.ListResponse<InsuranceService>}\n */\nexport interface InsuranceServiceList extends CSCoreSDK.ListResponse<InsuranceService> { }\n\n/**\n * @interface InsuranceService\n */\nexport interface InsuranceService {\n\n  /**\n   * indicator for FE for grouping services to boxes. Possible values: RISK_SPORTS, SERVICE\n   */\n  group: string;\n\n  /**\n   * service id\n   */\n  id: string;\n\n  /**\n   * service icon group\n   */\n  iconGroup: string;\n\n  /**\n   * service name\n   */\n  nameI18N: string;\n\n  /**\n   * Description of the service.\n   */\n  descriptionI18N: string;\n\n  /**\n   * relevant only for RISK_SPORTS group. For those number of days this service can be activated this year at all.\n   */\n  availableDays: string;\n\n  /**\n   * Starting date of active service. Relevant for RISK_SPORTS.\n   */\n  activeFrom: Date;\n\n  /**\n   * Ending date of active service. Relevant for RISK_SPORTS.\n   */\n  activeTo: Date;\n\n  /**\n   * Amount of bonus. Relevant for NO_CLAIM_BONUS, LOYALTY_BONUS.\n   */\n  bonusAmount: Amount;\n\n  /**\n   * Indicates service state. Three possible values: ACTIVATED - insurance was already activated but will be active in the future. ACTIVE - insurance is active right now. INACTIVE - insurance is neither activated nor active.\n   */\n  state: string;\n}\n\n/**\n * @interface RiskSportsUpdateRequest\n */\nexport interface RiskSportsUpdateRequest {\n\n  dateFrom: Date;\n\n  dateTo: Date;\n\n  phoneNumber: string;\n}\n\n/**\n * @interface ActivateRiskSportsResponse\n * @extends {RiskSportsUpdateRequest}\n * @extends {CSCoreSDK.Signable}\n */\nexport interface ActivateRiskSportsResponse extends RiskSportsUpdateRequest, CSCoreSDK.Signable {\n\n  policyNumber: string;\n}\n\n/**\n * @interface DeactivateRiskSportsResponse\n * @extends {CSCoreSDK.Signable}\n */\nexport interface DeactivateRiskSportsResponse extends CSCoreSDK.Signable { }\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/insurances/services.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../../common';\n\n/**\n * @class InsurancesContractEventsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<ContractEvent>}\n */\nexport class InsurancesContractEventsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<ContractEvent> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns list of events for the life insurance\n   * @returns {Promise<ContractEventList>}\n   */\n  list = (): Promise<ContractEventList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'events').then(response => {\n      response.items.forEach(item => {\n        CSCoreSDK.EntityUtils.addDatesFromISO(['substateDate', 'processingDate', 'creationDate'], item);\n\n        if ((<ContractEvent>item).indemnities && Array.isArray((<ContractEvent>item).indemnities)) {\n          (<ContractEvent>item).indemnities.forEach(indemnity => {\n            CSCoreSDK.EntityUtils.addDatesFromISO('paymentDate', indemnity);\n          });\n        }\n      });\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface ContractEventList\n * @extends {CSCoreSDK.ListResponse<ContractEvent>}\n */\nexport interface ContractEventList extends CSCoreSDK.ListResponse<ContractEvent> { }\n\n/**\n * @interface ContractEvent\n */\nexport interface ContractEvent {\n\n  /**\n   * Insurance event number\n   */\n  number: string;\n\n  /**\n   * Creation date of the insurance event.\n   */\n  creationDate: Date;\n\n  /**\n   * State of the event. Possible values: REPORTED, ATTACHING_DOCS, IN_SOLUTION, CLOSED\n   */\n  state: string;\n\n  /**\n   * Substate of the event.\n   */\n  substate?: string;\n\n  /**\n   * Date that relates to the insurance substate.\n   */\n  substateDate?: Date;\n\n  /**\n   * Substate information with text and date.\n   */\n  substateInfo?: string;\n\n  /**\n   * Total amount for the insurance event\n   */\n  amount: Amount;\n\n  /**\n   * The date when thi event has been reported\n   */\n  processingDate?: Date;\n\n  /**\n   * List of indemnities related to the insurance event.\n   */\n  indemnities?: [{\n\n    /**\n     * Date of the payment was paid out.\n     */\n    paymentDate: Date;\n\n    /**\n     * Method of the transfer.\n     */\n    transferMethod: string;\n\n    /**\n     * Receiver name.\n     */\n    receiverName: string;\n\n    /**\n     * Paid indemnity value.\n     */\n    amount: Amount;\n  }];\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/insurances/events.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount, AccountNumber } from '../../common';\n\n/**\n * @class InsurancesContractTaxBenefitsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.GetEnabled<TaxBenefit>}\n */\nexport class InsurancesContractTaxBenefitsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.GetEnabled<TaxBenefit> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns tax benefits for the life insurance\n   * @returns {Promise<TaxBenefit>}\n   */\n  get = (): Promise<TaxBenefit> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null);\n  }\n}\n\n/**\n * @interface TaxBenefit\n */\nexport interface TaxBenefit {\n\n  /**\n   * Tax deductable premium.\n   */\n  taxDeductiblePremium?: Amount;\n\n  /**\n   * Recommended extraordinary deposit for maximum tax deduction.\n   */\n  recommendedDeposit?: Amount;\n\n  /**\n   * Explanatory text for recommended extraordinary deposit. Available only in CZ language.\n   */\n  recommendedDepositText?: string;\n\n  /**\n   * Contains data that should be prefilled to domestic payment form.\n   */\n  paymentTemplate?: {\n\n    /**\n     * The date when thi event has been reported\n     */\n    symbols?: {\n\n      /**\n       * Variable symbol for the payment template.\n       */\n      variableSymbol?: string;\n    }\n\n    /**\n     * Receiver's account number of the payment.\n     */\n    receiver?: AccountNumber;\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/insurances/tax-benefits.ts","import * as CSCoreSDK from 'cs-core-sdk';\n\n/**\n * @class InsurancesContractStrategiesResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<ContractStrategy>}\n */\nexport class InsurancesContractStrategiesResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<ContractStrategy> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns list of strategies with corresponsing funds allocation for the life insurance\n   * @returns {Promise<ContractStrategyList>}\n   */\n  list = (): Promise<ContractStrategyList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'strategies');\n  }\n}\n\n/**\n * @interface ContractStrategyList\n * @extends {CSCoreSDK.ListResponse<ContractStrategy>}\n */\nexport interface ContractStrategyList extends CSCoreSDK.ListResponse<ContractStrategy> { }\n\n/**\n * @interface ContractStrategy\n */\nexport interface ContractStrategy {\n\n  /**\n   * Type of the chosen strategy. Possible values: CONSERVATIVE, PROGRESSIVE, BALANCED, CONTROL, ACTUAL_SETTING\n   */\n  type: string;\n\n  /**\n   * Possible values are STRATEGY, INVESTMENT_MANAGEMENT. That means the funds allocation is fixed given by the chosen strategy, or it is under an investment program, so it is variable depending on current market state.\n   */\n  group: string;\n\n  funds: [{\n\n    /**\n     * Id of the fund\n     */\n    code: string;\n\n    /**\n     * Name of the fund.\n     */\n    name: string;\n\n    /**\n     * Share in the fund. This is percentage value. 20 means 20%.\n     */\n    share: number;\n\n    changeType?: string;\n  }];\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/insurances/strategies.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount, AccountNumber } from '../../common';\n\n/**\n * @class InsurancesContractTransferResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.UpdateEnabled<UpdateContractTrasferRequest, UpdateContractTrasferResponse>}\n */\nexport class InsurancesContractTransferResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.UpdateEnabled<UpdateContractTrasferRequest, UpdateContractTrasferResponse> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Creates insurance transfer - premium payment, extra deposit or recommended deposit.\n   * @param {UpdateContractTrasferRequest} payload\n   * @returns {Promise<UpdateContractTrasferResponse>}\n   */\n  update = (payload: UpdateContractTrasferRequest): Promise<UpdateContractTrasferResponse> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface UpdateContractTrasferRequest\n */\nexport interface UpdateContractTrasferRequest {\n\n  /**\n   * Type of the transfer. Possible values are PAY_PREMIUM, EXTRA_DEPOSIT, RECOMMENDED_DEPOSIT.\n   */\n  type: string;\n\n  /**\n   * Amount which should be transfered.\n   */\n  amount: Amount;\n\n  /**\n   * Sender account.\n   */\n  sender: AccountNumber;\n}\n\n/**\n * @interface UpdateContractTrasferResponse\n * @extends {CSCoreSDK.Signable}\n */\nexport interface UpdateContractTrasferResponse extends CSCoreSDK.Signable { }\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/insurances/transfer.ts","import * as CSCoreSDK from 'cs-core-sdk';\n\n/**\n * @class LoyaltyContractsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.GetEnabled<Loyalty>}\n */\nexport class LoyaltyContractsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.GetEnabled<Loyalty> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Get data about iBod account of the current client.\n   * @returns {Promise<Loyalty>}\n   */\n  get = (): Promise<Loyalty> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n      CSCoreSDK.EntityUtils.addDatesFromISO('exportDate', response);\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface Loyalty\n */\nexport interface Loyalty {\n\n  /**\n   * State of the ibod account. Possible values are REGISTERED, UNREGISTERED, DEACTIVATED_FROM_FSCS.\n   */\n  state: string;\n\n  /**\n   * Date when data were actual.\n   */\n  exportDate: Date;\n\n  /**\n   * IBod points count.\n   */\n  pointsCount: number;\n\n  /**\n   * Activation ibod code.\n   */\n  activationCode?: string;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/contracts/loyalty/loyalty.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { ServiceList, Service, ServiceParameters } from '../accounts/services';\n\n/**\n * @class ServicesResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Service>}\n */\nexport class ServicesResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Service> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns possibly empty list of services for current user. This resource represents only services which are not bound to any product.\n   * @param {ServiceParameters=} params\n   * @returns {Promise<ServiceList>}\n   */\n  list = (params?: ServiceParameters): Promise<ServiceList> => {\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'services', params, response => {\n      CSCoreSDK.EntityUtils.addDatesToItems(['dateFrom', 'dateTo'], response);\n\n      return response;\n    });\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/services/services.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { MessagesMandatoryResource } from './mandatory';\nimport { MessageAttachmentsResource } from './attachments';\nimport { NetbankingEmptyResponse } from '../common';\n\n/**\n * @class MessagesResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Message>}\n * @implements {CSCoreSDK.HasInstanceResource<MessageResource>}\n */\nexport class MessagesResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Message>, CSCoreSDK.HasInstanceResource<MessageResource> {\n\n  /**\n   * Get all messages for current user generated by bank itself. Message can be read or unread, mandatory and non-mandatory. This call might return different messages based on appId of the caller (for example, some messages might be specific to an application).\n   * @param {MessagesParameters=} params\n   * @returns {Promise<MessageList>}\n   */\n  list = (params?: MessagesParameters): Promise<MessageList> => {\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'messages', params, response => {\n\n      response.items.forEach(item => {\n        transformDates(item);\n        resourcifyMessages(<Message>item, this.withId((<Message>item).id));\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Get the resource of message with a given id \n   * @param {string} id\n   * @returns {MessageResource}\n   */\n  withId = (id: string): MessageResource => {\n    return new MessageResource(id, this.getPath(), this.getClient());\n  }\n\n  /**\n   * Get messages mandatory resource\n   * @returns {MessagesMandatoryResource}\n   */\n  get mandatory(): MessagesMandatoryResource {\n    return new MessagesMandatoryResource(`${this.getPath()}/mandatory`, this.getClient());\n  }\n}\n\n/**\n * @class MessageResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<Message>}\n * @implements {CSCoreSDK.UpdateEnabled<UpdateMessageRequest, NetbankingEmptyResponse>}\n * @implements {CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse>}\n */\nexport class MessageResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<Message>, CSCoreSDK.UpdateEnabled<UpdateMessageRequest, NetbankingEmptyResponse>, CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse> {\n\n  /**\n   * Get one specific messages for current user generated by bank itself. Message can be read or unread, mandatory and non-mandatory.\n   * @returns {Promise<Message>}\n   */\n  get = (): Promise<Message> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n      transformDates(response);\n      resourcifyMessages(<Message>response, this);\n\n      return response;\n    });\n  }\n\n  /**\n   * After message has been read by user it should be marked accordingly by this endpoint.\n   * @param {UpdateMessageRequest} payload\n   * @returns {Promise<NetbankingEmptyResponse>}\n   */\n  update = (payload: UpdateMessageRequest): Promise<NetbankingEmptyResponse> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n  }\n\n  /**\n   * Resource for deleting message by its identifier. Only read messages can be deleted.\n   * @returns {Promise<NetbankingEmptyResponse>}\n   */\n  delete = (): Promise<NetbankingEmptyResponse> => {\n    return CSCoreSDK.ResourceUtils.CallDelete(this, null);\n  }\n\n  /**\n   * Get messages attachments resource\n   * @returns {MessageAttachmentsResource}\n   */\n  get attachments(): MessageAttachmentsResource {\n    return new MessageAttachmentsResource(`${this.getPath()}/attachments`, this.getClient());\n  }\n}\n\nfunction transformDates(item) {\n  CSCoreSDK.EntityUtils.addDatesFromISO(['date'], item);\n}\n\nfunction resourcifyMessages(message: Message, messageReference: MessageResource) {\n  message.get = messageReference.get;\n  message.update = messageReference.update;\n  message.delete = messageReference.delete;\n  // Convenience download\n}\n\n/**\n * @interface MessageList\n * @extends {CSCoreSDK.PaginatedListResponse<Message>}\n */\nexport interface MessageList extends CSCoreSDK.PaginatedListResponse<Message> { }\n\n/**\n * @interface Message\n */\nexport interface Message {\n\n  /**\n   * Message identifier.\n   */\n  id: string;\n\n  /**\n   * Name of the message sender. For example source system of the message.\n   */\n  from: string;\n\n  /**\n   * Message subject.\n   */\n  subject: string;\n\n  /**\n   * Date when message was sent/generated.\n   */\n  date: Date;\n\n  /**\n   * Body of the message. Body is html code. It is up to FE application to properly display it.\n   */\n  body: string;\n\n  /**\n   * Array of message attachments.\n   */\n  attachments: [{\n\n    /**\n     * Attachment identifier.\n     */\n    id: string;\n\n    /**\n     * File name of the attachment.\n     */\n    fileName: string;\n  }];\n\n  /**\n   * Array of flags for messages.\n   */\n  flags?: [string];\n\n  /**\n   * Convenience get method for fetching message detail\n   * @returns {Promise<Message>}\n   */\n  get: () => Promise<Message>;\n\n  /**\n   * Convenience update method for updating message\n   * @param {UpdateMessageRequest} payload\n   * @returns {Promise<NetbankingEmptyResponse>}\n   */\n  update: (payload: UpdateMessageRequest) => Promise<NetbankingEmptyResponse>;\n\n  /**\n   * Convenience delete method for deleting message\n   * @returns {Promise<NetbankingEmptyResponse>}\n   */\n  delete: () => Promise<NetbankingEmptyResponse>;\n}\n\n/**\n * @interface MessagesParameters\n * @extends {CSCoreSDK.Paginated}\n * @extends {CSCoreSDK.Sortable}\n */\nexport interface MessagesParameters extends CSCoreSDK.Paginated, CSCoreSDK.Sortable { }\n\n/**\n * @interface UpdateMessageRequest\n */\nexport interface UpdateMessageRequest {\n  read: boolean;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/messages/messages.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Message } from './messages';\n\n/**\n * @class MessagesMandatoryResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<Message>}\n */\nexport class MessagesMandatoryResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<Message> {\n\n  /**\n   * Returns all mandatory messages. This call might return different messages based on appId of the caller (for example, some messages might be specific to an application). Which messages can be seen by which application can be configured on the presto server side.\n   * @return {Promise<MandatoryMessageList>}\n   */\n  list = (): Promise<MandatoryMessageList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'messages').then(response => {\n      CSCoreSDK.EntityUtils.addDatesToItems(['date'], response);\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface MandatoryMessageList\n * @extends {CSCoreSDK.ListResponse<Message>}\n */\nexport interface MandatoryMessageList extends CSCoreSDK.ListResponse<Message> { }\n\n\n// WEBPACK FOOTER //\n// ./lib/messages/mandatory.ts","import * as CSCoreSDK from 'cs-core-sdk';\n\n/**\n * @class MessageAttachmentsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.HasInstanceResource<MessageAttachmentResource>}\n */\nexport class MessageAttachmentsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.HasInstanceResource<MessageAttachmentResource> {\n\n  /**\n   * Get the resource of attachments \n   * @param {string} id\n   * @returns {MessageAttachmentResource}\n   */\n  withId = (id: string): MessageAttachmentResource => {\n    return new MessageAttachmentResource(id, this.getPath(), this.getClient());\n  }\n}\n\n/**\n * @class MessageAttachmentResource\n * @extends {CSCoreSDK.InstanceResource}\n */\nexport class MessageAttachmentResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.DownloadEnabled<Uint8Array> {\n\n  /**\n   * Downloads attachment file. The binary representation of an attachment file, with a “Content-Disposition” header of type attachment (including the filename), in order to instruct the browser to open a save dialog.\n   * @returns {Promise<Uint8Array>}\n   */\n  download = (): Promise<Uint8Array> => {\n    return CSCoreSDK.ResourceUtils.CallDownload(this, null, 'POST');\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/messages/attachments.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { AccountNumber } from '../common';\n\n/**\n * @class TemplateResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Template>}\n * @implements {CSCoreSDK.HasInstanceResource<TemplateResource>}\n */\nexport class TemplatesResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Template>, CSCoreSDK.HasInstanceResource<TemplateResource> {\n\n  /**\n   * List of payment templates for current user.\n   * @param {TemplatesParameters=} params\n   * @returns {Promise<TemplateList>}\n   */\n  list = (params?: TemplatesParameters): Promise<TemplateList> => {\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'templates', params, response => {\n\n      response.items.forEach(item => {\n        resourcifyTemplates(<Template>item, this.withId((<Template>item).id));\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Get resource for template with a given id \n   * @param {string} id\n   * @returns {TemplateResource}\n   */\n  withId = (id: string): TemplateResource => {\n    return new TemplateResource(id, this.getPath(), this.getClient());\n  }\n}\n\n/**\n * @class TemplateResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<Template>}\n */\nexport class TemplateResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<Template> {\n\n  /**\n   * Get payment template detail\n   * @returns {Promise<Template>}\n   */\n  get = (): Promise<Template> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n      resourcifyTemplates(<Template>response, this);\n\n      return response;\n    });\n  }\n}\n\nfunction resourcifyTemplates(template: Template, templateReference: TemplateResource) {\n  template.get = templateReference.get;\n}\n\n/**\n * @interface TemplateList\n * @extends {CSCoreSDK.PaginatedListResponse<Template>}\n */\nexport interface TemplateList extends CSCoreSDK.PaginatedListResponse<Template> { }\n\n/**\n * @interface Template\n */\nexport interface Template {\n\n  /**\n   * template ID\n   */\n  id: string;\n\n  /**\n   * name defined by user\n   */\n  name?: string;\n\n  /**\n   * Order category. Possible values: DOMESTIC, INTERNATIONAL\n   */\n  orderCategory?: string;\n\n  /**\n   * Receiver account number.\n   */\n  receiver: AccountNumber;\n\n  /**\n   * Convenience method for fetching templates detail\n   * @returns {Promise<Template>}\n   */\n  get: () => Promise<Template>;\n}\n\n/**\n * @interface TemplatesParameters\n * @extends {CSCoreSDK.Paginated}\n */\nexport interface TemplatesParameters extends CSCoreSDK.Paginated { }\n\n\n// WEBPACK FOOTER //\n// ./lib/templates/templates.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { NetbankingEmptyResponse } from '../common';\n\n/**\n * @class PhoneNumbersResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<PhoneNumber>}\n * @implements {CSCoreSDK.CreateEnabled<PhoneNumberRequest, PhoneNumber>}\n * @implements {CSCoreSDK.HasInstanceResource<PhoneNumberResource>}\n */\nexport class PhoneNumbersResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<PhoneNumber>, CSCoreSDK.CreateEnabled<PhoneNumberRequest, PhoneNumber>, CSCoreSDK.HasInstanceResource<PhoneNumberResource> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns list of phone numbers\n   * @returns {Promise<PhoneNumberList>}\n   */\n  list = (): Promise<PhoneNumberList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'phoneNumbers').then(response => {\n\n      response.items.forEach(x => {\n        resourcifyPhoneNumbers(<PhoneNumber>x, this.withId((<PhoneNumber>x).id));\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Creates new phone number\n   * @param {PhoneNumberRequest} payload\n   * @returns {Promise<PhoneNumber>}\n   */\n  create = (payload: PhoneNumberRequest): Promise<PhoneNumber> => {\n    return CSCoreSDK.ResourceUtils.CallCreate(this, payload).then(response => {\n      resourcifyPhoneNumbers(<PhoneNumber>response, this.withId((<PhoneNumber>response).id));\n\n      return response;\n    });\n  }\n\n  /**\n   * Get single phone number with a given id\n   * @param {string} id\n   * @returns {PhoneNumberResource}\n   */\n  withId = (id: string): PhoneNumberResource => {\n    return new PhoneNumberResource(id, this.getPath(), this.getClient());\n  }\n}\n\n/**\n * @class PhoneNumberResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.UpdateEnabled<PhoneNumberRequest, PhoneNumber>}\n * @implements {CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse>}\n */\nexport class PhoneNumberResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.UpdateEnabled<PhoneNumberRequest, PhoneNumber>, CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse> {\n\n  /**\n   * Updates phone number\n   * @param {PhoneNumberRequest} payload\n   * @returns {Promise<PhoneNumber>}\n   */\n  update = (payload: PhoneNumberRequest): Promise<PhoneNumber> => {\n    (<any>payload).id = this._id;\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n      resourcifyPhoneNumbers(<PhoneNumber>response, this);\n\n      return response;\n    });\n  }\n\n  /**\n   * Deletes phone number\n   * @returns {Promise<NetbankingEmptyResponse>}\n   */\n  delete = (): Promise<NetbankingEmptyResponse> => {\n    return CSCoreSDK.ResourceUtils.CallDelete(this, null);\n  }\n}\n\n/**\n * @interface PhoneNumberList\n * @extends {CSCoreSDK.ListResponse<PhoneNumber>}\n */\nexport interface PhoneNumberList extends CSCoreSDK.ListResponse<PhoneNumber> { }\n\n/**\n * @interface PhoneNumber\n * @extends {PhoneNumberRequest}\n */\nexport interface PhoneNumber extends PhoneNumberRequest {\n\n  /**\n   * Phone book entry identifier.\n   */\n  id: string;\n\n  /**\n   * Convenience method for updating Phone number\n   * @param {PhoneNumberRequest} payload\n   * @returns {Promise<PhoneNumber>}\n   */\n  update: (payload: PhoneNumberRequest) => Promise<PhoneNumber>;\n\n  /**\n   * Convenience method for deleting Phone number\n   * @returns {Promise<NetbankingEmptyResponse>}\n   */\n  delete: () => Promise<NetbankingEmptyResponse>;\n}\n\n/**\n * @interface PhoneNumberRequest\n */\nexport interface PhoneNumberRequest {\n\n  /**\n   * Alias name of phone number entered by user for his better orientation in phone book.\n   */\n  alias?: string;\n\n  /**\n   * Phone number which will be saved in phone book. The value in the phone number field must be a 9-digit number that cannot have a leading zero.\n   */\n  phoneNumber: string;\n\n  /**\n   * Array of optional Flag values.\n   */\n  flags?: [string];\n}\n\nfunction resourcifyPhoneNumbers(phoneNumber: PhoneNumber, phoneNumberReference: PhoneNumberResource) {\n  phoneNumber.update = phoneNumberReference.update;\n  phoneNumber.delete = phoneNumberReference.delete;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/phone-numbers/phone-numbers.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../common';\n\n/**\n * @class BudgetsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<Budget>}\n */\nexport class BudgetsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<Budget> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns list of user's tracked categories and its limits.\n   * @returns {Promise<BudgetList>}\n   */\n  list = (): Promise<BudgetList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'budgets');\n  }\n\n  /**\n   * Set new value of tracked categories.\n   * @param {UpdateBudgets} payload\n   * @returns {Promise<UpdateBudgets>}\n   */\n  update = (payload: UpdateBudgets): Promise<UpdateBudgets> => {\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n  }\n}\n\n/**\n * @interface BudgetList\n * @extends {CSCoreSDK.ListResponse<Budget>}\n */\nexport interface BudgetList extends CSCoreSDK.ListResponse<Budget> { }\n\n/**\n * @interface Budget\n */\nexport interface Budget {\n\n  category: {\n\n    /**\n     * Unique id of watched main category of client transactions. Possible values are NON_REGULAR_INCOME, UNCATEGORIZED_INCOME, TRAVEL_HOLIDAYS, HEALTH, LEISURE, COMMUNICATION, CAR, FOOD, EDUCATION, \n     * REGULAR_INCOME, ONLINE_SHOPPING, OTHER_EXPENSES, CLOTHING, UNCATEGORIZED_EXPENSE, FEES, SAVINGS_INVESTMENT, TRANSPORT, ALIMONY_POCKET_MONEY, TAXES, WITHDRAWAL, LIVING_AND_ENERGY.\n     */\n    id: string;\n\n    /**\n     * Category level. Currently only \"mainCategory\" is supported.\n     */\n    level: string;\n  }\n\n  /**\n   * financial limit of the watched category per a given period.\n   */\n  budget?: Amount;\n}\n\n/**\n * @interface UpdateBudgets\n */\nexport interface UpdateBudgets {\n  budgets: [Budget];\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/budgets/budgets.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../common';\n\n/**\n * @class GoalsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<Goal>}\n * @implements {CSCoreSDK.UpdateEnabled<UpdateGoal, UpdateGoal>}\n */\nexport class GoalsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<Goal>, CSCoreSDK.UpdateEnabled<UpdateGoal, UpdateGoal> {\n\n  /**\n   * @param {string} basePath\n   * @param {CSCoreSDK.WebApiClient} client \n   */\n  constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n    super(basePath, client);\n\n    // insert 'cz' resource into the resource's path because the api requires it in some resources\n    this._path = this.getPath().replace('/my', '/cz/my');\n  }\n\n  /**\n   * Returns list of user's saving goals except of completed ones. In price, only CZK currency is supported. If user has never set any goal, the response is empty.\n   * @returns {Promise<GoalList>}\n   */\n  list = (): Promise<GoalList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'goals').then(response => {\n\n      response.items.forEach(item => {\n        transformDates(item);\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Set new value of goals. In price, only CZK currency is supported. If completed flag is not present, false value is supposed. All goals of given client are replaced - old ones (except of completed) are deleted and these new specified are inserted.\n   * @param {UpdateGoal} payload\n   * @returns {Promise<UpdateGoal>}\n   */\n  update = (payload: UpdateGoal): Promise<UpdateGoal> => {\n    if (Array.isArray(payload.goals)) {\n      payload.goals.forEach(goal => {\n        if (goal.deadline && Object.prototype.toString.call(goal.deadline) === '[object Date]') {\n          (<any>goal).deadline = goal.deadline.getTime();\n        }\n      });\n    }\n    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n      (<any>response).goals.forEach(item => {\n        transformDates(item);\n      });\n\n      return response;\n    });\n  }\n}\n\nfunction transformDates(item) {\n  if ((<Goal>item).deadline) {\n    (<Goal>item).deadline = new Date((<any>item).deadline);\n  }\n}\n\n/**\n * @interface GoalList\n * @extends {CSCoreSDK.ListResponse<Goal>}\n */\nexport interface GoalList extends CSCoreSDK.ListResponse<Goal> { }\n\n/**\n * @interface Goal\n */\nexport interface Goal {\n\n  /**\n   * Saving goal name. Must be non-empty and unique among goals of one client.\n   */\n  name: string;\n\n  /**\n   * Price of the saving goal.\n   */\n  price: Amount;\n\n  /**\n   * Maximal date (deadline) of the saving goal completion.\n   */\n  deadline: Date;\n\n  /**\n   * Flag of the completed goal.\n   */\n  completed: boolean;\n}\n\n/**\n * @interface UpdateGoal\n */\nexport interface UpdateGoal {\n  goals: [Goal]\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/goals/goals.ts","import * as CSCoreSDK from 'cs-core-sdk';\n\n/**\n * @class PromotionsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<Promotion>}\n * @implements {CSCoreSDK.CreateEnabled<CreatePromotionRequest, CreatePromotionResponse>}\n */\nexport class PromotionsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<Promotion>, CSCoreSDK.CreateEnabled<CreatePromotionRequest, CreatePromotionResponse>  {\n\n  /**\n   * Returns promotion list for the current user \n   * @returns {Promise<PromotionList>}\n   */\n  list = (): Promise<PromotionList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'promotions');\n  }\n\n  /**\n   * Hide specified promotion\n   * @param {CreatePromotionRequest} payload\n   * @returns {Promise<CreatePromotionResponse>}\n   */\n  create = (payload: CreatePromotionRequest): Promise<CreatePromotionResponse> => {\n    return this._client.callApi(this.getPath().replace('promotions', 'actions'), 'POST', null, payload);\n  }\n}\n\n/**\n * @interface PromotionList\n * @extends {CSCoreSDK.ListResponse<Promotion>}\n */\nexport interface PromotionList extends CSCoreSDK.ListResponse<Promotion> { }\n\n/**\n * @interface Promotion\n */\nexport interface Promotion {\n\n  /**\n   * Id of campaign\n   */\n  promotionId: string;\n\n  displayType: {\n\n    /**\n     * Title of the promotion.\n     */\n    titleText?: string;\n\n    /**\n     * Additional - subline text for the title.\n     */\n    sublineText?: string;\n\n    /**\n     * The type of the layout for the campaign. Currently only these values are possible: OVERVIEW_CARD\n     */\n    displayType: string;\n\n    /**\n     * Type of the campaign, possible values are PRODUCT_PROMOTION, PLUGIN_PROMOTION, INFOCARD, SHADOWCARD\n     */\n    cardDesign: string;\n\n    /**\n     * relative path of url for the background picture published in WCM.\n     */\n    backgroundImage?: string;\n\n    /**\n     * relative path of url for the main picture published in WCM.\n     */\n    mainImage?: string;\n\n    /**\n     * Number of the row in the Overview screen, where the promotion should by displayed. Relevant only for displayType OVERVIEW_CARD\n     */\n    position: number;\n\n    /**\n     * Number of the column in the Overview screen, where the promotion should by displayed. Relevant only for displayType OVERVIEW_CARD\n     */\n    column: string;\n\n    /**\n     * Labeling of the main button. Can also be empty, if empty we don’t show a button. Max characters: 30 preliminary value can perhaps change later.\n     */\n    btnText?: string;\n\n    /**\n     * Key, describing the look of the main button. Must be one of the following values: DEFAULT BORDER PRIMARY SUCCESS INFO WARNING DANGER LINK, GREY\n     */\n    btnDesign?: string;\n  }\n\n  /**\n   * Possible actions. Each action is represented by related button on the promotion card/message etc.\n   */\n  actions: [{\n\n    /**\n     * Technical identifier of the action\n     */\n    actionID: string;\n\n    /**\n     * Type of the action button. Possible values are SHOPPRODUCT, SHOWURL, HIDE\n     */\n    actionType: string;\n\n    /**\n     * Name of the window where the url should be opened. This element is mandatory only in case of actionType = SHOWURL. Can be empty then same window\n     */\n    target?: string;\n\n    /**\n     * Contains the URL of an external site to be called. This element is only mandatory if actionType = SHOWURL\n     */\n    url?: string;\n\n    /**\n     * Code of the product/plugin connected to the sales promotion. Possible values are Possible values are: RUFO_ORDER, RUFO_INCREASE, UFO_ORDER, UFO_INCREASE.\n     */\n    productCode?: string;\n\n    /**\n     * Element connected to this action. Application specific attribute.\n     */\n    element: string;\n  }]\n}\n\n/**\n * @interface CreatePromotionRequest\n */\nexport interface CreatePromotionRequest {\n\n  /**\n   * Id of campaign\n   */\n  promotionId: string;\n\n  executedAction: {\n\n    actionId: string;\n\n    actionType: string;\n  };\n}\n\n/**\n * @interface CreatePromotionResponse\n */\nexport interface CreatePromotionResponse {\n\n  infoItems?: [{\n\n    infoName: string;\n\n    infoValue: string;\n  }];\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/promotions/promotions.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../common';\n\n/**\n * @class AuthorizationLimitsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ParametrizedListEnabled<AuthorizationLimitsParams, AuthorizationLimit>}\n * @implements {CSCoreSDK.HasInstanceResource<AuthorizationLimitResource>}\n */\nexport class AuthorizationLimitsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ParametrizedListEnabled<AuthorizationLimitsParams, AuthorizationLimit>, CSCoreSDK.HasInstanceResource<AuthorizationLimitResource> {\n\n  /**\n   * Return all user local specific payment order entry limits for for all user active authorization methods and channels/applications used in country.\n   * @param {AuthorizationLimitsParams=} params\n   * @returns {Promise<AuthorizationLimitList>}\n   */\n  list = (params?: AuthorizationLimitsParams): Promise<AuthorizationLimitList> => {\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'limits', params).then(response => {\n\n      response.items.forEach(x => {\n        resourcifyLimits(<AuthorizationLimit>x, this.withId((<AuthorizationLimit>x).id));\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Get the resource of authorization limit with a given id\n   * @param {string} id\n   * @returns {AuthorizationLimitResource}\n   */\n  withId = (id: string): AuthorizationLimitResource => {\n    return new AuthorizationLimitResource(id, this.getPath(), this.getClient());\n  }\n}\n\n/**\n * @class AuthorizationLimitResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<AuthorizationLimit>}\n */\nexport class AuthorizationLimitResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<AuthorizationLimit> {\n\n  /**\n   * Return local specific payment order entry limits valid for combination of user, authorization method and used channel/application. For example user could define different limits for TAC authorization via George and mobile applications.\n   * @returns {Promise<AuthorizationLimit>}\n   */\n  get = (): Promise<AuthorizationLimit> => {\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n\n      resourcifyLimits(<AuthorizationLimit>response, this);\n\n      return response;\n    });\n  }\n}\n\nfunction resourcifyLimits(limit: AuthorizationLimit, limitReference: AuthorizationLimitResource) {\n  limit.get = limitReference.get;\n}\n\n/**\n * @interface AuthorizationLimitList\n * @extends {CSCoreSDK.ListResponse<AuthorizationLimit>}\n */\nexport interface AuthorizationLimitList extends CSCoreSDK.ListResponse<AuthorizationLimit> { }\n\n/**\n * @interface AuthorizationLimit\n */\nexport interface AuthorizationLimit {\n\n  /**\n   * Internal ID for limit definition for authorization type, channel, application. If internal ID doesn't exist, ID could be generated using authorizationType, channelId and applicationId values.\n   */\n  id: string;\n\n  /**\n   * Authorization method type for which is limit defined. ENUM: tac, tan, sms, gridCard, eok, displayCard, mToken other local authorization type has to be defined.\n   */\n  authorizationType: string;\n\n  /**\n   * ID of the channel for which is limit defined. ENUM: netBanking, mobileBanking, homeBanking, thirdParty, and unknown - limit valid for all channels, not particulary defined.\n   */\n  channelId: string;\n\n  /**\n   * ID of the application for which is limit defined. ENUM: George, InternetBanking and unknown - limit valid for all applications, not particulary defined.\n   */\n  applicationId: string;\n\n  /**\n   * Daily limit for particular authorization method (_embedded AMOUNT type)\n   */\n  dailyLimit?: Amount;\n\n  /**\n   * Transaction limit for particular authorization method.\n   */\n  transactionLimit?: Amount;\n\n  /**\n   * Maximal daily limit for authorization method defined by bank.\n   */\n  maxBankLimit?: Amount;\n\n  /**\n   * Convenience method for fetching authorization limit detail.\n   * @returns {Promise<AuthorizationLimit>}\n   */\n  get: () => Promise<AuthorizationLimit>;\n}\n\n/**\n * @interface AuthorizationLimitsParams\n */\nexport interface AuthorizationLimitsParams {\n\n  /**\n   * Channel for which limits are requested. Example: George \n   */\n  channel?: string;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/authorization-limits/authorization-limits.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { NetbankingEmptyResponse } from '../common';\n\n/**\n * @class AuthorizationTokenResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse>}\n */\nexport class AuthorizationTokenResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse> {\n\n  /**\n   * Invalidate authorization token.\n   * @returns {Promise<NetbankingEmptyResponse>}\n   */\n  delete = (): Promise<NetbankingEmptyResponse> => {\n    return this._client.callApi(this.getPath().replace('/my', ''), 'DELETE');\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/authorization-token/authorization-token.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { SignInfo } from '../common';\n\n/**\n * @class BundlesResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.CreateEnabled<BundleCreateRequest, BundleResponse>}\n */\nexport class BundlesResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.CreateEnabled<BundleCreateRequest, BundleResponse> {\n\n  /**\n   * @param {BundleCreateRequest} payload\n   * @returns {Promise<BundleResponse>}\n   */\n  create = (payload: BundleCreateRequest): Promise<BundleResponse> => {\n    return CSCoreSDK.ResourceUtils.CallCreate(this, payload).then(response => {\n\n      CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), `${this.getPath()}/${(<BundleResponse>response).id}`);\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface BundleCreateRequest\n */\nexport interface BundleCreateRequest {\n\n  /**\n   * Name of the bundle.\n   */\n  name: string;\n\n  /**\n   * Array of items in bundle. Every item represents payment order for batch sign.\n   */\n  items: [{\n    id: string;\n    signInfo: {\n      state: string;\n      signId: string;\n    }\n  }];\n}\n\n/**\n * @interface BundleResponse\n * @extends {CSCoreSDK.Signable}\n */\nexport interface BundleResponse extends CSCoreSDK.Signable {\n\n  /**\n   * Bundle identifier.\n   */\n  id: string;\n\n  /**\n   * Name of the bundle.\n   */\n  name?: string;\n\n  /**\n   * Array of items in bundle. Every item represents payment order for batch sign.\n   */\n  items: [{\n    id: string;\n    signInfo: SignInfo;\n  }];\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/bundles/bundles.ts"],"sourceRoot":""}