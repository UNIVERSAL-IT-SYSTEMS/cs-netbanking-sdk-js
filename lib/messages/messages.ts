import * as CSCoreSDK from 'cs-core-sdk';
import { MessagesMandatoryResource } from './mandatory';
import { MessageAttachmentsResource } from './attachments';
import { NetbankingEmptyResponse } from '../common';

/**
 * @class MessagesResource
 * @extends {CSCoreSDK.Resource}
 * @implements {CSCoreSDK.PaginatedListEnabled<Message>}
 * @implements {CSCoreSDK.HasInstanceResource<MessageResource>}
 */
export class MessagesResource extends CSCoreSDK.Resource
  implements CSCoreSDK.PaginatedListEnabled<Message>, CSCoreSDK.HasInstanceResource<MessageResource> {

  /**
   * Get all messages for current user generated by bank itself. Message can be read or unread, mandatory and non-mandatory. This call might return different messages based on appId of the caller (for example, some messages might be specific to an application).
   * @param {MessagesParameters=} params
   * @returns {Promise<MessageList>}
   */
  list = (params?: MessagesParameters): Promise<MessageList> => {
    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'messages', params, response => {

      response.items.forEach(item => {
        transformDates(item);
        resourcifyMessages(<Message>item, this.withId((<Message>item).id));
      });

      return response;
    });
  }

  /**
   * Get the resource of message with a given id 
   * @param {string} id
   * @returns {MessageResource}
   */
  withId = (id: string): MessageResource => {
    return new MessageResource(id, this.getPath(), this.getClient());
  }

  /**
   * Get messages mandatory resource
   * @returns {MessagesMandatoryResource}
   */
  get mandatory(): MessagesMandatoryResource {
    return new MessagesMandatoryResource(`${this.getPath()}/mandatory`, this.getClient());
  }
}

/**
 * @class MessageResource
 * @extends {CSCoreSDK.InstanceResource}
 * @implements {CSCoreSDK.GetEnabled<Message>}
 * @implements {CSCoreSDK.UpdateEnabled<UpdateMessageRequest, NetbankingEmptyResponse>}
 * @implements {CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse>}
 */
export class MessageResource extends CSCoreSDK.InstanceResource
  implements CSCoreSDK.GetEnabled<Message>, CSCoreSDK.UpdateEnabled<UpdateMessageRequest, NetbankingEmptyResponse>, CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse> {

  /**
   * Get one specific messages for current user generated by bank itself. Message can be read or unread, mandatory and non-mandatory.
   * @returns {Promise<Message>}
   */
  get = (): Promise<Message> => {
    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {
      transformDates(response);
      resourcifyMessages(<Message>response, this);

      return response;
    });
  }

  /**
   * After message has been read by user it should be marked accordingly by this endpoint.
   * @param {UpdateMessageRequest} payload
   * @returns {Promise<NetbankingEmptyResponse>}
   */
  update = (payload: UpdateMessageRequest): Promise<NetbankingEmptyResponse> => {
    return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);
  }

  /**
   * Resource for deleting message by its identifier. Only read messages can be deleted.
   * @returns {Promise<NetbankingEmptyResponse>}
   */
  delete = (): Promise<NetbankingEmptyResponse> => {
    return CSCoreSDK.ResourceUtils.CallDelete(this, null);
  }

  /**
   * Get messages attachments resource
   * @returns {MessageAttachmentsResource}
   */
  get attachments(): MessageAttachmentsResource {
    return new MessageAttachmentsResource(`${this.getPath()}/attachments`, this.getClient());
  }
}

function transformDates(item) {
  CSCoreSDK.EntityUtils.addDatesFromISO(['date'], item);
}

function resourcifyMessages(message: Message, messageReference: MessageResource) {
  message.get = messageReference.get;
  message.update = messageReference.update;
  message.delete = messageReference.delete;
  // Convenience download
}

/**
 * @interface MessageList
 * @extends {CSCoreSDK.PaginatedListResponse<Message>}
 */
export interface MessageList extends CSCoreSDK.PaginatedListResponse<Message> { }

/**
 * @interface Message
 */
export interface Message {

  /**
   * Message identifier.
   */
  id: string;

  /**
   * Name of the message sender. For example source system of the message.
   */
  from: string;

  /**
   * Message subject.
   */
  subject: string;

  /**
   * Date when message was sent/generated.
   */
  date: Date;

  /**
   * Body of the message. Body is html code. It is up to FE application to properly display it.
   */
  body: string;

  /**
   * Array of message attachments.
   */
  attachments: [{

    /**
     * Attachment identifier.
     */
    id: string;

    /**
     * File name of the attachment.
     */
    fileName: string;
  }];

  /**
   * Array of flags for messages.
   */
  flags?: [string];

  /**
   * Convenience get method for fetching message detail
   * @returns {Promise<Message>}
   */
  get: () => Promise<Message>;

  /**
   * Convenience update method for updating message
   * @param {UpdateMessageRequest} payload
   * @returns {Promise<NetbankingEmptyResponse>}
   */
  update: (payload: UpdateMessageRequest) => Promise<NetbankingEmptyResponse>;

  /**
   * Convenience delete method for deleting message
   * @returns {Promise<NetbankingEmptyResponse>}
   */
  delete: () => Promise<NetbankingEmptyResponse>;
}

/**
 * @interface MessagesParameters
 * @extends {CSCoreSDK.Paginated}
 * @extends {CSCoreSDK.Sortable}
 */
export interface MessagesParameters extends CSCoreSDK.Paginated, CSCoreSDK.Sortable { }

/**
 * @interface UpdateMessageRequest
 */
export interface UpdateMessageRequest {
  read: boolean;
}